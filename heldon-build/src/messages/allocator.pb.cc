// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: allocator.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "allocator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mesos {
namespace allocator {

namespace {

const ::google::protobuf::Descriptor* InverseOfferStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InverseOfferStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InverseOfferStatus_Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_allocator_2eproto() {
  protobuf_AddDesc_allocator_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "allocator.proto");
  GOOGLE_CHECK(file != NULL);
  InverseOfferStatus_descriptor_ = file->message_type(0);
  static const int InverseOfferStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InverseOfferStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InverseOfferStatus, framework_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InverseOfferStatus, timestamp_),
  };
  InverseOfferStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InverseOfferStatus_descriptor_,
      InverseOfferStatus::default_instance_,
      InverseOfferStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InverseOfferStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InverseOfferStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InverseOfferStatus));
  InverseOfferStatus_Status_descriptor_ = InverseOfferStatus_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_allocator_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InverseOfferStatus_descriptor_, &InverseOfferStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_allocator_2eproto() {
  delete InverseOfferStatus::default_instance_;
  delete InverseOfferStatus_reflection_;
}

void protobuf_AddDesc_allocator_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mesos::protobuf_AddDesc_mesos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017allocator.proto\022\017mesos.allocator\032\013meso"
    "s.proto\"\316\001\n\022InverseOfferStatus\022:\n\006status"
    "\030\001 \002(\0162*.mesos.allocator.InverseOfferSta"
    "tus.Status\022(\n\014framework_id\030\002 \002(\0132\022.mesos"
    ".FrameworkID\022\"\n\ttimestamp\030\003 \002(\0132\017.mesos."
    "TimeInfo\".\n\006Status\022\013\n\007UNKNOWN\020\001\022\n\n\006ACCEP"
    "T\020\002\022\013\n\007DECLINE\020\003", 256);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "allocator.proto", &protobuf_RegisterTypes);
  InverseOfferStatus::default_instance_ = new InverseOfferStatus();
  InverseOfferStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_allocator_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_allocator_2eproto {
  StaticDescriptorInitializer_allocator_2eproto() {
    protobuf_AddDesc_allocator_2eproto();
  }
} static_descriptor_initializer_allocator_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* InverseOfferStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InverseOfferStatus_Status_descriptor_;
}
bool InverseOfferStatus_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InverseOfferStatus_Status InverseOfferStatus::UNKNOWN;
const InverseOfferStatus_Status InverseOfferStatus::ACCEPT;
const InverseOfferStatus_Status InverseOfferStatus::DECLINE;
const InverseOfferStatus_Status InverseOfferStatus::Status_MIN;
const InverseOfferStatus_Status InverseOfferStatus::Status_MAX;
const int InverseOfferStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InverseOfferStatus::kStatusFieldNumber;
const int InverseOfferStatus::kFrameworkIdFieldNumber;
const int InverseOfferStatus::kTimestampFieldNumber;
#endif  // !_MSC_VER

InverseOfferStatus::InverseOfferStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.allocator.InverseOfferStatus)
}

void InverseOfferStatus::InitAsDefaultInstance() {
  framework_id_ = const_cast< ::mesos::FrameworkID*>(&::mesos::FrameworkID::default_instance());
  timestamp_ = const_cast< ::mesos::TimeInfo*>(&::mesos::TimeInfo::default_instance());
}

InverseOfferStatus::InverseOfferStatus(const InverseOfferStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.allocator.InverseOfferStatus)
}

void InverseOfferStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  framework_id_ = NULL;
  timestamp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InverseOfferStatus::~InverseOfferStatus() {
  // @@protoc_insertion_point(destructor:mesos.allocator.InverseOfferStatus)
  SharedDtor();
}

void InverseOfferStatus::SharedDtor() {
  if (this != default_instance_) {
    delete framework_id_;
    delete timestamp_;
  }
}

void InverseOfferStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InverseOfferStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InverseOfferStatus_descriptor_;
}

const InverseOfferStatus& InverseOfferStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_allocator_2eproto();
  return *default_instance_;
}

InverseOfferStatus* InverseOfferStatus::default_instance_ = NULL;

InverseOfferStatus* InverseOfferStatus::New() const {
  return new InverseOfferStatus;
}

void InverseOfferStatus::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    status_ = 1;
    if (has_framework_id()) {
      if (framework_id_ != NULL) framework_id_->::mesos::FrameworkID::Clear();
    }
    if (has_timestamp()) {
      if (timestamp_ != NULL) timestamp_->::mesos::TimeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InverseOfferStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.allocator.InverseOfferStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.allocator.InverseOfferStatus.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::allocator::InverseOfferStatus_Status_IsValid(value)) {
            set_status(static_cast< ::mesos::allocator::InverseOfferStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_framework_id;
        break;
      }

      // required .mesos.FrameworkID framework_id = 2;
      case 2: {
        if (tag == 18) {
         parse_framework_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // required .mesos.TimeInfo timestamp = 3;
      case 3: {
        if (tag == 26) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.allocator.InverseOfferStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.allocator.InverseOfferStatus)
  return false;
#undef DO_
}

void InverseOfferStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.allocator.InverseOfferStatus)
  // required .mesos.allocator.InverseOfferStatus.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // required .mesos.FrameworkID framework_id = 2;
  if (has_framework_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->framework_id(), output);
  }

  // required .mesos.TimeInfo timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.allocator.InverseOfferStatus)
}

::google::protobuf::uint8* InverseOfferStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.allocator.InverseOfferStatus)
  // required .mesos.allocator.InverseOfferStatus.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // required .mesos.FrameworkID framework_id = 2;
  if (has_framework_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->framework_id(), target);
  }

  // required .mesos.TimeInfo timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.allocator.InverseOfferStatus)
  return target;
}

int InverseOfferStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.allocator.InverseOfferStatus.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required .mesos.FrameworkID framework_id = 2;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_id());
    }

    // required .mesos.TimeInfo timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InverseOfferStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InverseOfferStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InverseOfferStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InverseOfferStatus::MergeFrom(const InverseOfferStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_framework_id()) {
      mutable_framework_id()->::mesos::FrameworkID::MergeFrom(from.framework_id());
    }
    if (from.has_timestamp()) {
      mutable_timestamp()->::mesos::TimeInfo::MergeFrom(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InverseOfferStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InverseOfferStatus::CopyFrom(const InverseOfferStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InverseOfferStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_framework_id()) {
    if (!this->framework_id().IsInitialized()) return false;
  }
  if (has_timestamp()) {
    if (!this->timestamp().IsInitialized()) return false;
  }
  return true;
}

void InverseOfferStatus::Swap(InverseOfferStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(framework_id_, other->framework_id_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InverseOfferStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InverseOfferStatus_descriptor_;
  metadata.reflection = InverseOfferStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace allocator
}  // namespace mesos

// @@protoc_insertion_point(global_scope)
