// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cluster_operation.proto

#ifndef PROTOBUF_cluster_5foperation_2eproto__INCLUDED
#define PROTOBUF_cluster_5foperation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cluster_5foperation_2eproto();
void protobuf_AssignDesc_cluster_5foperation_2eproto();
void protobuf_ShutdownFile_cluster_5foperation_2eproto();

class ShutdownMessage;
class ReplyShutdownMessage;

// ===================================================================

class ShutdownMessage : public ::google::protobuf::Message {
 public:
  ShutdownMessage();
  virtual ~ShutdownMessage();

  ShutdownMessage(const ShutdownMessage& from);

  inline ShutdownMessage& operator=(const ShutdownMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShutdownMessage& default_instance();

  void Swap(ShutdownMessage* other);

  // implements Message ----------------------------------------------

  ShutdownMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShutdownMessage& from);
  void MergeFrom(const ShutdownMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string master_ip = 1;
  inline bool has_master_ip() const;
  inline void clear_master_ip();
  static const int kMasterIpFieldNumber = 1;
  inline const ::std::string& master_ip() const;
  inline void set_master_ip(const ::std::string& value);
  inline void set_master_ip(const char* value);
  inline void set_master_ip(const char* value, size_t size);
  inline ::std::string* mutable_master_ip();
  inline ::std::string* release_master_ip();
  inline void set_allocated_master_ip(::std::string* master_ip);

  // required string slave_ip = 2;
  inline bool has_slave_ip() const;
  inline void clear_slave_ip();
  static const int kSlaveIpFieldNumber = 2;
  inline const ::std::string& slave_ip() const;
  inline void set_slave_ip(const ::std::string& value);
  inline void set_slave_ip(const char* value);
  inline void set_slave_ip(const char* value, size_t size);
  inline ::std::string* mutable_slave_ip();
  inline ::std::string* release_slave_ip();
  inline void set_allocated_slave_ip(::std::string* slave_ip);

  // @@protoc_insertion_point(class_scope:ShutdownMessage)
 private:
  inline void set_has_master_ip();
  inline void clear_has_master_ip();
  inline void set_has_slave_ip();
  inline void clear_has_slave_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* master_ip_;
  ::std::string* slave_ip_;
  friend void  protobuf_AddDesc_cluster_5foperation_2eproto();
  friend void protobuf_AssignDesc_cluster_5foperation_2eproto();
  friend void protobuf_ShutdownFile_cluster_5foperation_2eproto();

  void InitAsDefaultInstance();
  static ShutdownMessage* default_instance_;
};
// -------------------------------------------------------------------

class ReplyShutdownMessage : public ::google::protobuf::Message {
 public:
  ReplyShutdownMessage();
  virtual ~ReplyShutdownMessage();

  ReplyShutdownMessage(const ReplyShutdownMessage& from);

  inline ReplyShutdownMessage& operator=(const ReplyShutdownMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyShutdownMessage& default_instance();

  void Swap(ReplyShutdownMessage* other);

  // implements Message ----------------------------------------------

  ReplyShutdownMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyShutdownMessage& from);
  void MergeFrom(const ReplyShutdownMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string master_ip = 1;
  inline bool has_master_ip() const;
  inline void clear_master_ip();
  static const int kMasterIpFieldNumber = 1;
  inline const ::std::string& master_ip() const;
  inline void set_master_ip(const ::std::string& value);
  inline void set_master_ip(const char* value);
  inline void set_master_ip(const char* value, size_t size);
  inline ::std::string* mutable_master_ip();
  inline ::std::string* release_master_ip();
  inline void set_allocated_master_ip(::std::string* master_ip);

  // required string slave_ip = 2;
  inline bool has_slave_ip() const;
  inline void clear_slave_ip();
  static const int kSlaveIpFieldNumber = 2;
  inline const ::std::string& slave_ip() const;
  inline void set_slave_ip(const ::std::string& value);
  inline void set_slave_ip(const char* value);
  inline void set_slave_ip(const char* value, size_t size);
  inline ::std::string* mutable_slave_ip();
  inline ::std::string* release_slave_ip();
  inline void set_allocated_slave_ip(::std::string* slave_ip);

  // required bool is_shutdown = 3;
  inline bool has_is_shutdown() const;
  inline void clear_is_shutdown();
  static const int kIsShutdownFieldNumber = 3;
  inline bool is_shutdown() const;
  inline void set_is_shutdown(bool value);

  // @@protoc_insertion_point(class_scope:ReplyShutdownMessage)
 private:
  inline void set_has_master_ip();
  inline void clear_has_master_ip();
  inline void set_has_slave_ip();
  inline void clear_has_slave_ip();
  inline void set_has_is_shutdown();
  inline void clear_has_is_shutdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* master_ip_;
  ::std::string* slave_ip_;
  bool is_shutdown_;
  friend void  protobuf_AddDesc_cluster_5foperation_2eproto();
  friend void protobuf_AssignDesc_cluster_5foperation_2eproto();
  friend void protobuf_ShutdownFile_cluster_5foperation_2eproto();

  void InitAsDefaultInstance();
  static ReplyShutdownMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ShutdownMessage

// required string master_ip = 1;
inline bool ShutdownMessage::has_master_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShutdownMessage::set_has_master_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShutdownMessage::clear_has_master_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShutdownMessage::clear_master_ip() {
  if (master_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_->clear();
  }
  clear_has_master_ip();
}
inline const ::std::string& ShutdownMessage::master_ip() const {
  // @@protoc_insertion_point(field_get:ShutdownMessage.master_ip)
  return *master_ip_;
}
inline void ShutdownMessage::set_master_ip(const ::std::string& value) {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  master_ip_->assign(value);
  // @@protoc_insertion_point(field_set:ShutdownMessage.master_ip)
}
inline void ShutdownMessage::set_master_ip(const char* value) {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  master_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:ShutdownMessage.master_ip)
}
inline void ShutdownMessage::set_master_ip(const char* value, size_t size) {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  master_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ShutdownMessage.master_ip)
}
inline ::std::string* ShutdownMessage::mutable_master_ip() {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ShutdownMessage.master_ip)
  return master_ip_;
}
inline ::std::string* ShutdownMessage::release_master_ip() {
  clear_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = master_ip_;
    master_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ShutdownMessage::set_allocated_master_ip(::std::string* master_ip) {
  if (master_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_ip_;
  }
  if (master_ip) {
    set_has_master_ip();
    master_ip_ = master_ip;
  } else {
    clear_has_master_ip();
    master_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ShutdownMessage.master_ip)
}

// required string slave_ip = 2;
inline bool ShutdownMessage::has_slave_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShutdownMessage::set_has_slave_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShutdownMessage::clear_has_slave_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShutdownMessage::clear_slave_ip() {
  if (slave_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_->clear();
  }
  clear_has_slave_ip();
}
inline const ::std::string& ShutdownMessage::slave_ip() const {
  // @@protoc_insertion_point(field_get:ShutdownMessage.slave_ip)
  return *slave_ip_;
}
inline void ShutdownMessage::set_slave_ip(const ::std::string& value) {
  set_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_ = new ::std::string;
  }
  slave_ip_->assign(value);
  // @@protoc_insertion_point(field_set:ShutdownMessage.slave_ip)
}
inline void ShutdownMessage::set_slave_ip(const char* value) {
  set_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_ = new ::std::string;
  }
  slave_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:ShutdownMessage.slave_ip)
}
inline void ShutdownMessage::set_slave_ip(const char* value, size_t size) {
  set_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_ = new ::std::string;
  }
  slave_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ShutdownMessage.slave_ip)
}
inline ::std::string* ShutdownMessage::mutable_slave_ip() {
  set_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ShutdownMessage.slave_ip)
  return slave_ip_;
}
inline ::std::string* ShutdownMessage::release_slave_ip() {
  clear_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = slave_ip_;
    slave_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ShutdownMessage::set_allocated_slave_ip(::std::string* slave_ip) {
  if (slave_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slave_ip_;
  }
  if (slave_ip) {
    set_has_slave_ip();
    slave_ip_ = slave_ip;
  } else {
    clear_has_slave_ip();
    slave_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ShutdownMessage.slave_ip)
}

// -------------------------------------------------------------------

// ReplyShutdownMessage

// required string master_ip = 1;
inline bool ReplyShutdownMessage::has_master_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyShutdownMessage::set_has_master_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyShutdownMessage::clear_has_master_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyShutdownMessage::clear_master_ip() {
  if (master_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_->clear();
  }
  clear_has_master_ip();
}
inline const ::std::string& ReplyShutdownMessage::master_ip() const {
  // @@protoc_insertion_point(field_get:ReplyShutdownMessage.master_ip)
  return *master_ip_;
}
inline void ReplyShutdownMessage::set_master_ip(const ::std::string& value) {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  master_ip_->assign(value);
  // @@protoc_insertion_point(field_set:ReplyShutdownMessage.master_ip)
}
inline void ReplyShutdownMessage::set_master_ip(const char* value) {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  master_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:ReplyShutdownMessage.master_ip)
}
inline void ReplyShutdownMessage::set_master_ip(const char* value, size_t size) {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  master_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ReplyShutdownMessage.master_ip)
}
inline ::std::string* ReplyShutdownMessage::mutable_master_ip() {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ReplyShutdownMessage.master_ip)
  return master_ip_;
}
inline ::std::string* ReplyShutdownMessage::release_master_ip() {
  clear_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = master_ip_;
    master_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReplyShutdownMessage::set_allocated_master_ip(::std::string* master_ip) {
  if (master_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_ip_;
  }
  if (master_ip) {
    set_has_master_ip();
    master_ip_ = master_ip;
  } else {
    clear_has_master_ip();
    master_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ReplyShutdownMessage.master_ip)
}

// required string slave_ip = 2;
inline bool ReplyShutdownMessage::has_slave_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyShutdownMessage::set_has_slave_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyShutdownMessage::clear_has_slave_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyShutdownMessage::clear_slave_ip() {
  if (slave_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_->clear();
  }
  clear_has_slave_ip();
}
inline const ::std::string& ReplyShutdownMessage::slave_ip() const {
  // @@protoc_insertion_point(field_get:ReplyShutdownMessage.slave_ip)
  return *slave_ip_;
}
inline void ReplyShutdownMessage::set_slave_ip(const ::std::string& value) {
  set_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_ = new ::std::string;
  }
  slave_ip_->assign(value);
  // @@protoc_insertion_point(field_set:ReplyShutdownMessage.slave_ip)
}
inline void ReplyShutdownMessage::set_slave_ip(const char* value) {
  set_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_ = new ::std::string;
  }
  slave_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:ReplyShutdownMessage.slave_ip)
}
inline void ReplyShutdownMessage::set_slave_ip(const char* value, size_t size) {
  set_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_ = new ::std::string;
  }
  slave_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ReplyShutdownMessage.slave_ip)
}
inline ::std::string* ReplyShutdownMessage::mutable_slave_ip() {
  set_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ReplyShutdownMessage.slave_ip)
  return slave_ip_;
}
inline ::std::string* ReplyShutdownMessage::release_slave_ip() {
  clear_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = slave_ip_;
    slave_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReplyShutdownMessage::set_allocated_slave_ip(::std::string* slave_ip) {
  if (slave_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slave_ip_;
  }
  if (slave_ip) {
    set_has_slave_ip();
    slave_ip_ = slave_ip;
  } else {
    clear_has_slave_ip();
    slave_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ReplyShutdownMessage.slave_ip)
}

// required bool is_shutdown = 3;
inline bool ReplyShutdownMessage::has_is_shutdown() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplyShutdownMessage::set_has_is_shutdown() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplyShutdownMessage::clear_has_is_shutdown() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplyShutdownMessage::clear_is_shutdown() {
  is_shutdown_ = false;
  clear_has_is_shutdown();
}
inline bool ReplyShutdownMessage::is_shutdown() const {
  // @@protoc_insertion_point(field_get:ReplyShutdownMessage.is_shutdown)
  return is_shutdown_;
}
inline void ReplyShutdownMessage::set_is_shutdown(bool value) {
  set_has_is_shutdown();
  is_shutdown_ = value;
  // @@protoc_insertion_point(field_set:ReplyShutdownMessage.is_shutdown)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cluster_5foperation_2eproto__INCLUDED
