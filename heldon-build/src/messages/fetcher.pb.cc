// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fetcher.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fetcher.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mesos {
namespace fetcher {

namespace {

const ::google::protobuf::Descriptor* URI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  URI_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetcherInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetcherInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetcherInfo_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetcherInfo_Item_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FetcherInfo_Item_Action_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_fetcher_2eproto() {
  protobuf_AddDesc_fetcher_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fetcher.proto");
  GOOGLE_CHECK(file != NULL);
  URI_descriptor_ = file->message_type(0);
  static const int URI_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URI, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URI, executable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URI, extract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URI, cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URI, output_file_),
  };
  URI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      URI_descriptor_,
      URI::default_instance_,
      URI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(URI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(URI));
  FetcherInfo_descriptor_ = file->message_type(1);
  static const int FetcherInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherInfo, sandbox_directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherInfo, cache_directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherInfo, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherInfo, frameworks_home_),
  };
  FetcherInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetcherInfo_descriptor_,
      FetcherInfo::default_instance_,
      FetcherInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetcherInfo));
  FetcherInfo_Item_descriptor_ = FetcherInfo_descriptor_->nested_type(0);
  static const int FetcherInfo_Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherInfo_Item, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherInfo_Item, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherInfo_Item, cache_filename_),
  };
  FetcherInfo_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetcherInfo_Item_descriptor_,
      FetcherInfo_Item::default_instance_,
      FetcherInfo_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherInfo_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetcherInfo_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetcherInfo_Item));
  FetcherInfo_Item_Action_descriptor_ = FetcherInfo_Item_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fetcher_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    URI_descriptor_, &URI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetcherInfo_descriptor_, &FetcherInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetcherInfo_Item_descriptor_, &FetcherInfo_Item::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fetcher_2eproto() {
  delete URI::default_instance_;
  delete URI_reflection_;
  delete FetcherInfo::default_instance_;
  delete FetcherInfo_reflection_;
  delete FetcherInfo_Item::default_instance_;
  delete FetcherInfo_Item_reflection_;
}

void protobuf_AddDesc_fetcher_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rfetcher.proto\022\rmesos.fetcher\"c\n\003URI\022\r\n"
    "\005value\030\001 \002(\t\022\022\n\nexecutable\030\002 \001(\010\022\025\n\007extr"
    "act\030\003 \001(\010:\004true\022\r\n\005cache\030\004 \001(\010\022\023\n\013output"
    "_file\030\005 \001(\t\"\337\002\n\013FetcherInfo\022\031\n\021sandbox_d"
    "irectory\030\001 \002(\t\022\027\n\017cache_directory\030\002 \001(\t\022"
    ".\n\005items\030\003 \003(\0132\037.mesos.fetcher.FetcherIn"
    "fo.Item\022\014\n\004user\030\004 \001(\t\022\027\n\017frameworks_home"
    "\030\005 \001(\t\032\304\001\n\004Item\022\037\n\003uri\030\001 \002(\0132\022.mesos.fet"
    "cher.URI\0226\n\006action\030\002 \002(\0162&.mesos.fetcher"
    ".FetcherInfo.Item.Action\022\026\n\016cache_filena"
    "me\030\003 \001(\t\"K\n\006Action\022\020\n\014BYPASS_CACHE\020\000\022\026\n\022"
    "DOWNLOAD_AND_CACHE\020\001\022\027\n\023RETRIEVE_FROM_CA"
    "CHE\020\002B\"\n\030org.apache.mesos.fetcherB\006Proto"
    "s", 521);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fetcher.proto", &protobuf_RegisterTypes);
  URI::default_instance_ = new URI();
  FetcherInfo::default_instance_ = new FetcherInfo();
  FetcherInfo_Item::default_instance_ = new FetcherInfo_Item();
  URI::default_instance_->InitAsDefaultInstance();
  FetcherInfo::default_instance_->InitAsDefaultInstance();
  FetcherInfo_Item::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fetcher_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fetcher_2eproto {
  StaticDescriptorInitializer_fetcher_2eproto() {
    protobuf_AddDesc_fetcher_2eproto();
  }
} static_descriptor_initializer_fetcher_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int URI::kValueFieldNumber;
const int URI::kExecutableFieldNumber;
const int URI::kExtractFieldNumber;
const int URI::kCacheFieldNumber;
const int URI::kOutputFileFieldNumber;
#endif  // !_MSC_VER

URI::URI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.fetcher.URI)
}

void URI::InitAsDefaultInstance() {
}

URI::URI(const URI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.fetcher.URI)
}

void URI::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  executable_ = false;
  extract_ = true;
  cache_ = false;
  output_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

URI::~URI() {
  // @@protoc_insertion_point(destructor:mesos.fetcher.URI)
  SharedDtor();
}

void URI::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (output_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete output_file_;
  }
  if (this != default_instance_) {
  }
}

void URI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* URI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return URI_descriptor_;
}

const URI& URI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fetcher_2eproto();
  return *default_instance_;
}

URI* URI::default_instance_ = NULL;

URI* URI::New() const {
  return new URI;
}

void URI::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    executable_ = false;
    extract_ = true;
    cache_ = false;
    if (has_output_file()) {
      if (output_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        output_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool URI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.fetcher.URI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_executable;
        break;
      }

      // optional bool executable = 2;
      case 2: {
        if (tag == 16) {
         parse_executable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &executable_)));
          set_has_executable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_extract;
        break;
      }

      // optional bool extract = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_extract:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extract_)));
          set_has_extract();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cache;
        break;
      }

      // optional bool cache = 4;
      case 4: {
        if (tag == 32) {
         parse_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_)));
          set_has_cache();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_output_file;
        break;
      }

      // optional string output_file = 5;
      case 5: {
        if (tag == 42) {
         parse_output_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_file().data(), this->output_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "output_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.fetcher.URI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.fetcher.URI)
  return false;
#undef DO_
}

void URI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.fetcher.URI)
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->value(), output);
  }

  // optional bool executable = 2;
  if (has_executable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->executable(), output);
  }

  // optional bool extract = 3 [default = true];
  if (has_extract()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->extract(), output);
  }

  // optional bool cache = 4;
  if (has_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->cache(), output);
  }

  // optional string output_file = 5;
  if (has_output_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_file().data(), this->output_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "output_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->output_file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.fetcher.URI)
}

::google::protobuf::uint8* URI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.fetcher.URI)
  // required string value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }

  // optional bool executable = 2;
  if (has_executable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->executable(), target);
  }

  // optional bool extract = 3 [default = true];
  if (has_extract()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->extract(), target);
  }

  // optional bool cache = 4;
  if (has_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->cache(), target);
  }

  // optional string output_file = 5;
  if (has_output_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_file().data(), this->output_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "output_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->output_file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.fetcher.URI)
  return target;
}

int URI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional bool executable = 2;
    if (has_executable()) {
      total_size += 1 + 1;
    }

    // optional bool extract = 3 [default = true];
    if (has_extract()) {
      total_size += 1 + 1;
    }

    // optional bool cache = 4;
    if (has_cache()) {
      total_size += 1 + 1;
    }

    // optional string output_file = 5;
    if (has_output_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void URI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const URI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const URI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void URI::MergeFrom(const URI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_executable()) {
      set_executable(from.executable());
    }
    if (from.has_extract()) {
      set_extract(from.extract());
    }
    if (from.has_cache()) {
      set_cache(from.cache());
    }
    if (from.has_output_file()) {
      set_output_file(from.output_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void URI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void URI::CopyFrom(const URI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool URI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void URI::Swap(URI* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(executable_, other->executable_);
    std::swap(extract_, other->extract_);
    std::swap(cache_, other->cache_);
    std::swap(output_file_, other->output_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata URI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = URI_descriptor_;
  metadata.reflection = URI_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FetcherInfo_Item_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetcherInfo_Item_Action_descriptor_;
}
bool FetcherInfo_Item_Action_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FetcherInfo_Item_Action FetcherInfo_Item::BYPASS_CACHE;
const FetcherInfo_Item_Action FetcherInfo_Item::DOWNLOAD_AND_CACHE;
const FetcherInfo_Item_Action FetcherInfo_Item::RETRIEVE_FROM_CACHE;
const FetcherInfo_Item_Action FetcherInfo_Item::Action_MIN;
const FetcherInfo_Item_Action FetcherInfo_Item::Action_MAX;
const int FetcherInfo_Item::Action_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FetcherInfo_Item::kUriFieldNumber;
const int FetcherInfo_Item::kActionFieldNumber;
const int FetcherInfo_Item::kCacheFilenameFieldNumber;
#endif  // !_MSC_VER

FetcherInfo_Item::FetcherInfo_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.fetcher.FetcherInfo.Item)
}

void FetcherInfo_Item::InitAsDefaultInstance() {
  uri_ = const_cast< ::mesos::fetcher::URI*>(&::mesos::fetcher::URI::default_instance());
}

FetcherInfo_Item::FetcherInfo_Item(const FetcherInfo_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.fetcher.FetcherInfo.Item)
}

void FetcherInfo_Item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uri_ = NULL;
  action_ = 0;
  cache_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetcherInfo_Item::~FetcherInfo_Item() {
  // @@protoc_insertion_point(destructor:mesos.fetcher.FetcherInfo.Item)
  SharedDtor();
}

void FetcherInfo_Item::SharedDtor() {
  if (cache_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cache_filename_;
  }
  if (this != default_instance_) {
    delete uri_;
  }
}

void FetcherInfo_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetcherInfo_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetcherInfo_Item_descriptor_;
}

const FetcherInfo_Item& FetcherInfo_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fetcher_2eproto();
  return *default_instance_;
}

FetcherInfo_Item* FetcherInfo_Item::default_instance_ = NULL;

FetcherInfo_Item* FetcherInfo_Item::New() const {
  return new FetcherInfo_Item;
}

void FetcherInfo_Item::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_uri()) {
      if (uri_ != NULL) uri_->::mesos::fetcher::URI::Clear();
    }
    action_ = 0;
    if (has_cache_filename()) {
      if (cache_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cache_filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetcherInfo_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.fetcher.FetcherInfo.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.fetcher.URI uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uri()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_action;
        break;
      }

      // required .mesos.fetcher.FetcherInfo.Item.Action action = 2;
      case 2: {
        if (tag == 16) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::fetcher::FetcherInfo_Item_Action_IsValid(value)) {
            set_action(static_cast< ::mesos::fetcher::FetcherInfo_Item_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cache_filename;
        break;
      }

      // optional string cache_filename = 3;
      case 3: {
        if (tag == 26) {
         parse_cache_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cache_filename().data(), this->cache_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cache_filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.fetcher.FetcherInfo.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.fetcher.FetcherInfo.Item)
  return false;
#undef DO_
}

void FetcherInfo_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.fetcher.FetcherInfo.Item)
  // required .mesos.fetcher.URI uri = 1;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uri(), output);
  }

  // required .mesos.fetcher.FetcherInfo.Item.Action action = 2;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // optional string cache_filename = 3;
  if (has_cache_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache_filename().data(), this->cache_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cache_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cache_filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.fetcher.FetcherInfo.Item)
}

::google::protobuf::uint8* FetcherInfo_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.fetcher.FetcherInfo.Item)
  // required .mesos.fetcher.URI uri = 1;
  if (has_uri()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uri(), target);
  }

  // required .mesos.fetcher.FetcherInfo.Item.Action action = 2;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // optional string cache_filename = 3;
  if (has_cache_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache_filename().data(), this->cache_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cache_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cache_filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.fetcher.FetcherInfo.Item)
  return target;
}

int FetcherInfo_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.fetcher.URI uri = 1;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uri());
    }

    // required .mesos.fetcher.FetcherInfo.Item.Action action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional string cache_filename = 3;
    if (has_cache_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cache_filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetcherInfo_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetcherInfo_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetcherInfo_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetcherInfo_Item::MergeFrom(const FetcherInfo_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uri()) {
      mutable_uri()->::mesos::fetcher::URI::MergeFrom(from.uri());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_cache_filename()) {
      set_cache_filename(from.cache_filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetcherInfo_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetcherInfo_Item::CopyFrom(const FetcherInfo_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetcherInfo_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_uri()) {
    if (!this->uri().IsInitialized()) return false;
  }
  return true;
}

void FetcherInfo_Item::Swap(FetcherInfo_Item* other) {
  if (other != this) {
    std::swap(uri_, other->uri_);
    std::swap(action_, other->action_);
    std::swap(cache_filename_, other->cache_filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetcherInfo_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetcherInfo_Item_descriptor_;
  metadata.reflection = FetcherInfo_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FetcherInfo::kSandboxDirectoryFieldNumber;
const int FetcherInfo::kCacheDirectoryFieldNumber;
const int FetcherInfo::kItemsFieldNumber;
const int FetcherInfo::kUserFieldNumber;
const int FetcherInfo::kFrameworksHomeFieldNumber;
#endif  // !_MSC_VER

FetcherInfo::FetcherInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.fetcher.FetcherInfo)
}

void FetcherInfo::InitAsDefaultInstance() {
}

FetcherInfo::FetcherInfo(const FetcherInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.fetcher.FetcherInfo)
}

void FetcherInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sandbox_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cache_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  frameworks_home_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetcherInfo::~FetcherInfo() {
  // @@protoc_insertion_point(destructor:mesos.fetcher.FetcherInfo)
  SharedDtor();
}

void FetcherInfo::SharedDtor() {
  if (sandbox_directory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sandbox_directory_;
  }
  if (cache_directory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cache_directory_;
  }
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (frameworks_home_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frameworks_home_;
  }
  if (this != default_instance_) {
  }
}

void FetcherInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetcherInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetcherInfo_descriptor_;
}

const FetcherInfo& FetcherInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fetcher_2eproto();
  return *default_instance_;
}

FetcherInfo* FetcherInfo::default_instance_ = NULL;

FetcherInfo* FetcherInfo::New() const {
  return new FetcherInfo;
}

void FetcherInfo::Clear() {
  if (_has_bits_[0 / 32] & 27) {
    if (has_sandbox_directory()) {
      if (sandbox_directory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sandbox_directory_->clear();
      }
    }
    if (has_cache_directory()) {
      if (cache_directory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cache_directory_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_->clear();
      }
    }
    if (has_frameworks_home()) {
      if (frameworks_home_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        frameworks_home_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetcherInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.fetcher.FetcherInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sandbox_directory = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sandbox_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sandbox_directory().data(), this->sandbox_directory().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sandbox_directory");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cache_directory;
        break;
      }

      // optional string cache_directory = 2;
      case 2: {
        if (tag == 18) {
         parse_cache_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cache_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cache_directory().data(), this->cache_directory().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cache_directory");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .mesos.fetcher.FetcherInfo.Item items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // optional string user = 4;
      case 4: {
        if (tag == 34) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_frameworks_home;
        break;
      }

      // optional string frameworks_home = 5;
      case 5: {
        if (tag == 42) {
         parse_frameworks_home:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frameworks_home()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frameworks_home().data(), this->frameworks_home().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frameworks_home");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.fetcher.FetcherInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.fetcher.FetcherInfo)
  return false;
#undef DO_
}

void FetcherInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.fetcher.FetcherInfo)
  // required string sandbox_directory = 1;
  if (has_sandbox_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sandbox_directory().data(), this->sandbox_directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sandbox_directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sandbox_directory(), output);
  }

  // optional string cache_directory = 2;
  if (has_cache_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache_directory().data(), this->cache_directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cache_directory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cache_directory(), output);
  }

  // repeated .mesos.fetcher.FetcherInfo.Item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user(), output);
  }

  // optional string frameworks_home = 5;
  if (has_frameworks_home()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frameworks_home().data(), this->frameworks_home().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frameworks_home");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->frameworks_home(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.fetcher.FetcherInfo)
}

::google::protobuf::uint8* FetcherInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.fetcher.FetcherInfo)
  // required string sandbox_directory = 1;
  if (has_sandbox_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sandbox_directory().data(), this->sandbox_directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sandbox_directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sandbox_directory(), target);
  }

  // optional string cache_directory = 2;
  if (has_cache_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cache_directory().data(), this->cache_directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cache_directory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cache_directory(), target);
  }

  // repeated .mesos.fetcher.FetcherInfo.Item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // optional string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // optional string frameworks_home = 5;
  if (has_frameworks_home()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frameworks_home().data(), this->frameworks_home().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frameworks_home");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->frameworks_home(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.fetcher.FetcherInfo)
  return target;
}

int FetcherInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sandbox_directory = 1;
    if (has_sandbox_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sandbox_directory());
    }

    // optional string cache_directory = 2;
    if (has_cache_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cache_directory());
    }

    // optional string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string frameworks_home = 5;
    if (has_frameworks_home()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frameworks_home());
    }

  }
  // repeated .mesos.fetcher.FetcherInfo.Item items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetcherInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetcherInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetcherInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetcherInfo::MergeFrom(const FetcherInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sandbox_directory()) {
      set_sandbox_directory(from.sandbox_directory());
    }
    if (from.has_cache_directory()) {
      set_cache_directory(from.cache_directory());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_frameworks_home()) {
      set_frameworks_home(from.frameworks_home());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetcherInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetcherInfo::CopyFrom(const FetcherInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetcherInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void FetcherInfo::Swap(FetcherInfo* other) {
  if (other != this) {
    std::swap(sandbox_directory_, other->sandbox_directory_);
    std::swap(cache_directory_, other->cache_directory_);
    items_.Swap(&other->items_);
    std::swap(user_, other->user_);
    std::swap(frameworks_home_, other->frameworks_home_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetcherInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetcherInfo_descriptor_;
  metadata.reflection = FetcherInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fetcher
}  // namespace mesos

// @@protoc_insertion_point(global_scope)
