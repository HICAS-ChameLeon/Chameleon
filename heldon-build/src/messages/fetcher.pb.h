// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fetcher.proto

#ifndef PROTOBUF_fetcher_2eproto__INCLUDED
#define PROTOBUF_fetcher_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mesos {
namespace fetcher {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_fetcher_2eproto();
void protobuf_AssignDesc_fetcher_2eproto();
void protobuf_ShutdownFile_fetcher_2eproto();

class URI;
class FetcherInfo;
class FetcherInfo_Item;

enum FetcherInfo_Item_Action {
  FetcherInfo_Item_Action_BYPASS_CACHE = 0,
  FetcherInfo_Item_Action_DOWNLOAD_AND_CACHE = 1,
  FetcherInfo_Item_Action_RETRIEVE_FROM_CACHE = 2
};
bool FetcherInfo_Item_Action_IsValid(int value);
const FetcherInfo_Item_Action FetcherInfo_Item_Action_Action_MIN = FetcherInfo_Item_Action_BYPASS_CACHE;
const FetcherInfo_Item_Action FetcherInfo_Item_Action_Action_MAX = FetcherInfo_Item_Action_RETRIEVE_FROM_CACHE;
const int FetcherInfo_Item_Action_Action_ARRAYSIZE = FetcherInfo_Item_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* FetcherInfo_Item_Action_descriptor();
inline const ::std::string& FetcherInfo_Item_Action_Name(FetcherInfo_Item_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    FetcherInfo_Item_Action_descriptor(), value);
}
inline bool FetcherInfo_Item_Action_Parse(
    const ::std::string& name, FetcherInfo_Item_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FetcherInfo_Item_Action>(
    FetcherInfo_Item_Action_descriptor(), name, value);
}
// ===================================================================

class URI : public ::google::protobuf::Message {
 public:
  URI();
  virtual ~URI();

  URI(const URI& from);

  inline URI& operator=(const URI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const URI& default_instance();

  void Swap(URI* other);

  // implements Message ----------------------------------------------

  URI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const URI& from);
  void MergeFrom(const URI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional bool executable = 2;
  inline bool has_executable() const;
  inline void clear_executable();
  static const int kExecutableFieldNumber = 2;
  inline bool executable() const;
  inline void set_executable(bool value);

  // optional bool extract = 3 [default = true];
  inline bool has_extract() const;
  inline void clear_extract();
  static const int kExtractFieldNumber = 3;
  inline bool extract() const;
  inline void set_extract(bool value);

  // optional bool cache = 4;
  inline bool has_cache() const;
  inline void clear_cache();
  static const int kCacheFieldNumber = 4;
  inline bool cache() const;
  inline void set_cache(bool value);

  // optional string output_file = 5;
  inline bool has_output_file() const;
  inline void clear_output_file();
  static const int kOutputFileFieldNumber = 5;
  inline const ::std::string& output_file() const;
  inline void set_output_file(const ::std::string& value);
  inline void set_output_file(const char* value);
  inline void set_output_file(const char* value, size_t size);
  inline ::std::string* mutable_output_file();
  inline ::std::string* release_output_file();
  inline void set_allocated_output_file(::std::string* output_file);

  // @@protoc_insertion_point(class_scope:mesos.fetcher.URI)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_executable();
  inline void clear_has_executable();
  inline void set_has_extract();
  inline void clear_has_extract();
  inline void set_has_cache();
  inline void clear_has_cache();
  inline void set_has_output_file();
  inline void clear_has_output_file();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* value_;
  ::std::string* output_file_;
  bool executable_;
  bool extract_;
  bool cache_;
  friend void  protobuf_AddDesc_fetcher_2eproto();
  friend void protobuf_AssignDesc_fetcher_2eproto();
  friend void protobuf_ShutdownFile_fetcher_2eproto();

  void InitAsDefaultInstance();
  static URI* default_instance_;
};
// -------------------------------------------------------------------

class FetcherInfo_Item : public ::google::protobuf::Message {
 public:
  FetcherInfo_Item();
  virtual ~FetcherInfo_Item();

  FetcherInfo_Item(const FetcherInfo_Item& from);

  inline FetcherInfo_Item& operator=(const FetcherInfo_Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetcherInfo_Item& default_instance();

  void Swap(FetcherInfo_Item* other);

  // implements Message ----------------------------------------------

  FetcherInfo_Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FetcherInfo_Item& from);
  void MergeFrom(const FetcherInfo_Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FetcherInfo_Item_Action Action;
  static const Action BYPASS_CACHE = FetcherInfo_Item_Action_BYPASS_CACHE;
  static const Action DOWNLOAD_AND_CACHE = FetcherInfo_Item_Action_DOWNLOAD_AND_CACHE;
  static const Action RETRIEVE_FROM_CACHE = FetcherInfo_Item_Action_RETRIEVE_FROM_CACHE;
  static inline bool Action_IsValid(int value) {
    return FetcherInfo_Item_Action_IsValid(value);
  }
  static const Action Action_MIN =
    FetcherInfo_Item_Action_Action_MIN;
  static const Action Action_MAX =
    FetcherInfo_Item_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    FetcherInfo_Item_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return FetcherInfo_Item_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return FetcherInfo_Item_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return FetcherInfo_Item_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .mesos.fetcher.URI uri = 1;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 1;
  inline const ::mesos::fetcher::URI& uri() const;
  inline ::mesos::fetcher::URI* mutable_uri();
  inline ::mesos::fetcher::URI* release_uri();
  inline void set_allocated_uri(::mesos::fetcher::URI* uri);

  // required .mesos.fetcher.FetcherInfo.Item.Action action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline ::mesos::fetcher::FetcherInfo_Item_Action action() const;
  inline void set_action(::mesos::fetcher::FetcherInfo_Item_Action value);

  // optional string cache_filename = 3;
  inline bool has_cache_filename() const;
  inline void clear_cache_filename();
  static const int kCacheFilenameFieldNumber = 3;
  inline const ::std::string& cache_filename() const;
  inline void set_cache_filename(const ::std::string& value);
  inline void set_cache_filename(const char* value);
  inline void set_cache_filename(const char* value, size_t size);
  inline ::std::string* mutable_cache_filename();
  inline ::std::string* release_cache_filename();
  inline void set_allocated_cache_filename(::std::string* cache_filename);

  // @@protoc_insertion_point(class_scope:mesos.fetcher.FetcherInfo.Item)
 private:
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_cache_filename();
  inline void clear_has_cache_filename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::fetcher::URI* uri_;
  ::std::string* cache_filename_;
  int action_;
  friend void  protobuf_AddDesc_fetcher_2eproto();
  friend void protobuf_AssignDesc_fetcher_2eproto();
  friend void protobuf_ShutdownFile_fetcher_2eproto();

  void InitAsDefaultInstance();
  static FetcherInfo_Item* default_instance_;
};
// -------------------------------------------------------------------

class FetcherInfo : public ::google::protobuf::Message {
 public:
  FetcherInfo();
  virtual ~FetcherInfo();

  FetcherInfo(const FetcherInfo& from);

  inline FetcherInfo& operator=(const FetcherInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetcherInfo& default_instance();

  void Swap(FetcherInfo* other);

  // implements Message ----------------------------------------------

  FetcherInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FetcherInfo& from);
  void MergeFrom(const FetcherInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FetcherInfo_Item Item;

  // accessors -------------------------------------------------------

  // required string sandbox_directory = 1;
  inline bool has_sandbox_directory() const;
  inline void clear_sandbox_directory();
  static const int kSandboxDirectoryFieldNumber = 1;
  inline const ::std::string& sandbox_directory() const;
  inline void set_sandbox_directory(const ::std::string& value);
  inline void set_sandbox_directory(const char* value);
  inline void set_sandbox_directory(const char* value, size_t size);
  inline ::std::string* mutable_sandbox_directory();
  inline ::std::string* release_sandbox_directory();
  inline void set_allocated_sandbox_directory(::std::string* sandbox_directory);

  // optional string cache_directory = 2;
  inline bool has_cache_directory() const;
  inline void clear_cache_directory();
  static const int kCacheDirectoryFieldNumber = 2;
  inline const ::std::string& cache_directory() const;
  inline void set_cache_directory(const ::std::string& value);
  inline void set_cache_directory(const char* value);
  inline void set_cache_directory(const char* value, size_t size);
  inline ::std::string* mutable_cache_directory();
  inline ::std::string* release_cache_directory();
  inline void set_allocated_cache_directory(::std::string* cache_directory);

  // repeated .mesos.fetcher.FetcherInfo.Item items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::mesos::fetcher::FetcherInfo_Item& items(int index) const;
  inline ::mesos::fetcher::FetcherInfo_Item* mutable_items(int index);
  inline ::mesos::fetcher::FetcherInfo_Item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::fetcher::FetcherInfo_Item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::fetcher::FetcherInfo_Item >*
      mutable_items();

  // optional string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string frameworks_home = 5;
  inline bool has_frameworks_home() const;
  inline void clear_frameworks_home();
  static const int kFrameworksHomeFieldNumber = 5;
  inline const ::std::string& frameworks_home() const;
  inline void set_frameworks_home(const ::std::string& value);
  inline void set_frameworks_home(const char* value);
  inline void set_frameworks_home(const char* value, size_t size);
  inline ::std::string* mutable_frameworks_home();
  inline ::std::string* release_frameworks_home();
  inline void set_allocated_frameworks_home(::std::string* frameworks_home);

  // @@protoc_insertion_point(class_scope:mesos.fetcher.FetcherInfo)
 private:
  inline void set_has_sandbox_directory();
  inline void clear_has_sandbox_directory();
  inline void set_has_cache_directory();
  inline void clear_has_cache_directory();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_frameworks_home();
  inline void clear_has_frameworks_home();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sandbox_directory_;
  ::std::string* cache_directory_;
  ::google::protobuf::RepeatedPtrField< ::mesos::fetcher::FetcherInfo_Item > items_;
  ::std::string* user_;
  ::std::string* frameworks_home_;
  friend void  protobuf_AddDesc_fetcher_2eproto();
  friend void protobuf_AssignDesc_fetcher_2eproto();
  friend void protobuf_ShutdownFile_fetcher_2eproto();

  void InitAsDefaultInstance();
  static FetcherInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// URI

// required string value = 1;
inline bool URI::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void URI::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void URI::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void URI::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& URI::value() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.URI.value)
  return *value_;
}
inline void URI::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:mesos.fetcher.URI.value)
}
inline void URI::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:mesos.fetcher.URI.value)
}
inline void URI::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mesos.fetcher.URI.value)
}
inline ::std::string* URI::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.URI.value)
  return value_;
}
inline ::std::string* URI::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void URI::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.URI.value)
}

// optional bool executable = 2;
inline bool URI::has_executable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void URI::set_has_executable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void URI::clear_has_executable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void URI::clear_executable() {
  executable_ = false;
  clear_has_executable();
}
inline bool URI::executable() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.URI.executable)
  return executable_;
}
inline void URI::set_executable(bool value) {
  set_has_executable();
  executable_ = value;
  // @@protoc_insertion_point(field_set:mesos.fetcher.URI.executable)
}

// optional bool extract = 3 [default = true];
inline bool URI::has_extract() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void URI::set_has_extract() {
  _has_bits_[0] |= 0x00000004u;
}
inline void URI::clear_has_extract() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void URI::clear_extract() {
  extract_ = true;
  clear_has_extract();
}
inline bool URI::extract() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.URI.extract)
  return extract_;
}
inline void URI::set_extract(bool value) {
  set_has_extract();
  extract_ = value;
  // @@protoc_insertion_point(field_set:mesos.fetcher.URI.extract)
}

// optional bool cache = 4;
inline bool URI::has_cache() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void URI::set_has_cache() {
  _has_bits_[0] |= 0x00000008u;
}
inline void URI::clear_has_cache() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void URI::clear_cache() {
  cache_ = false;
  clear_has_cache();
}
inline bool URI::cache() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.URI.cache)
  return cache_;
}
inline void URI::set_cache(bool value) {
  set_has_cache();
  cache_ = value;
  // @@protoc_insertion_point(field_set:mesos.fetcher.URI.cache)
}

// optional string output_file = 5;
inline bool URI::has_output_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void URI::set_has_output_file() {
  _has_bits_[0] |= 0x00000010u;
}
inline void URI::clear_has_output_file() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void URI::clear_output_file() {
  if (output_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_file_->clear();
  }
  clear_has_output_file();
}
inline const ::std::string& URI::output_file() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.URI.output_file)
  return *output_file_;
}
inline void URI::set_output_file(const ::std::string& value) {
  set_has_output_file();
  if (output_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_file_ = new ::std::string;
  }
  output_file_->assign(value);
  // @@protoc_insertion_point(field_set:mesos.fetcher.URI.output_file)
}
inline void URI::set_output_file(const char* value) {
  set_has_output_file();
  if (output_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_file_ = new ::std::string;
  }
  output_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:mesos.fetcher.URI.output_file)
}
inline void URI::set_output_file(const char* value, size_t size) {
  set_has_output_file();
  if (output_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_file_ = new ::std::string;
  }
  output_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mesos.fetcher.URI.output_file)
}
inline ::std::string* URI::mutable_output_file() {
  set_has_output_file();
  if (output_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.URI.output_file)
  return output_file_;
}
inline ::std::string* URI::release_output_file() {
  clear_has_output_file();
  if (output_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = output_file_;
    output_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void URI::set_allocated_output_file(::std::string* output_file) {
  if (output_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete output_file_;
  }
  if (output_file) {
    set_has_output_file();
    output_file_ = output_file;
  } else {
    clear_has_output_file();
    output_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.URI.output_file)
}

// -------------------------------------------------------------------

// FetcherInfo_Item

// required .mesos.fetcher.URI uri = 1;
inline bool FetcherInfo_Item::has_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetcherInfo_Item::set_has_uri() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetcherInfo_Item::clear_has_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetcherInfo_Item::clear_uri() {
  if (uri_ != NULL) uri_->::mesos::fetcher::URI::Clear();
  clear_has_uri();
}
inline const ::mesos::fetcher::URI& FetcherInfo_Item::uri() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.Item.uri)
  return uri_ != NULL ? *uri_ : *default_instance_->uri_;
}
inline ::mesos::fetcher::URI* FetcherInfo_Item::mutable_uri() {
  set_has_uri();
  if (uri_ == NULL) uri_ = new ::mesos::fetcher::URI;
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.Item.uri)
  return uri_;
}
inline ::mesos::fetcher::URI* FetcherInfo_Item::release_uri() {
  clear_has_uri();
  ::mesos::fetcher::URI* temp = uri_;
  uri_ = NULL;
  return temp;
}
inline void FetcherInfo_Item::set_allocated_uri(::mesos::fetcher::URI* uri) {
  delete uri_;
  uri_ = uri;
  if (uri) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.FetcherInfo.Item.uri)
}

// required .mesos.fetcher.FetcherInfo.Item.Action action = 2;
inline bool FetcherInfo_Item::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetcherInfo_Item::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetcherInfo_Item::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetcherInfo_Item::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::mesos::fetcher::FetcherInfo_Item_Action FetcherInfo_Item::action() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.Item.action)
  return static_cast< ::mesos::fetcher::FetcherInfo_Item_Action >(action_);
}
inline void FetcherInfo_Item::set_action(::mesos::fetcher::FetcherInfo_Item_Action value) {
  assert(::mesos::fetcher::FetcherInfo_Item_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:mesos.fetcher.FetcherInfo.Item.action)
}

// optional string cache_filename = 3;
inline bool FetcherInfo_Item::has_cache_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FetcherInfo_Item::set_has_cache_filename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FetcherInfo_Item::clear_has_cache_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FetcherInfo_Item::clear_cache_filename() {
  if (cache_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cache_filename_->clear();
  }
  clear_has_cache_filename();
}
inline const ::std::string& FetcherInfo_Item::cache_filename() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.Item.cache_filename)
  return *cache_filename_;
}
inline void FetcherInfo_Item::set_cache_filename(const ::std::string& value) {
  set_has_cache_filename();
  if (cache_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cache_filename_ = new ::std::string;
  }
  cache_filename_->assign(value);
  // @@protoc_insertion_point(field_set:mesos.fetcher.FetcherInfo.Item.cache_filename)
}
inline void FetcherInfo_Item::set_cache_filename(const char* value) {
  set_has_cache_filename();
  if (cache_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cache_filename_ = new ::std::string;
  }
  cache_filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:mesos.fetcher.FetcherInfo.Item.cache_filename)
}
inline void FetcherInfo_Item::set_cache_filename(const char* value, size_t size) {
  set_has_cache_filename();
  if (cache_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cache_filename_ = new ::std::string;
  }
  cache_filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mesos.fetcher.FetcherInfo.Item.cache_filename)
}
inline ::std::string* FetcherInfo_Item::mutable_cache_filename() {
  set_has_cache_filename();
  if (cache_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cache_filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.Item.cache_filename)
  return cache_filename_;
}
inline ::std::string* FetcherInfo_Item::release_cache_filename() {
  clear_has_cache_filename();
  if (cache_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cache_filename_;
    cache_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FetcherInfo_Item::set_allocated_cache_filename(::std::string* cache_filename) {
  if (cache_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cache_filename_;
  }
  if (cache_filename) {
    set_has_cache_filename();
    cache_filename_ = cache_filename;
  } else {
    clear_has_cache_filename();
    cache_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.FetcherInfo.Item.cache_filename)
}

// -------------------------------------------------------------------

// FetcherInfo

// required string sandbox_directory = 1;
inline bool FetcherInfo::has_sandbox_directory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetcherInfo::set_has_sandbox_directory() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetcherInfo::clear_has_sandbox_directory() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetcherInfo::clear_sandbox_directory() {
  if (sandbox_directory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sandbox_directory_->clear();
  }
  clear_has_sandbox_directory();
}
inline const ::std::string& FetcherInfo::sandbox_directory() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.sandbox_directory)
  return *sandbox_directory_;
}
inline void FetcherInfo::set_sandbox_directory(const ::std::string& value) {
  set_has_sandbox_directory();
  if (sandbox_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sandbox_directory_ = new ::std::string;
  }
  sandbox_directory_->assign(value);
  // @@protoc_insertion_point(field_set:mesos.fetcher.FetcherInfo.sandbox_directory)
}
inline void FetcherInfo::set_sandbox_directory(const char* value) {
  set_has_sandbox_directory();
  if (sandbox_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sandbox_directory_ = new ::std::string;
  }
  sandbox_directory_->assign(value);
  // @@protoc_insertion_point(field_set_char:mesos.fetcher.FetcherInfo.sandbox_directory)
}
inline void FetcherInfo::set_sandbox_directory(const char* value, size_t size) {
  set_has_sandbox_directory();
  if (sandbox_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sandbox_directory_ = new ::std::string;
  }
  sandbox_directory_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mesos.fetcher.FetcherInfo.sandbox_directory)
}
inline ::std::string* FetcherInfo::mutable_sandbox_directory() {
  set_has_sandbox_directory();
  if (sandbox_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sandbox_directory_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.sandbox_directory)
  return sandbox_directory_;
}
inline ::std::string* FetcherInfo::release_sandbox_directory() {
  clear_has_sandbox_directory();
  if (sandbox_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sandbox_directory_;
    sandbox_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FetcherInfo::set_allocated_sandbox_directory(::std::string* sandbox_directory) {
  if (sandbox_directory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sandbox_directory_;
  }
  if (sandbox_directory) {
    set_has_sandbox_directory();
    sandbox_directory_ = sandbox_directory;
  } else {
    clear_has_sandbox_directory();
    sandbox_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.FetcherInfo.sandbox_directory)
}

// optional string cache_directory = 2;
inline bool FetcherInfo::has_cache_directory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetcherInfo::set_has_cache_directory() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetcherInfo::clear_has_cache_directory() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetcherInfo::clear_cache_directory() {
  if (cache_directory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cache_directory_->clear();
  }
  clear_has_cache_directory();
}
inline const ::std::string& FetcherInfo::cache_directory() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.cache_directory)
  return *cache_directory_;
}
inline void FetcherInfo::set_cache_directory(const ::std::string& value) {
  set_has_cache_directory();
  if (cache_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cache_directory_ = new ::std::string;
  }
  cache_directory_->assign(value);
  // @@protoc_insertion_point(field_set:mesos.fetcher.FetcherInfo.cache_directory)
}
inline void FetcherInfo::set_cache_directory(const char* value) {
  set_has_cache_directory();
  if (cache_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cache_directory_ = new ::std::string;
  }
  cache_directory_->assign(value);
  // @@protoc_insertion_point(field_set_char:mesos.fetcher.FetcherInfo.cache_directory)
}
inline void FetcherInfo::set_cache_directory(const char* value, size_t size) {
  set_has_cache_directory();
  if (cache_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cache_directory_ = new ::std::string;
  }
  cache_directory_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mesos.fetcher.FetcherInfo.cache_directory)
}
inline ::std::string* FetcherInfo::mutable_cache_directory() {
  set_has_cache_directory();
  if (cache_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cache_directory_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.cache_directory)
  return cache_directory_;
}
inline ::std::string* FetcherInfo::release_cache_directory() {
  clear_has_cache_directory();
  if (cache_directory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cache_directory_;
    cache_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FetcherInfo::set_allocated_cache_directory(::std::string* cache_directory) {
  if (cache_directory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cache_directory_;
  }
  if (cache_directory) {
    set_has_cache_directory();
    cache_directory_ = cache_directory;
  } else {
    clear_has_cache_directory();
    cache_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.FetcherInfo.cache_directory)
}

// repeated .mesos.fetcher.FetcherInfo.Item items = 3;
inline int FetcherInfo::items_size() const {
  return items_.size();
}
inline void FetcherInfo::clear_items() {
  items_.Clear();
}
inline const ::mesos::fetcher::FetcherInfo_Item& FetcherInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.items)
  return items_.Get(index);
}
inline ::mesos::fetcher::FetcherInfo_Item* FetcherInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.items)
  return items_.Mutable(index);
}
inline ::mesos::fetcher::FetcherInfo_Item* FetcherInfo::add_items() {
  // @@protoc_insertion_point(field_add:mesos.fetcher.FetcherInfo.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::fetcher::FetcherInfo_Item >&
FetcherInfo::items() const {
  // @@protoc_insertion_point(field_list:mesos.fetcher.FetcherInfo.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::fetcher::FetcherInfo_Item >*
FetcherInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:mesos.fetcher.FetcherInfo.items)
  return &items_;
}

// optional string user = 4;
inline bool FetcherInfo::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FetcherInfo::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FetcherInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FetcherInfo::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& FetcherInfo::user() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.user)
  return *user_;
}
inline void FetcherInfo::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:mesos.fetcher.FetcherInfo.user)
}
inline void FetcherInfo::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:mesos.fetcher.FetcherInfo.user)
}
inline void FetcherInfo::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mesos.fetcher.FetcherInfo.user)
}
inline ::std::string* FetcherInfo::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.user)
  return user_;
}
inline ::std::string* FetcherInfo::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FetcherInfo::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.FetcherInfo.user)
}

// optional string frameworks_home = 5;
inline bool FetcherInfo::has_frameworks_home() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FetcherInfo::set_has_frameworks_home() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FetcherInfo::clear_has_frameworks_home() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FetcherInfo::clear_frameworks_home() {
  if (frameworks_home_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frameworks_home_->clear();
  }
  clear_has_frameworks_home();
}
inline const ::std::string& FetcherInfo::frameworks_home() const {
  // @@protoc_insertion_point(field_get:mesos.fetcher.FetcherInfo.frameworks_home)
  return *frameworks_home_;
}
inline void FetcherInfo::set_frameworks_home(const ::std::string& value) {
  set_has_frameworks_home();
  if (frameworks_home_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frameworks_home_ = new ::std::string;
  }
  frameworks_home_->assign(value);
  // @@protoc_insertion_point(field_set:mesos.fetcher.FetcherInfo.frameworks_home)
}
inline void FetcherInfo::set_frameworks_home(const char* value) {
  set_has_frameworks_home();
  if (frameworks_home_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frameworks_home_ = new ::std::string;
  }
  frameworks_home_->assign(value);
  // @@protoc_insertion_point(field_set_char:mesos.fetcher.FetcherInfo.frameworks_home)
}
inline void FetcherInfo::set_frameworks_home(const char* value, size_t size) {
  set_has_frameworks_home();
  if (frameworks_home_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frameworks_home_ = new ::std::string;
  }
  frameworks_home_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mesos.fetcher.FetcherInfo.frameworks_home)
}
inline ::std::string* FetcherInfo::mutable_frameworks_home() {
  set_has_frameworks_home();
  if (frameworks_home_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frameworks_home_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mesos.fetcher.FetcherInfo.frameworks_home)
  return frameworks_home_;
}
inline ::std::string* FetcherInfo::release_frameworks_home() {
  clear_has_frameworks_home();
  if (frameworks_home_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = frameworks_home_;
    frameworks_home_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FetcherInfo::set_allocated_frameworks_home(::std::string* frameworks_home) {
  if (frameworks_home_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frameworks_home_;
  }
  if (frameworks_home) {
    set_has_frameworks_home();
    frameworks_home_ = frameworks_home;
  } else {
    clear_has_frameworks_home();
    frameworks_home_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.fetcher.FetcherInfo.frameworks_home)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fetcher
}  // namespace mesos

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mesos::fetcher::FetcherInfo_Item_Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::fetcher::FetcherInfo_Item_Action>() {
  return ::mesos::fetcher::FetcherInfo_Item_Action_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fetcher_2eproto__INCLUDED
