// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hardware_resource.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hardware_resource.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* HardwareResourcesMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HardwareResourcesMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPUCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPUCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPUInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPUInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLBCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLBCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemoryCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPUCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPUCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPUInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPUInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiskCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiskCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiskInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DiskInfo_DiskType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PortCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PortCollection_reflection_ = NULL;
const ::google::protobuf::Descriptor* PortInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PortInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hardware_5fresource_2eproto() {
  protobuf_AddDesc_hardware_5fresource_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hardware_resource.proto");
  GOOGLE_CHECK(file != NULL);
  HardwareResourcesMessage_descriptor_ = file->message_type(0);
  static const int HardwareResourcesMessage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareResourcesMessage, slave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareResourcesMessage, slave_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareResourcesMessage, slave_hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareResourcesMessage, cpu_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareResourcesMessage, mem_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareResourcesMessage, gpu_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareResourcesMessage, disk_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareResourcesMessage, port_collection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareResourcesMessage, tlb_collection_),
  };
  HardwareResourcesMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HardwareResourcesMessage_descriptor_,
      HardwareResourcesMessage::default_instance_,
      HardwareResourcesMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareResourcesMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HardwareResourcesMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HardwareResourcesMessage));
  CPUCollection_descriptor_ = file->message_type(1);
  static const int CPUCollection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUCollection, cpu_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUCollection, cpu_quantity_),
  };
  CPUCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPUCollection_descriptor_,
      CPUCollection::default_instance_,
      CPUCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPUCollection));
  CPUInfo_descriptor_ = file->message_type(2);
  static const int CPUInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, cpuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, coreid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, physicalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, cpucores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, modelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, cpumhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, cpumaxmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, cpuminmhz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, l1dcache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, l1icache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, l2cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, l3cache_),
  };
  CPUInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPUInfo_descriptor_,
      CPUInfo::default_instance_,
      CPUInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPUInfo));
  TLBCollection_descriptor_ = file->message_type(3);
  static const int TLBCollection_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLBCollection, tlb_infos_),
  };
  TLBCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLBCollection_descriptor_,
      TLBCollection::default_instance_,
      TLBCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLBCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLBCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLBCollection));
  TLBInfo_descriptor_ = file->message_type(4);
  static const int TLBInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLBInfo, l1_data_tlb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLBInfo, l1_instruction_tlb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLBInfo, l2_tlb_),
  };
  TLBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLBInfo_descriptor_,
      TLBInfo::default_instance_,
      TLBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLBInfo));
  MemoryCollection_descriptor_ = file->message_type(5);
  static const int MemoryCollection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryCollection, max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryCollection, device_quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryCollection, mem_infos_),
  };
  MemoryCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemoryCollection_descriptor_,
      MemoryCollection::default_instance_,
      MemoryCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemoryCollection));
  MemInfo_descriptor_ = file->message_type(6);
  static const int MemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, speed_),
  };
  MemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemInfo_descriptor_,
      MemInfo::default_instance_,
      MemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemInfo));
  GPUCollection_descriptor_ = file->message_type(7);
  static const int GPUCollection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUCollection, gpu_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUCollection, gpu_quantity_),
  };
  GPUCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPUCollection_descriptor_,
      GPUCollection::default_instance_,
      GPUCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPUCollection));
  GPUInfo_descriptor_ = file->message_type(8);
  static const int GPUInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, vendor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, physical_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, bus_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, clock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, capabilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, resources_),
  };
  GPUInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPUInfo_descriptor_,
      GPUInfo::default_instance_,
      GPUInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPUInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPUInfo));
  DiskCollection_descriptor_ = file->message_type(9);
  static const int DiskCollection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskCollection, disk_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskCollection, disk_quantity_),
  };
  DiskCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiskCollection_descriptor_,
      DiskCollection::default_instance_,
      DiskCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiskCollection));
  DiskInfo_descriptor_ = file->message_type(10);
  static const int DiskInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskInfo, disk_speed_),
  };
  DiskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiskInfo_descriptor_,
      DiskInfo::default_instance_,
      DiskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiskInfo));
  DiskInfo_DiskType_descriptor_ = DiskInfo_descriptor_->enum_type(0);
  PortCollection_descriptor_ = file->message_type(11);
  static const int PortCollection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortCollection, port_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortCollection, port_quantity_),
  };
  PortCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PortCollection_descriptor_,
      PortCollection::default_instance_,
      PortCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PortCollection));
  PortInfo_descriptor_ = file->message_type(12);
  static const int PortInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortInfo, firstport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortInfo, lastport_),
  };
  PortInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PortInfo_descriptor_,
      PortInfo::default_instance_,
      PortInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PortInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hardware_5fresource_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HardwareResourcesMessage_descriptor_, &HardwareResourcesMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPUCollection_descriptor_, &CPUCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPUInfo_descriptor_, &CPUInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLBCollection_descriptor_, &TLBCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLBInfo_descriptor_, &TLBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemoryCollection_descriptor_, &MemoryCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemInfo_descriptor_, &MemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPUCollection_descriptor_, &GPUCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPUInfo_descriptor_, &GPUInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiskCollection_descriptor_, &DiskCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiskInfo_descriptor_, &DiskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PortCollection_descriptor_, &PortCollection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PortInfo_descriptor_, &PortInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hardware_5fresource_2eproto() {
  delete HardwareResourcesMessage::default_instance_;
  delete HardwareResourcesMessage_reflection_;
  delete CPUCollection::default_instance_;
  delete CPUCollection_reflection_;
  delete CPUInfo::default_instance_;
  delete CPUInfo_reflection_;
  delete TLBCollection::default_instance_;
  delete TLBCollection_reflection_;
  delete TLBInfo::default_instance_;
  delete TLBInfo_reflection_;
  delete MemoryCollection::default_instance_;
  delete MemoryCollection_reflection_;
  delete MemInfo::default_instance_;
  delete MemInfo_reflection_;
  delete GPUCollection::default_instance_;
  delete GPUCollection_reflection_;
  delete GPUInfo::default_instance_;
  delete GPUInfo_reflection_;
  delete DiskCollection::default_instance_;
  delete DiskCollection_reflection_;
  delete DiskInfo::default_instance_;
  delete DiskInfo_reflection_;
  delete PortCollection::default_instance_;
  delete PortCollection_reflection_;
  delete PortInfo::default_instance_;
  delete PortInfo_reflection_;
}

void protobuf_AddDesc_hardware_5fresource_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027hardware_resource.proto\"\317\002\n\030HardwareRe"
    "sourcesMessage\022\020\n\010slave_id\030\001 \002(\t\022\022\n\nslav"
    "e_uuid\030\010 \002(\t\022\026\n\016slave_hostname\030\t \002(\t\022&\n\016"
    "cpu_collection\030\002 \002(\0132\016.CPUCollection\022)\n\016"
    "mem_collection\030\003 \002(\0132\021.MemoryCollection\022"
    "&\n\016gpu_collection\030\004 \002(\0132\016.GPUCollection\022"
    "(\n\017disk_collection\030\005 \002(\0132\017.DiskCollectio"
    "n\022(\n\017port_collection\030\006 \002(\0132\017.PortCollect"
    "ion\022&\n\016tlb_collection\030\007 \002(\0132\016.TLBCollect"
    "ion\"B\n\rCPUCollection\022\033\n\tcpu_infos\030\001 \003(\0132"
    "\010.CPUInfo\022\024\n\014cpu_quantity\030\002 \002(\005\"\335\001\n\007CPUI"
    "nfo\022\r\n\005cpuID\030\001 \002(\005\022\016\n\006coreID\030\002 \001(\005\022\022\n\nph"
    "ysicalID\030\003 \001(\005\022\020\n\010cpucores\030\004 \001(\005\022\021\n\tmode"
    "lname\030\005 \001(\t\022\016\n\006cpuMHz\030\006 \001(\001\022\021\n\tcpumaxMhz"
    "\030\007 \001(\001\022\021\n\tcpuminMHz\030\010 \001(\001\022\020\n\010l1dcache\030\t "
    "\001(\t\022\020\n\010l1icache\030\n \001(\t\022\017\n\007l2cache\030\013 \001(\t\022\017"
    "\n\007l3cache\030\014 \001(\t\",\n\rTLBCollection\022\033\n\ttlb_"
    "infos\030\001 \003(\0132\010.TLBInfo\"J\n\007TLBInfo\022\023\n\013l1_d"
    "ata_tlb\030\001 \003(\t\022\032\n\022l1_instruction_tlb\030\002 \003("
    "\t\022\016\n\006l2_tlb\030\003 \001(\t\"Z\n\020MemoryCollection\022\020\n"
    "\010max_size\030\001 \002(\t\022\027\n\017device_quantity\030\002 \002(\005"
    "\022\033\n\tmem_infos\030\003 \003(\0132\010.MemInfo\"4\n\007MemInfo"
    "\022\014\n\004size\030\001 \002(\t\022\014\n\004type\030\002 \002(\t\022\r\n\005speed\030\003 "
    "\002(\t\"B\n\rGPUCollection\022\033\n\tgpu_infos\030\001 \003(\0132"
    "\010.GPUInfo\022\024\n\014gpu_quantity\030\002 \002(\005\"\325\001\n\007GPUI"
    "nfo\022\023\n\013description\030\002 \002(\t\022\017\n\007product\030\003 \002("
    "\t\022\016\n\006vendor\030\004 \002(\t\022\023\n\013physical_id\030\005 \001(\005\022\020"
    "\n\010bus_info\030\006 \001(\t\022\017\n\007version\030\007 \001(\t\022\r\n\005wid"
    "th\030\010 \001(\005\022\r\n\005clock\030\t \001(\005\022\024\n\014capabilities\030"
    "\n \001(\t\022\025\n\rconfiguration\030\013 \001(\t\022\021\n\tresource"
    "s\030\014 \001(\t\"F\n\016DiskCollection\022\035\n\ndisk_infos\030"
    "\001 \003(\0132\t.DiskInfo\022\025\n\rdisk_quantity\030\002 \002(\005\""
    "z\n\010DiskInfo\022\014\n\004name\030\001 \002(\t\022\014\n\004size\030\002 \002(\t\022"
    " \n\004type\030\003 \002(\0162\022.DiskInfo.DiskType\022\022\n\ndis"
    "k_speed\030\004 \002(\t\"\034\n\010DiskType\022\007\n\003SSD\020\000\022\007\n\003HD"
    "D\020\001\"F\n\016PortCollection\022\035\n\nport_infos\030\001 \003("
    "\0132\t.PortInfo\022\025\n\rport_quantity\030\002 \002(\005\"/\n\010P"
    "ortInfo\022\021\n\tfirstport\030\001 \001(\t\022\020\n\010lastport\030\002"
    " \001(\t", 1524);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hardware_resource.proto", &protobuf_RegisterTypes);
  HardwareResourcesMessage::default_instance_ = new HardwareResourcesMessage();
  CPUCollection::default_instance_ = new CPUCollection();
  CPUInfo::default_instance_ = new CPUInfo();
  TLBCollection::default_instance_ = new TLBCollection();
  TLBInfo::default_instance_ = new TLBInfo();
  MemoryCollection::default_instance_ = new MemoryCollection();
  MemInfo::default_instance_ = new MemInfo();
  GPUCollection::default_instance_ = new GPUCollection();
  GPUInfo::default_instance_ = new GPUInfo();
  DiskCollection::default_instance_ = new DiskCollection();
  DiskInfo::default_instance_ = new DiskInfo();
  PortCollection::default_instance_ = new PortCollection();
  PortInfo::default_instance_ = new PortInfo();
  HardwareResourcesMessage::default_instance_->InitAsDefaultInstance();
  CPUCollection::default_instance_->InitAsDefaultInstance();
  CPUInfo::default_instance_->InitAsDefaultInstance();
  TLBCollection::default_instance_->InitAsDefaultInstance();
  TLBInfo::default_instance_->InitAsDefaultInstance();
  MemoryCollection::default_instance_->InitAsDefaultInstance();
  MemInfo::default_instance_->InitAsDefaultInstance();
  GPUCollection::default_instance_->InitAsDefaultInstance();
  GPUInfo::default_instance_->InitAsDefaultInstance();
  DiskCollection::default_instance_->InitAsDefaultInstance();
  DiskInfo::default_instance_->InitAsDefaultInstance();
  PortCollection::default_instance_->InitAsDefaultInstance();
  PortInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hardware_5fresource_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hardware_5fresource_2eproto {
  StaticDescriptorInitializer_hardware_5fresource_2eproto() {
    protobuf_AddDesc_hardware_5fresource_2eproto();
  }
} static_descriptor_initializer_hardware_5fresource_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HardwareResourcesMessage::kSlaveIdFieldNumber;
const int HardwareResourcesMessage::kSlaveUuidFieldNumber;
const int HardwareResourcesMessage::kSlaveHostnameFieldNumber;
const int HardwareResourcesMessage::kCpuCollectionFieldNumber;
const int HardwareResourcesMessage::kMemCollectionFieldNumber;
const int HardwareResourcesMessage::kGpuCollectionFieldNumber;
const int HardwareResourcesMessage::kDiskCollectionFieldNumber;
const int HardwareResourcesMessage::kPortCollectionFieldNumber;
const int HardwareResourcesMessage::kTlbCollectionFieldNumber;
#endif  // !_MSC_VER

HardwareResourcesMessage::HardwareResourcesMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HardwareResourcesMessage)
}

void HardwareResourcesMessage::InitAsDefaultInstance() {
  cpu_collection_ = const_cast< ::CPUCollection*>(&::CPUCollection::default_instance());
  mem_collection_ = const_cast< ::MemoryCollection*>(&::MemoryCollection::default_instance());
  gpu_collection_ = const_cast< ::GPUCollection*>(&::GPUCollection::default_instance());
  disk_collection_ = const_cast< ::DiskCollection*>(&::DiskCollection::default_instance());
  port_collection_ = const_cast< ::PortCollection*>(&::PortCollection::default_instance());
  tlb_collection_ = const_cast< ::TLBCollection*>(&::TLBCollection::default_instance());
}

HardwareResourcesMessage::HardwareResourcesMessage(const HardwareResourcesMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HardwareResourcesMessage)
}

void HardwareResourcesMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  slave_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slave_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slave_hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpu_collection_ = NULL;
  mem_collection_ = NULL;
  gpu_collection_ = NULL;
  disk_collection_ = NULL;
  port_collection_ = NULL;
  tlb_collection_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HardwareResourcesMessage::~HardwareResourcesMessage() {
  // @@protoc_insertion_point(destructor:HardwareResourcesMessage)
  SharedDtor();
}

void HardwareResourcesMessage::SharedDtor() {
  if (slave_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slave_id_;
  }
  if (slave_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slave_uuid_;
  }
  if (slave_hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slave_hostname_;
  }
  if (this != default_instance_) {
    delete cpu_collection_;
    delete mem_collection_;
    delete gpu_collection_;
    delete disk_collection_;
    delete port_collection_;
    delete tlb_collection_;
  }
}

void HardwareResourcesMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HardwareResourcesMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HardwareResourcesMessage_descriptor_;
}

const HardwareResourcesMessage& HardwareResourcesMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fresource_2eproto();
  return *default_instance_;
}

HardwareResourcesMessage* HardwareResourcesMessage::default_instance_ = NULL;

HardwareResourcesMessage* HardwareResourcesMessage::New() const {
  return new HardwareResourcesMessage;
}

void HardwareResourcesMessage::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_slave_id()) {
      if (slave_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        slave_id_->clear();
      }
    }
    if (has_slave_uuid()) {
      if (slave_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        slave_uuid_->clear();
      }
    }
    if (has_slave_hostname()) {
      if (slave_hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        slave_hostname_->clear();
      }
    }
    if (has_cpu_collection()) {
      if (cpu_collection_ != NULL) cpu_collection_->::CPUCollection::Clear();
    }
    if (has_mem_collection()) {
      if (mem_collection_ != NULL) mem_collection_->::MemoryCollection::Clear();
    }
    if (has_gpu_collection()) {
      if (gpu_collection_ != NULL) gpu_collection_->::GPUCollection::Clear();
    }
    if (has_disk_collection()) {
      if (disk_collection_ != NULL) disk_collection_->::DiskCollection::Clear();
    }
    if (has_port_collection()) {
      if (port_collection_ != NULL) port_collection_->::PortCollection::Clear();
    }
  }
  if (has_tlb_collection()) {
    if (tlb_collection_ != NULL) tlb_collection_->::TLBCollection::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HardwareResourcesMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HardwareResourcesMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string slave_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slave_id().data(), this->slave_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "slave_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cpu_collection;
        break;
      }

      // required .CPUCollection cpu_collection = 2;
      case 2: {
        if (tag == 18) {
         parse_cpu_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cpu_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mem_collection;
        break;
      }

      // required .MemoryCollection mem_collection = 3;
      case 3: {
        if (tag == 26) {
         parse_mem_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mem_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gpu_collection;
        break;
      }

      // required .GPUCollection gpu_collection = 4;
      case 4: {
        if (tag == 34) {
         parse_gpu_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpu_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_disk_collection;
        break;
      }

      // required .DiskCollection disk_collection = 5;
      case 5: {
        if (tag == 42) {
         parse_disk_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disk_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_port_collection;
        break;
      }

      // required .PortCollection port_collection = 6;
      case 6: {
        if (tag == 50) {
         parse_port_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_port_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tlb_collection;
        break;
      }

      // required .TLBCollection tlb_collection = 7;
      case 7: {
        if (tag == 58) {
         parse_tlb_collection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tlb_collection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_slave_uuid;
        break;
      }

      // required string slave_uuid = 8;
      case 8: {
        if (tag == 66) {
         parse_slave_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slave_uuid().data(), this->slave_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "slave_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_slave_hostname;
        break;
      }

      // required string slave_hostname = 9;
      case 9: {
        if (tag == 74) {
         parse_slave_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slave_hostname().data(), this->slave_hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "slave_hostname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HardwareResourcesMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HardwareResourcesMessage)
  return false;
#undef DO_
}

void HardwareResourcesMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HardwareResourcesMessage)
  // required string slave_id = 1;
  if (has_slave_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_id().data(), this->slave_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slave_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->slave_id(), output);
  }

  // required .CPUCollection cpu_collection = 2;
  if (has_cpu_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cpu_collection(), output);
  }

  // required .MemoryCollection mem_collection = 3;
  if (has_mem_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mem_collection(), output);
  }

  // required .GPUCollection gpu_collection = 4;
  if (has_gpu_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gpu_collection(), output);
  }

  // required .DiskCollection disk_collection = 5;
  if (has_disk_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->disk_collection(), output);
  }

  // required .PortCollection port_collection = 6;
  if (has_port_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->port_collection(), output);
  }

  // required .TLBCollection tlb_collection = 7;
  if (has_tlb_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tlb_collection(), output);
  }

  // required string slave_uuid = 8;
  if (has_slave_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_uuid().data(), this->slave_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slave_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->slave_uuid(), output);
  }

  // required string slave_hostname = 9;
  if (has_slave_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_hostname().data(), this->slave_hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slave_hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->slave_hostname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HardwareResourcesMessage)
}

::google::protobuf::uint8* HardwareResourcesMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HardwareResourcesMessage)
  // required string slave_id = 1;
  if (has_slave_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_id().data(), this->slave_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slave_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->slave_id(), target);
  }

  // required .CPUCollection cpu_collection = 2;
  if (has_cpu_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cpu_collection(), target);
  }

  // required .MemoryCollection mem_collection = 3;
  if (has_mem_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mem_collection(), target);
  }

  // required .GPUCollection gpu_collection = 4;
  if (has_gpu_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gpu_collection(), target);
  }

  // required .DiskCollection disk_collection = 5;
  if (has_disk_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->disk_collection(), target);
  }

  // required .PortCollection port_collection = 6;
  if (has_port_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->port_collection(), target);
  }

  // required .TLBCollection tlb_collection = 7;
  if (has_tlb_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tlb_collection(), target);
  }

  // required string slave_uuid = 8;
  if (has_slave_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_uuid().data(), this->slave_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slave_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->slave_uuid(), target);
  }

  // required string slave_hostname = 9;
  if (has_slave_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_hostname().data(), this->slave_hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slave_hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->slave_hostname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HardwareResourcesMessage)
  return target;
}

int HardwareResourcesMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string slave_id = 1;
    if (has_slave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slave_id());
    }

    // required string slave_uuid = 8;
    if (has_slave_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slave_uuid());
    }

    // required string slave_hostname = 9;
    if (has_slave_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slave_hostname());
    }

    // required .CPUCollection cpu_collection = 2;
    if (has_cpu_collection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cpu_collection());
    }

    // required .MemoryCollection mem_collection = 3;
    if (has_mem_collection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mem_collection());
    }

    // required .GPUCollection gpu_collection = 4;
    if (has_gpu_collection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gpu_collection());
    }

    // required .DiskCollection disk_collection = 5;
    if (has_disk_collection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disk_collection());
    }

    // required .PortCollection port_collection = 6;
    if (has_port_collection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->port_collection());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .TLBCollection tlb_collection = 7;
    if (has_tlb_collection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tlb_collection());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HardwareResourcesMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HardwareResourcesMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HardwareResourcesMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HardwareResourcesMessage::MergeFrom(const HardwareResourcesMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slave_id()) {
      set_slave_id(from.slave_id());
    }
    if (from.has_slave_uuid()) {
      set_slave_uuid(from.slave_uuid());
    }
    if (from.has_slave_hostname()) {
      set_slave_hostname(from.slave_hostname());
    }
    if (from.has_cpu_collection()) {
      mutable_cpu_collection()->::CPUCollection::MergeFrom(from.cpu_collection());
    }
    if (from.has_mem_collection()) {
      mutable_mem_collection()->::MemoryCollection::MergeFrom(from.mem_collection());
    }
    if (from.has_gpu_collection()) {
      mutable_gpu_collection()->::GPUCollection::MergeFrom(from.gpu_collection());
    }
    if (from.has_disk_collection()) {
      mutable_disk_collection()->::DiskCollection::MergeFrom(from.disk_collection());
    }
    if (from.has_port_collection()) {
      mutable_port_collection()->::PortCollection::MergeFrom(from.port_collection());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tlb_collection()) {
      mutable_tlb_collection()->::TLBCollection::MergeFrom(from.tlb_collection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HardwareResourcesMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardwareResourcesMessage::CopyFrom(const HardwareResourcesMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardwareResourcesMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_cpu_collection()) {
    if (!this->cpu_collection().IsInitialized()) return false;
  }
  if (has_mem_collection()) {
    if (!this->mem_collection().IsInitialized()) return false;
  }
  if (has_gpu_collection()) {
    if (!this->gpu_collection().IsInitialized()) return false;
  }
  if (has_disk_collection()) {
    if (!this->disk_collection().IsInitialized()) return false;
  }
  if (has_port_collection()) {
    if (!this->port_collection().IsInitialized()) return false;
  }
  return true;
}

void HardwareResourcesMessage::Swap(HardwareResourcesMessage* other) {
  if (other != this) {
    std::swap(slave_id_, other->slave_id_);
    std::swap(slave_uuid_, other->slave_uuid_);
    std::swap(slave_hostname_, other->slave_hostname_);
    std::swap(cpu_collection_, other->cpu_collection_);
    std::swap(mem_collection_, other->mem_collection_);
    std::swap(gpu_collection_, other->gpu_collection_);
    std::swap(disk_collection_, other->disk_collection_);
    std::swap(port_collection_, other->port_collection_);
    std::swap(tlb_collection_, other->tlb_collection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HardwareResourcesMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HardwareResourcesMessage_descriptor_;
  metadata.reflection = HardwareResourcesMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPUCollection::kCpuInfosFieldNumber;
const int CPUCollection::kCpuQuantityFieldNumber;
#endif  // !_MSC_VER

CPUCollection::CPUCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPUCollection)
}

void CPUCollection::InitAsDefaultInstance() {
}

CPUCollection::CPUCollection(const CPUCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPUCollection)
}

void CPUCollection::SharedCtor() {
  _cached_size_ = 0;
  cpu_quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPUCollection::~CPUCollection() {
  // @@protoc_insertion_point(destructor:CPUCollection)
  SharedDtor();
}

void CPUCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPUCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPUCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPUCollection_descriptor_;
}

const CPUCollection& CPUCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fresource_2eproto();
  return *default_instance_;
}

CPUCollection* CPUCollection::default_instance_ = NULL;

CPUCollection* CPUCollection::New() const {
  return new CPUCollection;
}

void CPUCollection::Clear() {
  cpu_quantity_ = 0;
  cpu_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPUCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPUCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CPUInfo cpu_infos = 1;
      case 1: {
        if (tag == 10) {
         parse_cpu_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cpu_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cpu_infos;
        if (input->ExpectTag(16)) goto parse_cpu_quantity;
        break;
      }

      // required int32 cpu_quantity = 2;
      case 2: {
        if (tag == 16) {
         parse_cpu_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpu_quantity_)));
          set_has_cpu_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPUCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPUCollection)
  return false;
#undef DO_
}

void CPUCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPUCollection)
  // repeated .CPUInfo cpu_infos = 1;
  for (int i = 0; i < this->cpu_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cpu_infos(i), output);
  }

  // required int32 cpu_quantity = 2;
  if (has_cpu_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cpu_quantity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPUCollection)
}

::google::protobuf::uint8* CPUCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPUCollection)
  // repeated .CPUInfo cpu_infos = 1;
  for (int i = 0; i < this->cpu_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cpu_infos(i), target);
  }

  // required int32 cpu_quantity = 2;
  if (has_cpu_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cpu_quantity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPUCollection)
  return target;
}

int CPUCollection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 cpu_quantity = 2;
    if (has_cpu_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpu_quantity());
    }

  }
  // repeated .CPUInfo cpu_infos = 1;
  total_size += 1 * this->cpu_infos_size();
  for (int i = 0; i < this->cpu_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cpu_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPUCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPUCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPUCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPUCollection::MergeFrom(const CPUCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  cpu_infos_.MergeFrom(from.cpu_infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cpu_quantity()) {
      set_cpu_quantity(from.cpu_quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPUCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPUCollection::CopyFrom(const CPUCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPUCollection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cpu_infos())) return false;
  return true;
}

void CPUCollection::Swap(CPUCollection* other) {
  if (other != this) {
    cpu_infos_.Swap(&other->cpu_infos_);
    std::swap(cpu_quantity_, other->cpu_quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPUCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPUCollection_descriptor_;
  metadata.reflection = CPUCollection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPUInfo::kCpuIDFieldNumber;
const int CPUInfo::kCoreIDFieldNumber;
const int CPUInfo::kPhysicalIDFieldNumber;
const int CPUInfo::kCpucoresFieldNumber;
const int CPUInfo::kModelnameFieldNumber;
const int CPUInfo::kCpuMHzFieldNumber;
const int CPUInfo::kCpumaxMhzFieldNumber;
const int CPUInfo::kCpuminMHzFieldNumber;
const int CPUInfo::kL1DcacheFieldNumber;
const int CPUInfo::kL1IcacheFieldNumber;
const int CPUInfo::kL2CacheFieldNumber;
const int CPUInfo::kL3CacheFieldNumber;
#endif  // !_MSC_VER

CPUInfo::CPUInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPUInfo)
}

void CPUInfo::InitAsDefaultInstance() {
}

CPUInfo::CPUInfo(const CPUInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPUInfo)
}

void CPUInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cpuid_ = 0;
  coreid_ = 0;
  physicalid_ = 0;
  cpucores_ = 0;
  modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpumhz_ = 0;
  cpumaxmhz_ = 0;
  cpuminmhz_ = 0;
  l1dcache_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  l1icache_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  l2cache_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  l3cache_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPUInfo::~CPUInfo() {
  // @@protoc_insertion_point(destructor:CPUInfo)
  SharedDtor();
}

void CPUInfo::SharedDtor() {
  if (modelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete modelname_;
  }
  if (l1dcache_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete l1dcache_;
  }
  if (l1icache_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete l1icache_;
  }
  if (l2cache_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete l2cache_;
  }
  if (l3cache_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete l3cache_;
  }
  if (this != default_instance_) {
  }
}

void CPUInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPUInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPUInfo_descriptor_;
}

const CPUInfo& CPUInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fresource_2eproto();
  return *default_instance_;
}

CPUInfo* CPUInfo::default_instance_ = NULL;

CPUInfo* CPUInfo::New() const {
  return new CPUInfo;
}

void CPUInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CPUInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cpuid_, cpucores_);
    ZR_(cpumhz_, cpuminmhz_);
    if (has_modelname()) {
      if (modelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        modelname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_l1dcache()) {
      if (l1dcache_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        l1dcache_->clear();
      }
    }
    if (has_l1icache()) {
      if (l1icache_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        l1icache_->clear();
      }
    }
    if (has_l2cache()) {
      if (l2cache_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        l2cache_->clear();
      }
    }
    if (has_l3cache()) {
      if (l3cache_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        l3cache_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPUInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPUInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cpuID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpuid_)));
          set_has_cpuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coreID;
        break;
      }

      // optional int32 coreID = 2;
      case 2: {
        if (tag == 16) {
         parse_coreID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coreid_)));
          set_has_coreid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_physicalID;
        break;
      }

      // optional int32 physicalID = 3;
      case 3: {
        if (tag == 24) {
         parse_physicalID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physicalid_)));
          set_has_physicalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cpucores;
        break;
      }

      // optional int32 cpucores = 4;
      case 4: {
        if (tag == 32) {
         parse_cpucores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpucores_)));
          set_has_cpucores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_modelname;
        break;
      }

      // optional string modelname = 5;
      case 5: {
        if (tag == 42) {
         parse_modelname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modelname().data(), this->modelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modelname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_cpuMHz;
        break;
      }

      // optional double cpuMHz = 6;
      case 6: {
        if (tag == 49) {
         parse_cpuMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpumhz_)));
          set_has_cpumhz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_cpumaxMhz;
        break;
      }

      // optional double cpumaxMhz = 7;
      case 7: {
        if (tag == 57) {
         parse_cpumaxMhz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpumaxmhz_)));
          set_has_cpumaxmhz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_cpuminMHz;
        break;
      }

      // optional double cpuminMHz = 8;
      case 8: {
        if (tag == 65) {
         parse_cpuminMHz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpuminmhz_)));
          set_has_cpuminmhz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_l1dcache;
        break;
      }

      // optional string l1dcache = 9;
      case 9: {
        if (tag == 74) {
         parse_l1dcache:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_l1dcache()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->l1dcache().data(), this->l1dcache().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "l1dcache");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_l1icache;
        break;
      }

      // optional string l1icache = 10;
      case 10: {
        if (tag == 82) {
         parse_l1icache:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_l1icache()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->l1icache().data(), this->l1icache().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "l1icache");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_l2cache;
        break;
      }

      // optional string l2cache = 11;
      case 11: {
        if (tag == 90) {
         parse_l2cache:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_l2cache()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->l2cache().data(), this->l2cache().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "l2cache");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_l3cache;
        break;
      }

      // optional string l3cache = 12;
      case 12: {
        if (tag == 98) {
         parse_l3cache:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_l3cache()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->l3cache().data(), this->l3cache().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "l3cache");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPUInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPUInfo)
  return false;
#undef DO_
}

void CPUInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPUInfo)
  // required int32 cpuID = 1;
  if (has_cpuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cpuid(), output);
  }

  // optional int32 coreID = 2;
  if (has_coreid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coreid(), output);
  }

  // optional int32 physicalID = 3;
  if (has_physicalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->physicalid(), output);
  }

  // optional int32 cpucores = 4;
  if (has_cpucores()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cpucores(), output);
  }

  // optional string modelname = 5;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modelname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->modelname(), output);
  }

  // optional double cpuMHz = 6;
  if (has_cpumhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->cpumhz(), output);
  }

  // optional double cpumaxMhz = 7;
  if (has_cpumaxmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->cpumaxmhz(), output);
  }

  // optional double cpuminMHz = 8;
  if (has_cpuminmhz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->cpuminmhz(), output);
  }

  // optional string l1dcache = 9;
  if (has_l1dcache()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->l1dcache().data(), this->l1dcache().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "l1dcache");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->l1dcache(), output);
  }

  // optional string l1icache = 10;
  if (has_l1icache()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->l1icache().data(), this->l1icache().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "l1icache");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->l1icache(), output);
  }

  // optional string l2cache = 11;
  if (has_l2cache()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->l2cache().data(), this->l2cache().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "l2cache");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->l2cache(), output);
  }

  // optional string l3cache = 12;
  if (has_l3cache()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->l3cache().data(), this->l3cache().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "l3cache");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->l3cache(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPUInfo)
}

::google::protobuf::uint8* CPUInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPUInfo)
  // required int32 cpuID = 1;
  if (has_cpuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cpuid(), target);
  }

  // optional int32 coreID = 2;
  if (has_coreid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coreid(), target);
  }

  // optional int32 physicalID = 3;
  if (has_physicalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->physicalid(), target);
  }

  // optional int32 cpucores = 4;
  if (has_cpucores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cpucores(), target);
  }

  // optional string modelname = 5;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modelname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->modelname(), target);
  }

  // optional double cpuMHz = 6;
  if (has_cpumhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->cpumhz(), target);
  }

  // optional double cpumaxMhz = 7;
  if (has_cpumaxmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->cpumaxmhz(), target);
  }

  // optional double cpuminMHz = 8;
  if (has_cpuminmhz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->cpuminmhz(), target);
  }

  // optional string l1dcache = 9;
  if (has_l1dcache()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->l1dcache().data(), this->l1dcache().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "l1dcache");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->l1dcache(), target);
  }

  // optional string l1icache = 10;
  if (has_l1icache()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->l1icache().data(), this->l1icache().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "l1icache");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->l1icache(), target);
  }

  // optional string l2cache = 11;
  if (has_l2cache()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->l2cache().data(), this->l2cache().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "l2cache");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->l2cache(), target);
  }

  // optional string l3cache = 12;
  if (has_l3cache()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->l3cache().data(), this->l3cache().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "l3cache");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->l3cache(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPUInfo)
  return target;
}

int CPUInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cpuID = 1;
    if (has_cpuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpuid());
    }

    // optional int32 coreID = 2;
    if (has_coreid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coreid());
    }

    // optional int32 physicalID = 3;
    if (has_physicalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physicalid());
    }

    // optional int32 cpucores = 4;
    if (has_cpucores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpucores());
    }

    // optional string modelname = 5;
    if (has_modelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelname());
    }

    // optional double cpuMHz = 6;
    if (has_cpumhz()) {
      total_size += 1 + 8;
    }

    // optional double cpumaxMhz = 7;
    if (has_cpumaxmhz()) {
      total_size += 1 + 8;
    }

    // optional double cpuminMHz = 8;
    if (has_cpuminmhz()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string l1dcache = 9;
    if (has_l1dcache()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->l1dcache());
    }

    // optional string l1icache = 10;
    if (has_l1icache()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->l1icache());
    }

    // optional string l2cache = 11;
    if (has_l2cache()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->l2cache());
    }

    // optional string l3cache = 12;
    if (has_l3cache()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->l3cache());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPUInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPUInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPUInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPUInfo::MergeFrom(const CPUInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpuid()) {
      set_cpuid(from.cpuid());
    }
    if (from.has_coreid()) {
      set_coreid(from.coreid());
    }
    if (from.has_physicalid()) {
      set_physicalid(from.physicalid());
    }
    if (from.has_cpucores()) {
      set_cpucores(from.cpucores());
    }
    if (from.has_modelname()) {
      set_modelname(from.modelname());
    }
    if (from.has_cpumhz()) {
      set_cpumhz(from.cpumhz());
    }
    if (from.has_cpumaxmhz()) {
      set_cpumaxmhz(from.cpumaxmhz());
    }
    if (from.has_cpuminmhz()) {
      set_cpuminmhz(from.cpuminmhz());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_l1dcache()) {
      set_l1dcache(from.l1dcache());
    }
    if (from.has_l1icache()) {
      set_l1icache(from.l1icache());
    }
    if (from.has_l2cache()) {
      set_l2cache(from.l2cache());
    }
    if (from.has_l3cache()) {
      set_l3cache(from.l3cache());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPUInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPUInfo::CopyFrom(const CPUInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPUInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CPUInfo::Swap(CPUInfo* other) {
  if (other != this) {
    std::swap(cpuid_, other->cpuid_);
    std::swap(coreid_, other->coreid_);
    std::swap(physicalid_, other->physicalid_);
    std::swap(cpucores_, other->cpucores_);
    std::swap(modelname_, other->modelname_);
    std::swap(cpumhz_, other->cpumhz_);
    std::swap(cpumaxmhz_, other->cpumaxmhz_);
    std::swap(cpuminmhz_, other->cpuminmhz_);
    std::swap(l1dcache_, other->l1dcache_);
    std::swap(l1icache_, other->l1icache_);
    std::swap(l2cache_, other->l2cache_);
    std::swap(l3cache_, other->l3cache_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPUInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPUInfo_descriptor_;
  metadata.reflection = CPUInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLBCollection::kTlbInfosFieldNumber;
#endif  // !_MSC_VER

TLBCollection::TLBCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TLBCollection)
}

void TLBCollection::InitAsDefaultInstance() {
}

TLBCollection::TLBCollection(const TLBCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TLBCollection)
}

void TLBCollection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLBCollection::~TLBCollection() {
  // @@protoc_insertion_point(destructor:TLBCollection)
  SharedDtor();
}

void TLBCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLBCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLBCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLBCollection_descriptor_;
}

const TLBCollection& TLBCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fresource_2eproto();
  return *default_instance_;
}

TLBCollection* TLBCollection::default_instance_ = NULL;

TLBCollection* TLBCollection::New() const {
  return new TLBCollection;
}

void TLBCollection::Clear() {
  tlb_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLBCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TLBCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TLBInfo tlb_infos = 1;
      case 1: {
        if (tag == 10) {
         parse_tlb_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tlb_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_tlb_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TLBCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TLBCollection)
  return false;
#undef DO_
}

void TLBCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TLBCollection)
  // repeated .TLBInfo tlb_infos = 1;
  for (int i = 0; i < this->tlb_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tlb_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TLBCollection)
}

::google::protobuf::uint8* TLBCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TLBCollection)
  // repeated .TLBInfo tlb_infos = 1;
  for (int i = 0; i < this->tlb_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tlb_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TLBCollection)
  return target;
}

int TLBCollection::ByteSize() const {
  int total_size = 0;

  // repeated .TLBInfo tlb_infos = 1;
  total_size += 1 * this->tlb_infos_size();
  for (int i = 0; i < this->tlb_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tlb_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLBCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLBCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLBCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLBCollection::MergeFrom(const TLBCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  tlb_infos_.MergeFrom(from.tlb_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLBCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLBCollection::CopyFrom(const TLBCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLBCollection::IsInitialized() const {

  return true;
}

void TLBCollection::Swap(TLBCollection* other) {
  if (other != this) {
    tlb_infos_.Swap(&other->tlb_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLBCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLBCollection_descriptor_;
  metadata.reflection = TLBCollection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLBInfo::kL1DataTlbFieldNumber;
const int TLBInfo::kL1InstructionTlbFieldNumber;
const int TLBInfo::kL2TlbFieldNumber;
#endif  // !_MSC_VER

TLBInfo::TLBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TLBInfo)
}

void TLBInfo::InitAsDefaultInstance() {
}

TLBInfo::TLBInfo(const TLBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TLBInfo)
}

void TLBInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  l2_tlb_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLBInfo::~TLBInfo() {
  // @@protoc_insertion_point(destructor:TLBInfo)
  SharedDtor();
}

void TLBInfo::SharedDtor() {
  if (l2_tlb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete l2_tlb_;
  }
  if (this != default_instance_) {
  }
}

void TLBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLBInfo_descriptor_;
}

const TLBInfo& TLBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fresource_2eproto();
  return *default_instance_;
}

TLBInfo* TLBInfo::default_instance_ = NULL;

TLBInfo* TLBInfo::New() const {
  return new TLBInfo;
}

void TLBInfo::Clear() {
  if (has_l2_tlb()) {
    if (l2_tlb_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      l2_tlb_->clear();
    }
  }
  l1_data_tlb_.Clear();
  l1_instruction_tlb_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TLBInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string l1_data_tlb = 1;
      case 1: {
        if (tag == 10) {
         parse_l1_data_tlb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_l1_data_tlb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->l1_data_tlb(this->l1_data_tlb_size() - 1).data(),
            this->l1_data_tlb(this->l1_data_tlb_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "l1_data_tlb");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_l1_data_tlb;
        if (input->ExpectTag(18)) goto parse_l1_instruction_tlb;
        break;
      }

      // repeated string l1_instruction_tlb = 2;
      case 2: {
        if (tag == 18) {
         parse_l1_instruction_tlb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_l1_instruction_tlb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->l1_instruction_tlb(this->l1_instruction_tlb_size() - 1).data(),
            this->l1_instruction_tlb(this->l1_instruction_tlb_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "l1_instruction_tlb");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_l1_instruction_tlb;
        if (input->ExpectTag(26)) goto parse_l2_tlb;
        break;
      }

      // optional string l2_tlb = 3;
      case 3: {
        if (tag == 26) {
         parse_l2_tlb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_l2_tlb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->l2_tlb().data(), this->l2_tlb().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "l2_tlb");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TLBInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TLBInfo)
  return false;
#undef DO_
}

void TLBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TLBInfo)
  // repeated string l1_data_tlb = 1;
  for (int i = 0; i < this->l1_data_tlb_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->l1_data_tlb(i).data(), this->l1_data_tlb(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "l1_data_tlb");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->l1_data_tlb(i), output);
  }

  // repeated string l1_instruction_tlb = 2;
  for (int i = 0; i < this->l1_instruction_tlb_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->l1_instruction_tlb(i).data(), this->l1_instruction_tlb(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "l1_instruction_tlb");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->l1_instruction_tlb(i), output);
  }

  // optional string l2_tlb = 3;
  if (has_l2_tlb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->l2_tlb().data(), this->l2_tlb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "l2_tlb");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->l2_tlb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TLBInfo)
}

::google::protobuf::uint8* TLBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TLBInfo)
  // repeated string l1_data_tlb = 1;
  for (int i = 0; i < this->l1_data_tlb_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->l1_data_tlb(i).data(), this->l1_data_tlb(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "l1_data_tlb");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->l1_data_tlb(i), target);
  }

  // repeated string l1_instruction_tlb = 2;
  for (int i = 0; i < this->l1_instruction_tlb_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->l1_instruction_tlb(i).data(), this->l1_instruction_tlb(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "l1_instruction_tlb");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->l1_instruction_tlb(i), target);
  }

  // optional string l2_tlb = 3;
  if (has_l2_tlb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->l2_tlb().data(), this->l2_tlb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "l2_tlb");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->l2_tlb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TLBInfo)
  return target;
}

int TLBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string l2_tlb = 3;
    if (has_l2_tlb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->l2_tlb());
    }

  }
  // repeated string l1_data_tlb = 1;
  total_size += 1 * this->l1_data_tlb_size();
  for (int i = 0; i < this->l1_data_tlb_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->l1_data_tlb(i));
  }

  // repeated string l1_instruction_tlb = 2;
  total_size += 1 * this->l1_instruction_tlb_size();
  for (int i = 0; i < this->l1_instruction_tlb_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->l1_instruction_tlb(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLBInfo::MergeFrom(const TLBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  l1_data_tlb_.MergeFrom(from.l1_data_tlb_);
  l1_instruction_tlb_.MergeFrom(from.l1_instruction_tlb_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_l2_tlb()) {
      set_l2_tlb(from.l2_tlb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLBInfo::CopyFrom(const TLBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLBInfo::IsInitialized() const {

  return true;
}

void TLBInfo::Swap(TLBInfo* other) {
  if (other != this) {
    l1_data_tlb_.Swap(&other->l1_data_tlb_);
    l1_instruction_tlb_.Swap(&other->l1_instruction_tlb_);
    std::swap(l2_tlb_, other->l2_tlb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLBInfo_descriptor_;
  metadata.reflection = TLBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemoryCollection::kMaxSizeFieldNumber;
const int MemoryCollection::kDeviceQuantityFieldNumber;
const int MemoryCollection::kMemInfosFieldNumber;
#endif  // !_MSC_VER

MemoryCollection::MemoryCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MemoryCollection)
}

void MemoryCollection::InitAsDefaultInstance() {
}

MemoryCollection::MemoryCollection(const MemoryCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MemoryCollection)
}

void MemoryCollection::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  max_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryCollection::~MemoryCollection() {
  // @@protoc_insertion_point(destructor:MemoryCollection)
  SharedDtor();
}

void MemoryCollection::SharedDtor() {
  if (max_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete max_size_;
  }
  if (this != default_instance_) {
  }
}

void MemoryCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryCollection_descriptor_;
}

const MemoryCollection& MemoryCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fresource_2eproto();
  return *default_instance_;
}

MemoryCollection* MemoryCollection::default_instance_ = NULL;

MemoryCollection* MemoryCollection::New() const {
  return new MemoryCollection;
}

void MemoryCollection::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_max_size()) {
      if (max_size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        max_size_->clear();
      }
    }
    device_quantity_ = 0;
  }
  mem_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemoryCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MemoryCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string max_size = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->max_size().data(), this->max_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "max_size");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_quantity;
        break;
      }

      // required int32 device_quantity = 2;
      case 2: {
        if (tag == 16) {
         parse_device_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_quantity_)));
          set_has_device_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mem_infos;
        break;
      }

      // repeated .MemInfo mem_infos = 3;
      case 3: {
        if (tag == 26) {
         parse_mem_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mem_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mem_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MemoryCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MemoryCollection)
  return false;
#undef DO_
}

void MemoryCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MemoryCollection)
  // required string max_size = 1;
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_size().data(), this->max_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->max_size(), output);
  }

  // required int32 device_quantity = 2;
  if (has_device_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->device_quantity(), output);
  }

  // repeated .MemInfo mem_infos = 3;
  for (int i = 0; i < this->mem_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mem_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MemoryCollection)
}

::google::protobuf::uint8* MemoryCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MemoryCollection)
  // required string max_size = 1;
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->max_size().data(), this->max_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "max_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->max_size(), target);
  }

  // required int32 device_quantity = 2;
  if (has_device_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->device_quantity(), target);
  }

  // repeated .MemInfo mem_infos = 3;
  for (int i = 0; i < this->mem_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mem_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MemoryCollection)
  return target;
}

int MemoryCollection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string max_size = 1;
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->max_size());
    }

    // required int32 device_quantity = 2;
    if (has_device_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_quantity());
    }

  }
  // repeated .MemInfo mem_infos = 3;
  total_size += 1 * this->mem_infos_size();
  for (int i = 0; i < this->mem_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mem_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemoryCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemoryCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemoryCollection::MergeFrom(const MemoryCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  mem_infos_.MergeFrom(from.mem_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
    if (from.has_device_quantity()) {
      set_device_quantity(from.device_quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemoryCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryCollection::CopyFrom(const MemoryCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryCollection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->mem_infos())) return false;
  return true;
}

void MemoryCollection::Swap(MemoryCollection* other) {
  if (other != this) {
    std::swap(max_size_, other->max_size_);
    std::swap(device_quantity_, other->device_quantity_);
    mem_infos_.Swap(&other->mem_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemoryCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryCollection_descriptor_;
  metadata.reflection = MemoryCollection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemInfo::kSizeFieldNumber;
const int MemInfo::kTypeFieldNumber;
const int MemInfo::kSpeedFieldNumber;
#endif  // !_MSC_VER

MemInfo::MemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MemInfo)
}

void MemInfo::InitAsDefaultInstance() {
}

MemInfo::MemInfo(const MemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MemInfo)
}

void MemInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  speed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemInfo::~MemInfo() {
  // @@protoc_insertion_point(destructor:MemInfo)
  SharedDtor();
}

void MemInfo::SharedDtor() {
  if (size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete size_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (speed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete speed_;
  }
  if (this != default_instance_) {
  }
}

void MemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemInfo_descriptor_;
}

const MemInfo& MemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fresource_2eproto();
  return *default_instance_;
}

MemInfo* MemInfo::default_instance_ = NULL;

MemInfo* MemInfo::New() const {
  return new MemInfo;
}

void MemInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_size()) {
      if (size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        size_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_speed()) {
      if (speed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        speed_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string size = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->size().data(), this->size().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "size");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_speed;
        break;
      }

      // required string speed = 3;
      case 3: {
        if (tag == 26) {
         parse_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->speed().data(), this->speed().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "speed");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MemInfo)
  return false;
#undef DO_
}

void MemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MemInfo)
  // required string size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->size().data(), this->size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->size(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // required string speed = 3;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->speed().data(), this->speed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MemInfo)
}

::google::protobuf::uint8* MemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MemInfo)
  // required string size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->size().data(), this->size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->size(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required string speed = 3;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->speed().data(), this->speed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "speed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MemInfo)
  return target;
}

int MemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->size());
    }

    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string speed = 3;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->speed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemInfo::MergeFrom(const MemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemInfo::CopyFrom(const MemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MemInfo::Swap(MemInfo* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(type_, other->type_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemInfo_descriptor_;
  metadata.reflection = MemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPUCollection::kGpuInfosFieldNumber;
const int GPUCollection::kGpuQuantityFieldNumber;
#endif  // !_MSC_VER

GPUCollection::GPUCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GPUCollection)
}

void GPUCollection::InitAsDefaultInstance() {
}

GPUCollection::GPUCollection(const GPUCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GPUCollection)
}

void GPUCollection::SharedCtor() {
  _cached_size_ = 0;
  gpu_quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPUCollection::~GPUCollection() {
  // @@protoc_insertion_point(destructor:GPUCollection)
  SharedDtor();
}

void GPUCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GPUCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPUCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPUCollection_descriptor_;
}

const GPUCollection& GPUCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fresource_2eproto();
  return *default_instance_;
}

GPUCollection* GPUCollection::default_instance_ = NULL;

GPUCollection* GPUCollection::New() const {
  return new GPUCollection;
}

void GPUCollection::Clear() {
  gpu_quantity_ = 0;
  gpu_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPUCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GPUCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GPUInfo gpu_infos = 1;
      case 1: {
        if (tag == 10) {
         parse_gpu_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gpu_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_gpu_infos;
        if (input->ExpectTag(16)) goto parse_gpu_quantity;
        break;
      }

      // required int32 gpu_quantity = 2;
      case 2: {
        if (tag == 16) {
         parse_gpu_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_quantity_)));
          set_has_gpu_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GPUCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GPUCollection)
  return false;
#undef DO_
}

void GPUCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GPUCollection)
  // repeated .GPUInfo gpu_infos = 1;
  for (int i = 0; i < this->gpu_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gpu_infos(i), output);
  }

  // required int32 gpu_quantity = 2;
  if (has_gpu_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gpu_quantity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GPUCollection)
}

::google::protobuf::uint8* GPUCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GPUCollection)
  // repeated .GPUInfo gpu_infos = 1;
  for (int i = 0; i < this->gpu_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gpu_infos(i), target);
  }

  // required int32 gpu_quantity = 2;
  if (has_gpu_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gpu_quantity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GPUCollection)
  return target;
}

int GPUCollection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 gpu_quantity = 2;
    if (has_gpu_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu_quantity());
    }

  }
  // repeated .GPUInfo gpu_infos = 1;
  total_size += 1 * this->gpu_infos_size();
  for (int i = 0; i < this->gpu_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gpu_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPUCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPUCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPUCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPUCollection::MergeFrom(const GPUCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  gpu_infos_.MergeFrom(from.gpu_infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_gpu_quantity()) {
      set_gpu_quantity(from.gpu_quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPUCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUCollection::CopyFrom(const GPUCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUCollection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->gpu_infos())) return false;
  return true;
}

void GPUCollection::Swap(GPUCollection* other) {
  if (other != this) {
    gpu_infos_.Swap(&other->gpu_infos_);
    std::swap(gpu_quantity_, other->gpu_quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPUCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPUCollection_descriptor_;
  metadata.reflection = GPUCollection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPUInfo::kDescriptionFieldNumber;
const int GPUInfo::kProductFieldNumber;
const int GPUInfo::kVendorFieldNumber;
const int GPUInfo::kPhysicalIdFieldNumber;
const int GPUInfo::kBusInfoFieldNumber;
const int GPUInfo::kVersionFieldNumber;
const int GPUInfo::kWidthFieldNumber;
const int GPUInfo::kClockFieldNumber;
const int GPUInfo::kCapabilitiesFieldNumber;
const int GPUInfo::kConfigurationFieldNumber;
const int GPUInfo::kResourcesFieldNumber;
#endif  // !_MSC_VER

GPUInfo::GPUInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GPUInfo)
}

void GPUInfo::InitAsDefaultInstance() {
}

GPUInfo::GPUInfo(const GPUInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GPUInfo)
}

void GPUInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  physical_id_ = 0;
  bus_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0;
  clock_ = 0;
  capabilities_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  configuration_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resources_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPUInfo::~GPUInfo() {
  // @@protoc_insertion_point(destructor:GPUInfo)
  SharedDtor();
}

void GPUInfo::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (product_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete product_;
  }
  if (vendor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vendor_;
  }
  if (bus_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bus_info_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (capabilities_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete capabilities_;
  }
  if (configuration_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete configuration_;
  }
  if (resources_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete resources_;
  }
  if (this != default_instance_) {
  }
}

void GPUInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPUInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPUInfo_descriptor_;
}

const GPUInfo& GPUInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fresource_2eproto();
  return *default_instance_;
}

GPUInfo* GPUInfo::default_instance_ = NULL;

GPUInfo* GPUInfo::New() const {
  return new GPUInfo;
}

void GPUInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GPUInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(physical_id_, width_);
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_product()) {
      if (product_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        product_->clear();
      }
    }
    if (has_vendor()) {
      if (vendor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vendor_->clear();
      }
    }
    if (has_bus_info()) {
      if (bus_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bus_info_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    clock_ = 0;
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_capabilities()) {
      if (capabilities_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        capabilities_->clear();
      }
    }
    if (has_configuration()) {
      if (configuration_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        configuration_->clear();
      }
    }
    if (has_resources()) {
      if (resources_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        resources_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPUInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GPUInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string description = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_product;
        break;
      }

      // required string product = 3;
      case 3: {
        if (tag == 26) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product().data(), this->product().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "product");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vendor;
        break;
      }

      // required string vendor = 4;
      case 4: {
        if (tag == 34) {
         parse_vendor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vendor().data(), this->vendor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vendor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_physical_id;
        break;
      }

      // optional int32 physical_id = 5;
      case 5: {
        if (tag == 40) {
         parse_physical_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physical_id_)));
          set_has_physical_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_bus_info;
        break;
      }

      // optional string bus_info = 6;
      case 6: {
        if (tag == 50) {
         parse_bus_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bus_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bus_info().data(), this->bus_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bus_info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_version;
        break;
      }

      // optional string version = 7;
      case 7: {
        if (tag == 58) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_width;
        break;
      }

      // optional int32 width = 8;
      case 8: {
        if (tag == 64) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_clock;
        break;
      }

      // optional int32 clock = 9;
      case 9: {
        if (tag == 72) {
         parse_clock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clock_)));
          set_has_clock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_capabilities;
        break;
      }

      // optional string capabilities = 10;
      case 10: {
        if (tag == 82) {
         parse_capabilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_capabilities()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->capabilities().data(), this->capabilities().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "capabilities");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_configuration;
        break;
      }

      // optional string configuration = 11;
      case 11: {
        if (tag == 90) {
         parse_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configuration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->configuration().data(), this->configuration().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "configuration");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_resources;
        break;
      }

      // optional string resources = 12;
      case 12: {
        if (tag == 98) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resources()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resources().data(), this->resources().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resources");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GPUInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GPUInfo)
  return false;
#undef DO_
}

void GPUInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GPUInfo)
  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // required string product = 3;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->product(), output);
  }

  // required string vendor = 4;
  if (has_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->vendor(), output);
  }

  // optional int32 physical_id = 5;
  if (has_physical_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->physical_id(), output);
  }

  // optional string bus_info = 6;
  if (has_bus_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bus_info().data(), this->bus_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bus_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->bus_info(), output);
  }

  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->version(), output);
  }

  // optional int32 width = 8;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->width(), output);
  }

  // optional int32 clock = 9;
  if (has_clock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->clock(), output);
  }

  // optional string capabilities = 10;
  if (has_capabilities()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capabilities().data(), this->capabilities().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "capabilities");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->capabilities(), output);
  }

  // optional string configuration = 11;
  if (has_configuration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->configuration().data(), this->configuration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configuration");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->configuration(), output);
  }

  // optional string resources = 12;
  if (has_resources()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resources().data(), this->resources().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resources");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->resources(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GPUInfo)
}

::google::protobuf::uint8* GPUInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GPUInfo)
  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // required string product = 3;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->product(), target);
  }

  // required string vendor = 4;
  if (has_vendor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vendor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vendor(), target);
  }

  // optional int32 physical_id = 5;
  if (has_physical_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->physical_id(), target);
  }

  // optional string bus_info = 6;
  if (has_bus_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bus_info().data(), this->bus_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bus_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bus_info(), target);
  }

  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }

  // optional int32 width = 8;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->width(), target);
  }

  // optional int32 clock = 9;
  if (has_clock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->clock(), target);
  }

  // optional string capabilities = 10;
  if (has_capabilities()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->capabilities().data(), this->capabilities().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "capabilities");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->capabilities(), target);
  }

  // optional string configuration = 11;
  if (has_configuration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->configuration().data(), this->configuration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "configuration");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->configuration(), target);
  }

  // optional string resources = 12;
  if (has_resources()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resources().data(), this->resources().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resources");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->resources(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GPUInfo)
  return target;
}

int GPUInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required string product = 3;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

    // required string vendor = 4;
    if (has_vendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendor());
    }

    // optional int32 physical_id = 5;
    if (has_physical_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physical_id());
    }

    // optional string bus_info = 6;
    if (has_bus_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bus_info());
    }

    // optional string version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 width = 8;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 clock = 9;
    if (has_clock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clock());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string capabilities = 10;
    if (has_capabilities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->capabilities());
    }

    // optional string configuration = 11;
    if (has_configuration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configuration());
    }

    // optional string resources = 12;
    if (has_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resources());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPUInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPUInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPUInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPUInfo::MergeFrom(const GPUInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_product()) {
      set_product(from.product());
    }
    if (from.has_vendor()) {
      set_vendor(from.vendor());
    }
    if (from.has_physical_id()) {
      set_physical_id(from.physical_id());
    }
    if (from.has_bus_info()) {
      set_bus_info(from.bus_info());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_clock()) {
      set_clock(from.clock());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_capabilities()) {
      set_capabilities(from.capabilities());
    }
    if (from.has_configuration()) {
      set_configuration(from.configuration());
    }
    if (from.has_resources()) {
      set_resources(from.resources());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPUInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPUInfo::CopyFrom(const GPUInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GPUInfo::Swap(GPUInfo* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(product_, other->product_);
    std::swap(vendor_, other->vendor_);
    std::swap(physical_id_, other->physical_id_);
    std::swap(bus_info_, other->bus_info_);
    std::swap(version_, other->version_);
    std::swap(width_, other->width_);
    std::swap(clock_, other->clock_);
    std::swap(capabilities_, other->capabilities_);
    std::swap(configuration_, other->configuration_);
    std::swap(resources_, other->resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPUInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPUInfo_descriptor_;
  metadata.reflection = GPUInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiskCollection::kDiskInfosFieldNumber;
const int DiskCollection::kDiskQuantityFieldNumber;
#endif  // !_MSC_VER

DiskCollection::DiskCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DiskCollection)
}

void DiskCollection::InitAsDefaultInstance() {
}

DiskCollection::DiskCollection(const DiskCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DiskCollection)
}

void DiskCollection::SharedCtor() {
  _cached_size_ = 0;
  disk_quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiskCollection::~DiskCollection() {
  // @@protoc_insertion_point(destructor:DiskCollection)
  SharedDtor();
}

void DiskCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiskCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskCollection_descriptor_;
}

const DiskCollection& DiskCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fresource_2eproto();
  return *default_instance_;
}

DiskCollection* DiskCollection::default_instance_ = NULL;

DiskCollection* DiskCollection::New() const {
  return new DiskCollection;
}

void DiskCollection::Clear() {
  disk_quantity_ = 0;
  disk_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiskCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DiskCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DiskInfo disk_infos = 1;
      case 1: {
        if (tag == 10) {
         parse_disk_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_disk_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_disk_infos;
        if (input->ExpectTag(16)) goto parse_disk_quantity;
        break;
      }

      // required int32 disk_quantity = 2;
      case 2: {
        if (tag == 16) {
         parse_disk_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disk_quantity_)));
          set_has_disk_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DiskCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DiskCollection)
  return false;
#undef DO_
}

void DiskCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DiskCollection)
  // repeated .DiskInfo disk_infos = 1;
  for (int i = 0; i < this->disk_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->disk_infos(i), output);
  }

  // required int32 disk_quantity = 2;
  if (has_disk_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->disk_quantity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DiskCollection)
}

::google::protobuf::uint8* DiskCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiskCollection)
  // repeated .DiskInfo disk_infos = 1;
  for (int i = 0; i < this->disk_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->disk_infos(i), target);
  }

  // required int32 disk_quantity = 2;
  if (has_disk_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->disk_quantity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiskCollection)
  return target;
}

int DiskCollection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 disk_quantity = 2;
    if (has_disk_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disk_quantity());
    }

  }
  // repeated .DiskInfo disk_infos = 1;
  total_size += 1 * this->disk_infos_size();
  for (int i = 0; i < this->disk_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->disk_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiskCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiskCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiskCollection::MergeFrom(const DiskCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  disk_infos_.MergeFrom(from.disk_infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_disk_quantity()) {
      set_disk_quantity(from.disk_quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiskCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskCollection::CopyFrom(const DiskCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskCollection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->disk_infos())) return false;
  return true;
}

void DiskCollection::Swap(DiskCollection* other) {
  if (other != this) {
    disk_infos_.Swap(&other->disk_infos_);
    std::swap(disk_quantity_, other->disk_quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiskCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiskCollection_descriptor_;
  metadata.reflection = DiskCollection_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DiskInfo_DiskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskInfo_DiskType_descriptor_;
}
bool DiskInfo_DiskType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DiskInfo_DiskType DiskInfo::SSD;
const DiskInfo_DiskType DiskInfo::HDD;
const DiskInfo_DiskType DiskInfo::DiskType_MIN;
const DiskInfo_DiskType DiskInfo::DiskType_MAX;
const int DiskInfo::DiskType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DiskInfo::kNameFieldNumber;
const int DiskInfo::kSizeFieldNumber;
const int DiskInfo::kTypeFieldNumber;
const int DiskInfo::kDiskSpeedFieldNumber;
#endif  // !_MSC_VER

DiskInfo::DiskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DiskInfo)
}

void DiskInfo::InitAsDefaultInstance() {
}

DiskInfo::DiskInfo(const DiskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DiskInfo)
}

void DiskInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  disk_speed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiskInfo::~DiskInfo() {
  // @@protoc_insertion_point(destructor:DiskInfo)
  SharedDtor();
}

void DiskInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete size_;
  }
  if (disk_speed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete disk_speed_;
  }
  if (this != default_instance_) {
  }
}

void DiskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskInfo_descriptor_;
}

const DiskInfo& DiskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fresource_2eproto();
  return *default_instance_;
}

DiskInfo* DiskInfo::default_instance_ = NULL;

DiskInfo* DiskInfo::New() const {
  return new DiskInfo;
}

void DiskInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_size()) {
      if (size_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        size_->clear();
      }
    }
    type_ = 0;
    if (has_disk_speed()) {
      if (disk_speed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        disk_speed_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DiskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_size;
        break;
      }

      // required string size = 2;
      case 2: {
        if (tag == 18) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->size().data(), this->size().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "size");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .DiskInfo.DiskType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DiskInfo_DiskType_IsValid(value)) {
            set_type(static_cast< ::DiskInfo_DiskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_disk_speed;
        break;
      }

      // required string disk_speed = 4;
      case 4: {
        if (tag == 34) {
         parse_disk_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_speed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->disk_speed().data(), this->disk_speed().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "disk_speed");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DiskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DiskInfo)
  return false;
#undef DO_
}

void DiskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DiskInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->size().data(), this->size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->size(), output);
  }

  // required .DiskInfo.DiskType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required string disk_speed = 4;
  if (has_disk_speed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->disk_speed().data(), this->disk_speed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "disk_speed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->disk_speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DiskInfo)
}

::google::protobuf::uint8* DiskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiskInfo)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->size().data(), this->size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->size(), target);
  }

  // required .DiskInfo.DiskType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required string disk_speed = 4;
  if (has_disk_speed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->disk_speed().data(), this->disk_speed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "disk_speed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->disk_speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiskInfo)
  return target;
}

int DiskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->size());
    }

    // required .DiskInfo.DiskType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string disk_speed = 4;
    if (has_disk_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_speed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiskInfo::MergeFrom(const DiskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_disk_speed()) {
      set_disk_speed(from.disk_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskInfo::CopyFrom(const DiskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DiskInfo::Swap(DiskInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(size_, other->size_);
    std::swap(type_, other->type_);
    std::swap(disk_speed_, other->disk_speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiskInfo_descriptor_;
  metadata.reflection = DiskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PortCollection::kPortInfosFieldNumber;
const int PortCollection::kPortQuantityFieldNumber;
#endif  // !_MSC_VER

PortCollection::PortCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PortCollection)
}

void PortCollection::InitAsDefaultInstance() {
}

PortCollection::PortCollection(const PortCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PortCollection)
}

void PortCollection::SharedCtor() {
  _cached_size_ = 0;
  port_quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PortCollection::~PortCollection() {
  // @@protoc_insertion_point(destructor:PortCollection)
  SharedDtor();
}

void PortCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PortCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortCollection_descriptor_;
}

const PortCollection& PortCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fresource_2eproto();
  return *default_instance_;
}

PortCollection* PortCollection::default_instance_ = NULL;

PortCollection* PortCollection::New() const {
  return new PortCollection;
}

void PortCollection::Clear() {
  port_quantity_ = 0;
  port_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PortCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PortCollection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PortInfo port_infos = 1;
      case 1: {
        if (tag == 10) {
         parse_port_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_port_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_port_infos;
        if (input->ExpectTag(16)) goto parse_port_quantity;
        break;
      }

      // required int32 port_quantity = 2;
      case 2: {
        if (tag == 16) {
         parse_port_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_quantity_)));
          set_has_port_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PortCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PortCollection)
  return false;
#undef DO_
}

void PortCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PortCollection)
  // repeated .PortInfo port_infos = 1;
  for (int i = 0; i < this->port_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->port_infos(i), output);
  }

  // required int32 port_quantity = 2;
  if (has_port_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port_quantity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PortCollection)
}

::google::protobuf::uint8* PortCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PortCollection)
  // repeated .PortInfo port_infos = 1;
  for (int i = 0; i < this->port_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->port_infos(i), target);
  }

  // required int32 port_quantity = 2;
  if (has_port_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port_quantity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PortCollection)
  return target;
}

int PortCollection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 port_quantity = 2;
    if (has_port_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port_quantity());
    }

  }
  // repeated .PortInfo port_infos = 1;
  total_size += 1 * this->port_infos_size();
  for (int i = 0; i < this->port_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->port_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PortCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PortCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PortCollection::MergeFrom(const PortCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  port_infos_.MergeFrom(from.port_infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_port_quantity()) {
      set_port_quantity(from.port_quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PortCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortCollection::CopyFrom(const PortCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortCollection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void PortCollection::Swap(PortCollection* other) {
  if (other != this) {
    port_infos_.Swap(&other->port_infos_);
    std::swap(port_quantity_, other->port_quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PortCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PortCollection_descriptor_;
  metadata.reflection = PortCollection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PortInfo::kFirstportFieldNumber;
const int PortInfo::kLastportFieldNumber;
#endif  // !_MSC_VER

PortInfo::PortInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PortInfo)
}

void PortInfo::InitAsDefaultInstance() {
}

PortInfo::PortInfo(const PortInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PortInfo)
}

void PortInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  firstport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastport_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PortInfo::~PortInfo() {
  // @@protoc_insertion_point(destructor:PortInfo)
  SharedDtor();
}

void PortInfo::SharedDtor() {
  if (firstport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete firstport_;
  }
  if (lastport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastport_;
  }
  if (this != default_instance_) {
  }
}

void PortInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortInfo_descriptor_;
}

const PortInfo& PortInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hardware_5fresource_2eproto();
  return *default_instance_;
}

PortInfo* PortInfo::default_instance_ = NULL;

PortInfo* PortInfo::New() const {
  return new PortInfo;
}

void PortInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_firstport()) {
      if (firstport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        firstport_->clear();
      }
    }
    if (has_lastport()) {
      if (lastport_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lastport_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PortInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PortInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string firstport = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firstport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->firstport().data(), this->firstport().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "firstport");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lastport;
        break;
      }

      // optional string lastport = 2;
      case 2: {
        if (tag == 18) {
         parse_lastport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lastport().data(), this->lastport().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lastport");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PortInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PortInfo)
  return false;
#undef DO_
}

void PortInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PortInfo)
  // optional string firstport = 1;
  if (has_firstport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstport().data(), this->firstport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstport");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->firstport(), output);
  }

  // optional string lastport = 2;
  if (has_lastport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastport().data(), this->lastport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastport");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lastport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PortInfo)
}

::google::protobuf::uint8* PortInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PortInfo)
  // optional string firstport = 1;
  if (has_firstport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->firstport().data(), this->firstport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "firstport");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->firstport(), target);
  }

  // optional string lastport = 2;
  if (has_lastport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lastport().data(), this->lastport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lastport");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lastport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PortInfo)
  return target;
}

int PortInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string firstport = 1;
    if (has_firstport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firstport());
    }

    // optional string lastport = 2;
    if (has_lastport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PortInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PortInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PortInfo::MergeFrom(const PortInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstport()) {
      set_firstport(from.firstport());
    }
    if (from.has_lastport()) {
      set_lastport(from.lastport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PortInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortInfo::CopyFrom(const PortInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortInfo::IsInitialized() const {

  return true;
}

void PortInfo::Swap(PortInfo* other) {
  if (other != this) {
    std::swap(firstport_, other->firstport_);
    std::swap(lastport_, other->lastport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PortInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PortInfo_descriptor_;
  metadata.reflection = PortInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
