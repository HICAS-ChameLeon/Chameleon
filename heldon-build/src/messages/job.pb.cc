// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: job.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "job.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* JobMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_job_2eproto() {
  protobuf_AddDesc_job_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "job.proto");
  GOOGLE_CHECK(file != NULL);
  JobMessage_descriptor_ = file->message_type(0);
  static const int JobMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobMessage, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobMessage, exe_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobMessage, cpus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobMessage, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobMessage, master_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobMessage, is_master_),
  };
  JobMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobMessage_descriptor_,
      JobMessage::default_instance_,
      JobMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_job_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobMessage_descriptor_, &JobMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_job_2eproto() {
  delete JobMessage::default_instance_;
  delete JobMessage_reflection_;
}

void protobuf_AddDesc_job_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tjob.proto\"p\n\nJobMessage\022\014\n\004uuid\030\001 \002(\t\022"
    "\020\n\010exe_file\030\002 \002(\014\022\014\n\004cpus\030\003 \002(\005\022\016\n\006memor"
    "y\030\004 \002(\005\022\021\n\tmaster_ip\030\005 \001(\t\022\021\n\tis_master\030"
    "\006 \001(\010", 125);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "job.proto", &protobuf_RegisterTypes);
  JobMessage::default_instance_ = new JobMessage();
  JobMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_job_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_job_2eproto {
  StaticDescriptorInitializer_job_2eproto() {
    protobuf_AddDesc_job_2eproto();
  }
} static_descriptor_initializer_job_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int JobMessage::kUuidFieldNumber;
const int JobMessage::kExeFileFieldNumber;
const int JobMessage::kCpusFieldNumber;
const int JobMessage::kMemoryFieldNumber;
const int JobMessage::kMasterIpFieldNumber;
const int JobMessage::kIsMasterFieldNumber;
#endif  // !_MSC_VER

JobMessage::JobMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobMessage)
}

void JobMessage::InitAsDefaultInstance() {
}

JobMessage::JobMessage(const JobMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:JobMessage)
}

void JobMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exe_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpus_ = 0;
  memory_ = 0;
  master_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_master_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobMessage::~JobMessage() {
  // @@protoc_insertion_point(destructor:JobMessage)
  SharedDtor();
}

void JobMessage::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (exe_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exe_file_;
  }
  if (master_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_ip_;
  }
  if (this != default_instance_) {
  }
}

void JobMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobMessage_descriptor_;
}

const JobMessage& JobMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_job_2eproto();
  return *default_instance_;
}

JobMessage* JobMessage::default_instance_ = NULL;

JobMessage* JobMessage::New() const {
  return new JobMessage;
}

void JobMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JobMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(cpus_, memory_);
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    if (has_exe_file()) {
      if (exe_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exe_file_->clear();
      }
    }
    if (has_master_ip()) {
      if (master_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        master_ip_->clear();
      }
    }
    is_master_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:JobMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exe_file;
        break;
      }

      // required bytes exe_file = 2;
      case 2: {
        if (tag == 18) {
         parse_exe_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exe_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cpus;
        break;
      }

      // required int32 cpus = 3;
      case 3: {
        if (tag == 24) {
         parse_cpus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpus_)));
          set_has_cpus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_memory;
        break;
      }

      // required int32 memory = 4;
      case 4: {
        if (tag == 32) {
         parse_memory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_)));
          set_has_memory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_master_ip;
        break;
      }

      // optional string master_ip = 5;
      case 5: {
        if (tag == 42) {
         parse_master_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_ip().data(), this->master_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "master_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_master;
        break;
      }

      // optional bool is_master = 6;
      case 6: {
        if (tag == 48) {
         parse_is_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_master_)));
          set_has_is_master();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JobMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JobMessage)
  return false;
#undef DO_
}

void JobMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JobMessage)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // required bytes exe_file = 2;
  if (has_exe_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->exe_file(), output);
  }

  // required int32 cpus = 3;
  if (has_cpus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cpus(), output);
  }

  // required int32 memory = 4;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->memory(), output);
  }

  // optional string master_ip = 5;
  if (has_master_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_ip().data(), this->master_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->master_ip(), output);
  }

  // optional bool is_master = 6;
  if (has_is_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_master(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JobMessage)
}

::google::protobuf::uint8* JobMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobMessage)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // required bytes exe_file = 2;
  if (has_exe_file()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->exe_file(), target);
  }

  // required int32 cpus = 3;
  if (has_cpus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cpus(), target);
  }

  // required int32 memory = 4;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->memory(), target);
  }

  // optional string master_ip = 5;
  if (has_master_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_ip().data(), this->master_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->master_ip(), target);
  }

  // optional bool is_master = 6;
  if (has_is_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_master(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobMessage)
  return target;
}

int JobMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // required bytes exe_file = 2;
    if (has_exe_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->exe_file());
    }

    // required int32 cpus = 3;
    if (has_cpus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpus());
    }

    // required int32 memory = 4;
    if (has_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memory());
    }

    // optional string master_ip = 5;
    if (has_master_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_ip());
    }

    // optional bool is_master = 6;
    if (has_is_master()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobMessage::MergeFrom(const JobMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_exe_file()) {
      set_exe_file(from.exe_file());
    }
    if (from.has_cpus()) {
      set_cpus(from.cpus());
    }
    if (from.has_memory()) {
      set_memory(from.memory());
    }
    if (from.has_master_ip()) {
      set_master_ip(from.master_ip());
    }
    if (from.has_is_master()) {
      set_is_master(from.is_master());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobMessage::CopyFrom(const JobMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void JobMessage::Swap(JobMessage* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(exe_file_, other->exe_file_);
    std::swap(cpus_, other->cpus_);
    std::swap(memory_, other->memory_);
    std::swap(master_ip_, other->master_ip_);
    std::swap(is_master_, other->is_master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobMessage_descriptor_;
  metadata.reflection = JobMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
