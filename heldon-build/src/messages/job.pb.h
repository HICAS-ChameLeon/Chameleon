// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: job.proto

#ifndef PROTOBUF_job_2eproto__INCLUDED
#define PROTOBUF_job_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_job_2eproto();
void protobuf_AssignDesc_job_2eproto();
void protobuf_ShutdownFile_job_2eproto();

class JobMessage;

// ===================================================================

class JobMessage : public ::google::protobuf::Message {
 public:
  JobMessage();
  virtual ~JobMessage();

  JobMessage(const JobMessage& from);

  inline JobMessage& operator=(const JobMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobMessage& default_instance();

  void Swap(JobMessage* other);

  // implements Message ----------------------------------------------

  JobMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobMessage& from);
  void MergeFrom(const JobMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required bytes exe_file = 2;
  inline bool has_exe_file() const;
  inline void clear_exe_file();
  static const int kExeFileFieldNumber = 2;
  inline const ::std::string& exe_file() const;
  inline void set_exe_file(const ::std::string& value);
  inline void set_exe_file(const char* value);
  inline void set_exe_file(const void* value, size_t size);
  inline ::std::string* mutable_exe_file();
  inline ::std::string* release_exe_file();
  inline void set_allocated_exe_file(::std::string* exe_file);

  // required int32 cpus = 3;
  inline bool has_cpus() const;
  inline void clear_cpus();
  static const int kCpusFieldNumber = 3;
  inline ::google::protobuf::int32 cpus() const;
  inline void set_cpus(::google::protobuf::int32 value);

  // required int32 memory = 4;
  inline bool has_memory() const;
  inline void clear_memory();
  static const int kMemoryFieldNumber = 4;
  inline ::google::protobuf::int32 memory() const;
  inline void set_memory(::google::protobuf::int32 value);

  // optional string master_ip = 5;
  inline bool has_master_ip() const;
  inline void clear_master_ip();
  static const int kMasterIpFieldNumber = 5;
  inline const ::std::string& master_ip() const;
  inline void set_master_ip(const ::std::string& value);
  inline void set_master_ip(const char* value);
  inline void set_master_ip(const char* value, size_t size);
  inline ::std::string* mutable_master_ip();
  inline ::std::string* release_master_ip();
  inline void set_allocated_master_ip(::std::string* master_ip);

  // optional bool is_master = 6;
  inline bool has_is_master() const;
  inline void clear_is_master();
  static const int kIsMasterFieldNumber = 6;
  inline bool is_master() const;
  inline void set_is_master(bool value);

  // @@protoc_insertion_point(class_scope:JobMessage)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_exe_file();
  inline void clear_has_exe_file();
  inline void set_has_cpus();
  inline void clear_has_cpus();
  inline void set_has_memory();
  inline void clear_has_memory();
  inline void set_has_master_ip();
  inline void clear_has_master_ip();
  inline void set_has_is_master();
  inline void clear_has_is_master();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uuid_;
  ::std::string* exe_file_;
  ::google::protobuf::int32 cpus_;
  ::google::protobuf::int32 memory_;
  ::std::string* master_ip_;
  bool is_master_;
  friend void  protobuf_AddDesc_job_2eproto();
  friend void protobuf_AssignDesc_job_2eproto();
  friend void protobuf_ShutdownFile_job_2eproto();

  void InitAsDefaultInstance();
  static JobMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// JobMessage

// required string uuid = 1;
inline bool JobMessage::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JobMessage::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JobMessage::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JobMessage::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& JobMessage::uuid() const {
  // @@protoc_insertion_point(field_get:JobMessage.uuid)
  return *uuid_;
}
inline void JobMessage::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set:JobMessage.uuid)
}
inline void JobMessage::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
  // @@protoc_insertion_point(field_set_char:JobMessage.uuid)
}
inline void JobMessage::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:JobMessage.uuid)
}
inline ::std::string* JobMessage::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uuid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:JobMessage.uuid)
  return uuid_;
}
inline ::std::string* JobMessage::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JobMessage::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:JobMessage.uuid)
}

// required bytes exe_file = 2;
inline bool JobMessage::has_exe_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JobMessage::set_has_exe_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JobMessage::clear_has_exe_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JobMessage::clear_exe_file() {
  if (exe_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exe_file_->clear();
  }
  clear_has_exe_file();
}
inline const ::std::string& JobMessage::exe_file() const {
  // @@protoc_insertion_point(field_get:JobMessage.exe_file)
  return *exe_file_;
}
inline void JobMessage::set_exe_file(const ::std::string& value) {
  set_has_exe_file();
  if (exe_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exe_file_ = new ::std::string;
  }
  exe_file_->assign(value);
  // @@protoc_insertion_point(field_set:JobMessage.exe_file)
}
inline void JobMessage::set_exe_file(const char* value) {
  set_has_exe_file();
  if (exe_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exe_file_ = new ::std::string;
  }
  exe_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:JobMessage.exe_file)
}
inline void JobMessage::set_exe_file(const void* value, size_t size) {
  set_has_exe_file();
  if (exe_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exe_file_ = new ::std::string;
  }
  exe_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:JobMessage.exe_file)
}
inline ::std::string* JobMessage::mutable_exe_file() {
  set_has_exe_file();
  if (exe_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    exe_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:JobMessage.exe_file)
  return exe_file_;
}
inline ::std::string* JobMessage::release_exe_file() {
  clear_has_exe_file();
  if (exe_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = exe_file_;
    exe_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JobMessage::set_allocated_exe_file(::std::string* exe_file) {
  if (exe_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exe_file_;
  }
  if (exe_file) {
    set_has_exe_file();
    exe_file_ = exe_file;
  } else {
    clear_has_exe_file();
    exe_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:JobMessage.exe_file)
}

// required int32 cpus = 3;
inline bool JobMessage::has_cpus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JobMessage::set_has_cpus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JobMessage::clear_has_cpus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JobMessage::clear_cpus() {
  cpus_ = 0;
  clear_has_cpus();
}
inline ::google::protobuf::int32 JobMessage::cpus() const {
  // @@protoc_insertion_point(field_get:JobMessage.cpus)
  return cpus_;
}
inline void JobMessage::set_cpus(::google::protobuf::int32 value) {
  set_has_cpus();
  cpus_ = value;
  // @@protoc_insertion_point(field_set:JobMessage.cpus)
}

// required int32 memory = 4;
inline bool JobMessage::has_memory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JobMessage::set_has_memory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JobMessage::clear_has_memory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JobMessage::clear_memory() {
  memory_ = 0;
  clear_has_memory();
}
inline ::google::protobuf::int32 JobMessage::memory() const {
  // @@protoc_insertion_point(field_get:JobMessage.memory)
  return memory_;
}
inline void JobMessage::set_memory(::google::protobuf::int32 value) {
  set_has_memory();
  memory_ = value;
  // @@protoc_insertion_point(field_set:JobMessage.memory)
}

// optional string master_ip = 5;
inline bool JobMessage::has_master_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JobMessage::set_has_master_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JobMessage::clear_has_master_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JobMessage::clear_master_ip() {
  if (master_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_->clear();
  }
  clear_has_master_ip();
}
inline const ::std::string& JobMessage::master_ip() const {
  // @@protoc_insertion_point(field_get:JobMessage.master_ip)
  return *master_ip_;
}
inline void JobMessage::set_master_ip(const ::std::string& value) {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  master_ip_->assign(value);
  // @@protoc_insertion_point(field_set:JobMessage.master_ip)
}
inline void JobMessage::set_master_ip(const char* value) {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  master_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:JobMessage.master_ip)
}
inline void JobMessage::set_master_ip(const char* value, size_t size) {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  master_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:JobMessage.master_ip)
}
inline ::std::string* JobMessage::mutable_master_ip() {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:JobMessage.master_ip)
  return master_ip_;
}
inline ::std::string* JobMessage::release_master_ip() {
  clear_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = master_ip_;
    master_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JobMessage::set_allocated_master_ip(::std::string* master_ip) {
  if (master_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_ip_;
  }
  if (master_ip) {
    set_has_master_ip();
    master_ip_ = master_ip;
  } else {
    clear_has_master_ip();
    master_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:JobMessage.master_ip)
}

// optional bool is_master = 6;
inline bool JobMessage::has_is_master() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JobMessage::set_has_is_master() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JobMessage::clear_has_is_master() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JobMessage::clear_is_master() {
  is_master_ = false;
  clear_has_is_master();
}
inline bool JobMessage::is_master() const {
  // @@protoc_insertion_point(field_get:JobMessage.is_master)
  return is_master_;
}
inline void JobMessage::set_is_master(bool value) {
  set_has_is_master();
  is_master_ = value;
  // @@protoc_insertion_point(field_set:JobMessage.is_master)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_job_2eproto__INCLUDED
