// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maintenance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "maintenance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mesos {
namespace maintenance {

namespace {

const ::google::protobuf::Descriptor* Window_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Window_reflection_ = NULL;
const ::google::protobuf::Descriptor* Schedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Schedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClusterStatus_DrainingMachine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClusterStatus_DrainingMachine_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_maintenance_2eproto() {
  protobuf_AddDesc_maintenance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "maintenance.proto");
  GOOGLE_CHECK(file != NULL);
  Window_descriptor_ = file->message_type(0);
  static const int Window_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Window, machine_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Window, unavailability_),
  };
  Window_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Window_descriptor_,
      Window::default_instance_,
      Window_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Window, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Window, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Window));
  Schedule_descriptor_ = file->message_type(1);
  static const int Schedule_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, windows_),
  };
  Schedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Schedule_descriptor_,
      Schedule::default_instance_,
      Schedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Schedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Schedule));
  ClusterStatus_descriptor_ = file->message_type(2);
  static const int ClusterStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, draining_machines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, down_machines_),
  };
  ClusterStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClusterStatus_descriptor_,
      ClusterStatus::default_instance_,
      ClusterStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClusterStatus));
  ClusterStatus_DrainingMachine_descriptor_ = ClusterStatus_descriptor_->nested_type(0);
  static const int ClusterStatus_DrainingMachine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus_DrainingMachine, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus_DrainingMachine, statuses_),
  };
  ClusterStatus_DrainingMachine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClusterStatus_DrainingMachine_descriptor_,
      ClusterStatus_DrainingMachine::default_instance_,
      ClusterStatus_DrainingMachine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus_DrainingMachine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClusterStatus_DrainingMachine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClusterStatus_DrainingMachine));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_maintenance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Window_descriptor_, &Window::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Schedule_descriptor_, &Schedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClusterStatus_descriptor_, &ClusterStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClusterStatus_DrainingMachine_descriptor_, &ClusterStatus_DrainingMachine::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_maintenance_2eproto() {
  delete Window::default_instance_;
  delete Window_reflection_;
  delete Schedule::default_instance_;
  delete Schedule_reflection_;
  delete ClusterStatus::default_instance_;
  delete ClusterStatus_reflection_;
  delete ClusterStatus_DrainingMachine::default_instance_;
  delete ClusterStatus_DrainingMachine_reflection_;
}

void protobuf_AddDesc_maintenance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mesos::protobuf_AddDesc_mesos_2eproto();
  ::mesos::allocator::protobuf_AddDesc_allocator_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021maintenance.proto\022\021mesos.maintenance\032\013"
    "mesos.proto\032\017allocator.proto\"^\n\006Window\022%"
    "\n\013machine_ids\030\001 \003(\0132\020.mesos.MachineID\022-\n"
    "\016unavailability\030\002 \002(\0132\025.mesos.Unavailabi"
    "lity\"6\n\010Schedule\022*\n\007windows\030\001 \003(\0132\031.meso"
    "s.maintenance.Window\"\355\001\n\rClusterStatus\022K"
    "\n\021draining_machines\030\001 \003(\01320.mesos.mainte"
    "nance.ClusterStatus.DrainingMachine\022\'\n\rd"
    "own_machines\030\002 \003(\0132\020.mesos.MachineID\032f\n\017"
    "DrainingMachine\022\034\n\002id\030\001 \002(\0132\020.mesos.Mach"
    "ineID\0225\n\010statuses\030\002 \003(\0132#.mesos.allocato"
    "r.InverseOfferStatusB&\n\034org.apache.mesos"
    ".maintenanceB\006Protos", 500);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "maintenance.proto", &protobuf_RegisterTypes);
  Window::default_instance_ = new Window();
  Schedule::default_instance_ = new Schedule();
  ClusterStatus::default_instance_ = new ClusterStatus();
  ClusterStatus_DrainingMachine::default_instance_ = new ClusterStatus_DrainingMachine();
  Window::default_instance_->InitAsDefaultInstance();
  Schedule::default_instance_->InitAsDefaultInstance();
  ClusterStatus::default_instance_->InitAsDefaultInstance();
  ClusterStatus_DrainingMachine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_maintenance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_maintenance_2eproto {
  StaticDescriptorInitializer_maintenance_2eproto() {
    protobuf_AddDesc_maintenance_2eproto();
  }
} static_descriptor_initializer_maintenance_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Window::kMachineIdsFieldNumber;
const int Window::kUnavailabilityFieldNumber;
#endif  // !_MSC_VER

Window::Window()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.maintenance.Window)
}

void Window::InitAsDefaultInstance() {
  unavailability_ = const_cast< ::mesos::Unavailability*>(&::mesos::Unavailability::default_instance());
}

Window::Window(const Window& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.maintenance.Window)
}

void Window::SharedCtor() {
  _cached_size_ = 0;
  unavailability_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Window::~Window() {
  // @@protoc_insertion_point(destructor:mesos.maintenance.Window)
  SharedDtor();
}

void Window::SharedDtor() {
  if (this != default_instance_) {
    delete unavailability_;
  }
}

void Window::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Window::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Window_descriptor_;
}

const Window& Window::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maintenance_2eproto();
  return *default_instance_;
}

Window* Window::default_instance_ = NULL;

Window* Window::New() const {
  return new Window;
}

void Window::Clear() {
  if (has_unavailability()) {
    if (unavailability_ != NULL) unavailability_->::mesos::Unavailability::Clear();
  }
  machine_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Window::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.maintenance.Window)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.MachineID machine_ids = 1;
      case 1: {
        if (tag == 10) {
         parse_machine_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_machine_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_machine_ids;
        if (input->ExpectTag(18)) goto parse_unavailability;
        break;
      }

      // required .mesos.Unavailability unavailability = 2;
      case 2: {
        if (tag == 18) {
         parse_unavailability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unavailability()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.maintenance.Window)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.maintenance.Window)
  return false;
#undef DO_
}

void Window::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.maintenance.Window)
  // repeated .mesos.MachineID machine_ids = 1;
  for (int i = 0; i < this->machine_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machine_ids(i), output);
  }

  // required .mesos.Unavailability unavailability = 2;
  if (has_unavailability()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unavailability(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.maintenance.Window)
}

::google::protobuf::uint8* Window::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.maintenance.Window)
  // repeated .mesos.MachineID machine_ids = 1;
  for (int i = 0; i < this->machine_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machine_ids(i), target);
  }

  // required .mesos.Unavailability unavailability = 2;
  if (has_unavailability()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unavailability(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.maintenance.Window)
  return target;
}

int Window::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .mesos.Unavailability unavailability = 2;
    if (has_unavailability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unavailability());
    }

  }
  // repeated .mesos.MachineID machine_ids = 1;
  total_size += 1 * this->machine_ids_size();
  for (int i = 0; i < this->machine_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->machine_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Window::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Window* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Window*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Window::MergeFrom(const Window& from) {
  GOOGLE_CHECK_NE(&from, this);
  machine_ids_.MergeFrom(from.machine_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_unavailability()) {
      mutable_unavailability()->::mesos::Unavailability::MergeFrom(from.unavailability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Window::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Window::CopyFrom(const Window& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Window::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_unavailability()) {
    if (!this->unavailability().IsInitialized()) return false;
  }
  return true;
}

void Window::Swap(Window* other) {
  if (other != this) {
    machine_ids_.Swap(&other->machine_ids_);
    std::swap(unavailability_, other->unavailability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Window::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Window_descriptor_;
  metadata.reflection = Window_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Schedule::kWindowsFieldNumber;
#endif  // !_MSC_VER

Schedule::Schedule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.maintenance.Schedule)
}

void Schedule::InitAsDefaultInstance() {
}

Schedule::Schedule(const Schedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.maintenance.Schedule)
}

void Schedule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Schedule::~Schedule() {
  // @@protoc_insertion_point(destructor:mesos.maintenance.Schedule)
  SharedDtor();
}

void Schedule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Schedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Schedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Schedule_descriptor_;
}

const Schedule& Schedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maintenance_2eproto();
  return *default_instance_;
}

Schedule* Schedule::default_instance_ = NULL;

Schedule* Schedule::New() const {
  return new Schedule;
}

void Schedule::Clear() {
  windows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Schedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.maintenance.Schedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.maintenance.Window windows = 1;
      case 1: {
        if (tag == 10) {
         parse_windows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_windows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_windows;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.maintenance.Schedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.maintenance.Schedule)
  return false;
#undef DO_
}

void Schedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.maintenance.Schedule)
  // repeated .mesos.maintenance.Window windows = 1;
  for (int i = 0; i < this->windows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->windows(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.maintenance.Schedule)
}

::google::protobuf::uint8* Schedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.maintenance.Schedule)
  // repeated .mesos.maintenance.Window windows = 1;
  for (int i = 0; i < this->windows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->windows(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.maintenance.Schedule)
  return target;
}

int Schedule::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.maintenance.Window windows = 1;
  total_size += 1 * this->windows_size();
  for (int i = 0; i < this->windows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->windows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Schedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Schedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Schedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Schedule::MergeFrom(const Schedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  windows_.MergeFrom(from.windows_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Schedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schedule::CopyFrom(const Schedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schedule::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->windows())) return false;
  return true;
}

void Schedule::Swap(Schedule* other) {
  if (other != this) {
    windows_.Swap(&other->windows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Schedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Schedule_descriptor_;
  metadata.reflection = Schedule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClusterStatus_DrainingMachine::kIdFieldNumber;
const int ClusterStatus_DrainingMachine::kStatusesFieldNumber;
#endif  // !_MSC_VER

ClusterStatus_DrainingMachine::ClusterStatus_DrainingMachine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.maintenance.ClusterStatus.DrainingMachine)
}

void ClusterStatus_DrainingMachine::InitAsDefaultInstance() {
  id_ = const_cast< ::mesos::MachineID*>(&::mesos::MachineID::default_instance());
}

ClusterStatus_DrainingMachine::ClusterStatus_DrainingMachine(const ClusterStatus_DrainingMachine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.maintenance.ClusterStatus.DrainingMachine)
}

void ClusterStatus_DrainingMachine::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClusterStatus_DrainingMachine::~ClusterStatus_DrainingMachine() {
  // @@protoc_insertion_point(destructor:mesos.maintenance.ClusterStatus.DrainingMachine)
  SharedDtor();
}

void ClusterStatus_DrainingMachine::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
  }
}

void ClusterStatus_DrainingMachine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterStatus_DrainingMachine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterStatus_DrainingMachine_descriptor_;
}

const ClusterStatus_DrainingMachine& ClusterStatus_DrainingMachine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maintenance_2eproto();
  return *default_instance_;
}

ClusterStatus_DrainingMachine* ClusterStatus_DrainingMachine::default_instance_ = NULL;

ClusterStatus_DrainingMachine* ClusterStatus_DrainingMachine::New() const {
  return new ClusterStatus_DrainingMachine;
}

void ClusterStatus_DrainingMachine::Clear() {
  if (has_id()) {
    if (id_ != NULL) id_->::mesos::MachineID::Clear();
  }
  statuses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClusterStatus_DrainingMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.maintenance.ClusterStatus.DrainingMachine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.MachineID id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_statuses;
        break;
      }

      // repeated .mesos.allocator.InverseOfferStatus statuses = 2;
      case 2: {
        if (tag == 18) {
         parse_statuses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statuses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_statuses;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.maintenance.ClusterStatus.DrainingMachine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.maintenance.ClusterStatus.DrainingMachine)
  return false;
#undef DO_
}

void ClusterStatus_DrainingMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.maintenance.ClusterStatus.DrainingMachine)
  // required .mesos.MachineID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }

  // repeated .mesos.allocator.InverseOfferStatus statuses = 2;
  for (int i = 0; i < this->statuses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->statuses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.maintenance.ClusterStatus.DrainingMachine)
}

::google::protobuf::uint8* ClusterStatus_DrainingMachine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.maintenance.ClusterStatus.DrainingMachine)
  // required .mesos.MachineID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }

  // repeated .mesos.allocator.InverseOfferStatus statuses = 2;
  for (int i = 0; i < this->statuses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->statuses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.maintenance.ClusterStatus.DrainingMachine)
  return target;
}

int ClusterStatus_DrainingMachine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.MachineID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }

  }
  // repeated .mesos.allocator.InverseOfferStatus statuses = 2;
  total_size += 1 * this->statuses_size();
  for (int i = 0; i < this->statuses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statuses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterStatus_DrainingMachine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClusterStatus_DrainingMachine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClusterStatus_DrainingMachine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClusterStatus_DrainingMachine::MergeFrom(const ClusterStatus_DrainingMachine& from) {
  GOOGLE_CHECK_NE(&from, this);
  statuses_.MergeFrom(from.statuses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::mesos::MachineID::MergeFrom(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClusterStatus_DrainingMachine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterStatus_DrainingMachine::CopyFrom(const ClusterStatus_DrainingMachine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterStatus_DrainingMachine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->statuses())) return false;
  return true;
}

void ClusterStatus_DrainingMachine::Swap(ClusterStatus_DrainingMachine* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    statuses_.Swap(&other->statuses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClusterStatus_DrainingMachine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterStatus_DrainingMachine_descriptor_;
  metadata.reflection = ClusterStatus_DrainingMachine_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClusterStatus::kDrainingMachinesFieldNumber;
const int ClusterStatus::kDownMachinesFieldNumber;
#endif  // !_MSC_VER

ClusterStatus::ClusterStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.maintenance.ClusterStatus)
}

void ClusterStatus::InitAsDefaultInstance() {
}

ClusterStatus::ClusterStatus(const ClusterStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.maintenance.ClusterStatus)
}

void ClusterStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClusterStatus::~ClusterStatus() {
  // @@protoc_insertion_point(destructor:mesos.maintenance.ClusterStatus)
  SharedDtor();
}

void ClusterStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClusterStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClusterStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterStatus_descriptor_;
}

const ClusterStatus& ClusterStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_maintenance_2eproto();
  return *default_instance_;
}

ClusterStatus* ClusterStatus::default_instance_ = NULL;

ClusterStatus* ClusterStatus::New() const {
  return new ClusterStatus;
}

void ClusterStatus::Clear() {
  draining_machines_.Clear();
  down_machines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClusterStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.maintenance.ClusterStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.maintenance.ClusterStatus.DrainingMachine draining_machines = 1;
      case 1: {
        if (tag == 10) {
         parse_draining_machines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_draining_machines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_draining_machines;
        if (input->ExpectTag(18)) goto parse_down_machines;
        break;
      }

      // repeated .mesos.MachineID down_machines = 2;
      case 2: {
        if (tag == 18) {
         parse_down_machines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_down_machines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_down_machines;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.maintenance.ClusterStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.maintenance.ClusterStatus)
  return false;
#undef DO_
}

void ClusterStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.maintenance.ClusterStatus)
  // repeated .mesos.maintenance.ClusterStatus.DrainingMachine draining_machines = 1;
  for (int i = 0; i < this->draining_machines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->draining_machines(i), output);
  }

  // repeated .mesos.MachineID down_machines = 2;
  for (int i = 0; i < this->down_machines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->down_machines(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.maintenance.ClusterStatus)
}

::google::protobuf::uint8* ClusterStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.maintenance.ClusterStatus)
  // repeated .mesos.maintenance.ClusterStatus.DrainingMachine draining_machines = 1;
  for (int i = 0; i < this->draining_machines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->draining_machines(i), target);
  }

  // repeated .mesos.MachineID down_machines = 2;
  for (int i = 0; i < this->down_machines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->down_machines(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.maintenance.ClusterStatus)
  return target;
}

int ClusterStatus::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.maintenance.ClusterStatus.DrainingMachine draining_machines = 1;
  total_size += 1 * this->draining_machines_size();
  for (int i = 0; i < this->draining_machines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->draining_machines(i));
  }

  // repeated .mesos.MachineID down_machines = 2;
  total_size += 1 * this->down_machines_size();
  for (int i = 0; i < this->down_machines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->down_machines(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClusterStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClusterStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClusterStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClusterStatus::MergeFrom(const ClusterStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  draining_machines_.MergeFrom(from.draining_machines_);
  down_machines_.MergeFrom(from.down_machines_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClusterStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterStatus::CopyFrom(const ClusterStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterStatus::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->draining_machines())) return false;
  return true;
}

void ClusterStatus::Swap(ClusterStatus* other) {
  if (other != this) {
    draining_machines_.Swap(&other->draining_machines_);
    down_machines_.Swap(&other->down_machines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClusterStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClusterStatus_descriptor_;
  metadata.reflection = ClusterStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace maintenance
}  // namespace mesos

// @@protoc_insertion_point(global_scope)
