// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maintenance.proto

#ifndef PROTOBUF_maintenance_2eproto__INCLUDED
#define PROTOBUF_maintenance_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "mesos.pb.h"
#include "allocator.pb.h"
// @@protoc_insertion_point(includes)

namespace mesos {
namespace maintenance {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_maintenance_2eproto();
void protobuf_AssignDesc_maintenance_2eproto();
void protobuf_ShutdownFile_maintenance_2eproto();

class Window;
class Schedule;
class ClusterStatus;
class ClusterStatus_DrainingMachine;

// ===================================================================

class Window : public ::google::protobuf::Message {
 public:
  Window();
  virtual ~Window();

  Window(const Window& from);

  inline Window& operator=(const Window& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Window& default_instance();

  void Swap(Window* other);

  // implements Message ----------------------------------------------

  Window* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Window& from);
  void MergeFrom(const Window& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.MachineID machine_ids = 1;
  inline int machine_ids_size() const;
  inline void clear_machine_ids();
  static const int kMachineIdsFieldNumber = 1;
  inline const ::mesos::MachineID& machine_ids(int index) const;
  inline ::mesos::MachineID* mutable_machine_ids(int index);
  inline ::mesos::MachineID* add_machine_ids();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >&
      machine_ids() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >*
      mutable_machine_ids();

  // required .mesos.Unavailability unavailability = 2;
  inline bool has_unavailability() const;
  inline void clear_unavailability();
  static const int kUnavailabilityFieldNumber = 2;
  inline const ::mesos::Unavailability& unavailability() const;
  inline ::mesos::Unavailability* mutable_unavailability();
  inline ::mesos::Unavailability* release_unavailability();
  inline void set_allocated_unavailability(::mesos::Unavailability* unavailability);

  // @@protoc_insertion_point(class_scope:mesos.maintenance.Window)
 private:
  inline void set_has_unavailability();
  inline void clear_has_unavailability();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::MachineID > machine_ids_;
  ::mesos::Unavailability* unavailability_;
  friend void  protobuf_AddDesc_maintenance_2eproto();
  friend void protobuf_AssignDesc_maintenance_2eproto();
  friend void protobuf_ShutdownFile_maintenance_2eproto();

  void InitAsDefaultInstance();
  static Window* default_instance_;
};
// -------------------------------------------------------------------

class Schedule : public ::google::protobuf::Message {
 public:
  Schedule();
  virtual ~Schedule();

  Schedule(const Schedule& from);

  inline Schedule& operator=(const Schedule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Schedule& default_instance();

  void Swap(Schedule* other);

  // implements Message ----------------------------------------------

  Schedule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Schedule& from);
  void MergeFrom(const Schedule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.maintenance.Window windows = 1;
  inline int windows_size() const;
  inline void clear_windows();
  static const int kWindowsFieldNumber = 1;
  inline const ::mesos::maintenance::Window& windows(int index) const;
  inline ::mesos::maintenance::Window* mutable_windows(int index);
  inline ::mesos::maintenance::Window* add_windows();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::Window >&
      windows() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::Window >*
      mutable_windows();

  // @@protoc_insertion_point(class_scope:mesos.maintenance.Schedule)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::Window > windows_;
  friend void  protobuf_AddDesc_maintenance_2eproto();
  friend void protobuf_AssignDesc_maintenance_2eproto();
  friend void protobuf_ShutdownFile_maintenance_2eproto();

  void InitAsDefaultInstance();
  static Schedule* default_instance_;
};
// -------------------------------------------------------------------

class ClusterStatus_DrainingMachine : public ::google::protobuf::Message {
 public:
  ClusterStatus_DrainingMachine();
  virtual ~ClusterStatus_DrainingMachine();

  ClusterStatus_DrainingMachine(const ClusterStatus_DrainingMachine& from);

  inline ClusterStatus_DrainingMachine& operator=(const ClusterStatus_DrainingMachine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterStatus_DrainingMachine& default_instance();

  void Swap(ClusterStatus_DrainingMachine* other);

  // implements Message ----------------------------------------------

  ClusterStatus_DrainingMachine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClusterStatus_DrainingMachine& from);
  void MergeFrom(const ClusterStatus_DrainingMachine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.MachineID id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::mesos::MachineID& id() const;
  inline ::mesos::MachineID* mutable_id();
  inline ::mesos::MachineID* release_id();
  inline void set_allocated_id(::mesos::MachineID* id);

  // repeated .mesos.allocator.InverseOfferStatus statuses = 2;
  inline int statuses_size() const;
  inline void clear_statuses();
  static const int kStatusesFieldNumber = 2;
  inline const ::mesos::allocator::InverseOfferStatus& statuses(int index) const;
  inline ::mesos::allocator::InverseOfferStatus* mutable_statuses(int index);
  inline ::mesos::allocator::InverseOfferStatus* add_statuses();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::allocator::InverseOfferStatus >&
      statuses() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::allocator::InverseOfferStatus >*
      mutable_statuses();

  // @@protoc_insertion_point(class_scope:mesos.maintenance.ClusterStatus.DrainingMachine)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::MachineID* id_;
  ::google::protobuf::RepeatedPtrField< ::mesos::allocator::InverseOfferStatus > statuses_;
  friend void  protobuf_AddDesc_maintenance_2eproto();
  friend void protobuf_AssignDesc_maintenance_2eproto();
  friend void protobuf_ShutdownFile_maintenance_2eproto();

  void InitAsDefaultInstance();
  static ClusterStatus_DrainingMachine* default_instance_;
};
// -------------------------------------------------------------------

class ClusterStatus : public ::google::protobuf::Message {
 public:
  ClusterStatus();
  virtual ~ClusterStatus();

  ClusterStatus(const ClusterStatus& from);

  inline ClusterStatus& operator=(const ClusterStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterStatus& default_instance();

  void Swap(ClusterStatus* other);

  // implements Message ----------------------------------------------

  ClusterStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClusterStatus& from);
  void MergeFrom(const ClusterStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ClusterStatus_DrainingMachine DrainingMachine;

  // accessors -------------------------------------------------------

  // repeated .mesos.maintenance.ClusterStatus.DrainingMachine draining_machines = 1;
  inline int draining_machines_size() const;
  inline void clear_draining_machines();
  static const int kDrainingMachinesFieldNumber = 1;
  inline const ::mesos::maintenance::ClusterStatus_DrainingMachine& draining_machines(int index) const;
  inline ::mesos::maintenance::ClusterStatus_DrainingMachine* mutable_draining_machines(int index);
  inline ::mesos::maintenance::ClusterStatus_DrainingMachine* add_draining_machines();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::ClusterStatus_DrainingMachine >&
      draining_machines() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::ClusterStatus_DrainingMachine >*
      mutable_draining_machines();

  // repeated .mesos.MachineID down_machines = 2;
  inline int down_machines_size() const;
  inline void clear_down_machines();
  static const int kDownMachinesFieldNumber = 2;
  inline const ::mesos::MachineID& down_machines(int index) const;
  inline ::mesos::MachineID* mutable_down_machines(int index);
  inline ::mesos::MachineID* add_down_machines();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >&
      down_machines() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >*
      mutable_down_machines();

  // @@protoc_insertion_point(class_scope:mesos.maintenance.ClusterStatus)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::ClusterStatus_DrainingMachine > draining_machines_;
  ::google::protobuf::RepeatedPtrField< ::mesos::MachineID > down_machines_;
  friend void  protobuf_AddDesc_maintenance_2eproto();
  friend void protobuf_AssignDesc_maintenance_2eproto();
  friend void protobuf_ShutdownFile_maintenance_2eproto();

  void InitAsDefaultInstance();
  static ClusterStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// Window

// repeated .mesos.MachineID machine_ids = 1;
inline int Window::machine_ids_size() const {
  return machine_ids_.size();
}
inline void Window::clear_machine_ids() {
  machine_ids_.Clear();
}
inline const ::mesos::MachineID& Window::machine_ids(int index) const {
  // @@protoc_insertion_point(field_get:mesos.maintenance.Window.machine_ids)
  return machine_ids_.Get(index);
}
inline ::mesos::MachineID* Window::mutable_machine_ids(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.maintenance.Window.machine_ids)
  return machine_ids_.Mutable(index);
}
inline ::mesos::MachineID* Window::add_machine_ids() {
  // @@protoc_insertion_point(field_add:mesos.maintenance.Window.machine_ids)
  return machine_ids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >&
Window::machine_ids() const {
  // @@protoc_insertion_point(field_list:mesos.maintenance.Window.machine_ids)
  return machine_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >*
Window::mutable_machine_ids() {
  // @@protoc_insertion_point(field_mutable_list:mesos.maintenance.Window.machine_ids)
  return &machine_ids_;
}

// required .mesos.Unavailability unavailability = 2;
inline bool Window::has_unavailability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Window::set_has_unavailability() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Window::clear_has_unavailability() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Window::clear_unavailability() {
  if (unavailability_ != NULL) unavailability_->::mesos::Unavailability::Clear();
  clear_has_unavailability();
}
inline const ::mesos::Unavailability& Window::unavailability() const {
  // @@protoc_insertion_point(field_get:mesos.maintenance.Window.unavailability)
  return unavailability_ != NULL ? *unavailability_ : *default_instance_->unavailability_;
}
inline ::mesos::Unavailability* Window::mutable_unavailability() {
  set_has_unavailability();
  if (unavailability_ == NULL) unavailability_ = new ::mesos::Unavailability;
  // @@protoc_insertion_point(field_mutable:mesos.maintenance.Window.unavailability)
  return unavailability_;
}
inline ::mesos::Unavailability* Window::release_unavailability() {
  clear_has_unavailability();
  ::mesos::Unavailability* temp = unavailability_;
  unavailability_ = NULL;
  return temp;
}
inline void Window::set_allocated_unavailability(::mesos::Unavailability* unavailability) {
  delete unavailability_;
  unavailability_ = unavailability;
  if (unavailability) {
    set_has_unavailability();
  } else {
    clear_has_unavailability();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.maintenance.Window.unavailability)
}

// -------------------------------------------------------------------

// Schedule

// repeated .mesos.maintenance.Window windows = 1;
inline int Schedule::windows_size() const {
  return windows_.size();
}
inline void Schedule::clear_windows() {
  windows_.Clear();
}
inline const ::mesos::maintenance::Window& Schedule::windows(int index) const {
  // @@protoc_insertion_point(field_get:mesos.maintenance.Schedule.windows)
  return windows_.Get(index);
}
inline ::mesos::maintenance::Window* Schedule::mutable_windows(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.maintenance.Schedule.windows)
  return windows_.Mutable(index);
}
inline ::mesos::maintenance::Window* Schedule::add_windows() {
  // @@protoc_insertion_point(field_add:mesos.maintenance.Schedule.windows)
  return windows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::Window >&
Schedule::windows() const {
  // @@protoc_insertion_point(field_list:mesos.maintenance.Schedule.windows)
  return windows_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::Window >*
Schedule::mutable_windows() {
  // @@protoc_insertion_point(field_mutable_list:mesos.maintenance.Schedule.windows)
  return &windows_;
}

// -------------------------------------------------------------------

// ClusterStatus_DrainingMachine

// required .mesos.MachineID id = 1;
inline bool ClusterStatus_DrainingMachine::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClusterStatus_DrainingMachine::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClusterStatus_DrainingMachine::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClusterStatus_DrainingMachine::clear_id() {
  if (id_ != NULL) id_->::mesos::MachineID::Clear();
  clear_has_id();
}
inline const ::mesos::MachineID& ClusterStatus_DrainingMachine::id() const {
  // @@protoc_insertion_point(field_get:mesos.maintenance.ClusterStatus.DrainingMachine.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::mesos::MachineID* ClusterStatus_DrainingMachine::mutable_id() {
  set_has_id();
  if (id_ == NULL) id_ = new ::mesos::MachineID;
  // @@protoc_insertion_point(field_mutable:mesos.maintenance.ClusterStatus.DrainingMachine.id)
  return id_;
}
inline ::mesos::MachineID* ClusterStatus_DrainingMachine::release_id() {
  clear_has_id();
  ::mesos::MachineID* temp = id_;
  id_ = NULL;
  return temp;
}
inline void ClusterStatus_DrainingMachine::set_allocated_id(::mesos::MachineID* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.maintenance.ClusterStatus.DrainingMachine.id)
}

// repeated .mesos.allocator.InverseOfferStatus statuses = 2;
inline int ClusterStatus_DrainingMachine::statuses_size() const {
  return statuses_.size();
}
inline void ClusterStatus_DrainingMachine::clear_statuses() {
  statuses_.Clear();
}
inline const ::mesos::allocator::InverseOfferStatus& ClusterStatus_DrainingMachine::statuses(int index) const {
  // @@protoc_insertion_point(field_get:mesos.maintenance.ClusterStatus.DrainingMachine.statuses)
  return statuses_.Get(index);
}
inline ::mesos::allocator::InverseOfferStatus* ClusterStatus_DrainingMachine::mutable_statuses(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.maintenance.ClusterStatus.DrainingMachine.statuses)
  return statuses_.Mutable(index);
}
inline ::mesos::allocator::InverseOfferStatus* ClusterStatus_DrainingMachine::add_statuses() {
  // @@protoc_insertion_point(field_add:mesos.maintenance.ClusterStatus.DrainingMachine.statuses)
  return statuses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::allocator::InverseOfferStatus >&
ClusterStatus_DrainingMachine::statuses() const {
  // @@protoc_insertion_point(field_list:mesos.maintenance.ClusterStatus.DrainingMachine.statuses)
  return statuses_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::allocator::InverseOfferStatus >*
ClusterStatus_DrainingMachine::mutable_statuses() {
  // @@protoc_insertion_point(field_mutable_list:mesos.maintenance.ClusterStatus.DrainingMachine.statuses)
  return &statuses_;
}

// -------------------------------------------------------------------

// ClusterStatus

// repeated .mesos.maintenance.ClusterStatus.DrainingMachine draining_machines = 1;
inline int ClusterStatus::draining_machines_size() const {
  return draining_machines_.size();
}
inline void ClusterStatus::clear_draining_machines() {
  draining_machines_.Clear();
}
inline const ::mesos::maintenance::ClusterStatus_DrainingMachine& ClusterStatus::draining_machines(int index) const {
  // @@protoc_insertion_point(field_get:mesos.maintenance.ClusterStatus.draining_machines)
  return draining_machines_.Get(index);
}
inline ::mesos::maintenance::ClusterStatus_DrainingMachine* ClusterStatus::mutable_draining_machines(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.maintenance.ClusterStatus.draining_machines)
  return draining_machines_.Mutable(index);
}
inline ::mesos::maintenance::ClusterStatus_DrainingMachine* ClusterStatus::add_draining_machines() {
  // @@protoc_insertion_point(field_add:mesos.maintenance.ClusterStatus.draining_machines)
  return draining_machines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::ClusterStatus_DrainingMachine >&
ClusterStatus::draining_machines() const {
  // @@protoc_insertion_point(field_list:mesos.maintenance.ClusterStatus.draining_machines)
  return draining_machines_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::maintenance::ClusterStatus_DrainingMachine >*
ClusterStatus::mutable_draining_machines() {
  // @@protoc_insertion_point(field_mutable_list:mesos.maintenance.ClusterStatus.draining_machines)
  return &draining_machines_;
}

// repeated .mesos.MachineID down_machines = 2;
inline int ClusterStatus::down_machines_size() const {
  return down_machines_.size();
}
inline void ClusterStatus::clear_down_machines() {
  down_machines_.Clear();
}
inline const ::mesos::MachineID& ClusterStatus::down_machines(int index) const {
  // @@protoc_insertion_point(field_get:mesos.maintenance.ClusterStatus.down_machines)
  return down_machines_.Get(index);
}
inline ::mesos::MachineID* ClusterStatus::mutable_down_machines(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.maintenance.ClusterStatus.down_machines)
  return down_machines_.Mutable(index);
}
inline ::mesos::MachineID* ClusterStatus::add_down_machines() {
  // @@protoc_insertion_point(field_add:mesos.maintenance.ClusterStatus.down_machines)
  return down_machines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >&
ClusterStatus::down_machines() const {
  // @@protoc_insertion_point(field_list:mesos.maintenance.ClusterStatus.down_machines)
  return down_machines_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >*
ClusterStatus::mutable_down_machines() {
  // @@protoc_insertion_point(field_mutable_list:mesos.maintenance.ClusterStatus.down_machines)
  return &down_machines_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace maintenance
}  // namespace mesos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_maintenance_2eproto__INCLUDED
