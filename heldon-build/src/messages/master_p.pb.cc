// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master_p.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "master_p.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mesos {
namespace master_p {

namespace {

const ::google::protobuf::Descriptor* Call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_GetMetrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_GetMetrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_SetLoggingLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_SetLoggingLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_ListFiles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_ListFiles_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_ReadFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_ReadFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_UpdateWeights_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_UpdateWeights_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_ReserveResources_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_ReserveResources_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_UnreserveResources_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_UnreserveResources_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_CreateVolumes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_CreateVolumes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_DestroyVolumes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_DestroyVolumes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_UpdateMaintenanceSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_UpdateMaintenanceSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_StartMaintenance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_StartMaintenance_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_StopMaintenance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_StopMaintenance_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_SetQuota_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_SetQuota_reflection_ = NULL;
const ::google::protobuf::Descriptor* Call_RemoveQuota_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Call_RemoveQuota_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Call_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetHealth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetHealth_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetFlags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetFlags_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetMetrics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetMetrics_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetLoggingLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetLoggingLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_ListFiles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_ListFiles_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_ReadFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_ReadFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetAgents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetAgents_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetAgents_Agent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetAgents_Agent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetFrameworks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetFrameworks_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetFrameworks_Framework_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetFrameworks_Framework_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetExecutors_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetExecutors_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetExecutors_Executor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetExecutors_Executor_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetTasks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetTasks_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetRoles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetRoles_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetWeights_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetWeights_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetMaster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetMaster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetMaintenanceStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetMaintenanceStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetMaintenanceSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetMaintenanceSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetQuota_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetQuota_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Response_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_Subscribed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_Subscribed_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_TaskAdded_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_TaskAdded_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_TaskUpdated_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_TaskUpdated_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_AgentAdded_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_AgentAdded_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_AgentRemoved_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_AgentRemoved_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Event_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_master_5fp_2eproto() {
  protobuf_AddDesc_master_5fp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "master_p.proto");
  GOOGLE_CHECK(file != NULL);
  Call_descriptor_ = file->message_type(0);
  static const int Call_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, get_metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, set_logging_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, list_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, read_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, update_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, reserve_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, unreserve_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, create_volumes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, destroy_volumes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, update_maintenance_schedule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, start_maintenance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, stop_maintenance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, set_quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, remove_quota_),
  };
  Call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_descriptor_,
      Call::default_instance_,
      Call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call));
  Call_GetMetrics_descriptor_ = Call_descriptor_->nested_type(0);
  static const int Call_GetMetrics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_GetMetrics, timeout_),
  };
  Call_GetMetrics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_GetMetrics_descriptor_,
      Call_GetMetrics::default_instance_,
      Call_GetMetrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_GetMetrics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_GetMetrics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_GetMetrics));
  Call_SetLoggingLevel_descriptor_ = Call_descriptor_->nested_type(1);
  static const int Call_SetLoggingLevel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_SetLoggingLevel, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_SetLoggingLevel, duration_),
  };
  Call_SetLoggingLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_SetLoggingLevel_descriptor_,
      Call_SetLoggingLevel::default_instance_,
      Call_SetLoggingLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_SetLoggingLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_SetLoggingLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_SetLoggingLevel));
  Call_ListFiles_descriptor_ = Call_descriptor_->nested_type(2);
  static const int Call_ListFiles_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_ListFiles, path_),
  };
  Call_ListFiles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_ListFiles_descriptor_,
      Call_ListFiles::default_instance_,
      Call_ListFiles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_ListFiles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_ListFiles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_ListFiles));
  Call_ReadFile_descriptor_ = Call_descriptor_->nested_type(3);
  static const int Call_ReadFile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_ReadFile, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_ReadFile, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_ReadFile, length_),
  };
  Call_ReadFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_ReadFile_descriptor_,
      Call_ReadFile::default_instance_,
      Call_ReadFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_ReadFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_ReadFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_ReadFile));
  Call_UpdateWeights_descriptor_ = Call_descriptor_->nested_type(4);
  static const int Call_UpdateWeights_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_UpdateWeights, weight_infos_),
  };
  Call_UpdateWeights_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_UpdateWeights_descriptor_,
      Call_UpdateWeights::default_instance_,
      Call_UpdateWeights_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_UpdateWeights, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_UpdateWeights, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_UpdateWeights));
  Call_ReserveResources_descriptor_ = Call_descriptor_->nested_type(5);
  static const int Call_ReserveResources_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_ReserveResources, slave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_ReserveResources, resources_),
  };
  Call_ReserveResources_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_ReserveResources_descriptor_,
      Call_ReserveResources::default_instance_,
      Call_ReserveResources_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_ReserveResources, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_ReserveResources, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_ReserveResources));
  Call_UnreserveResources_descriptor_ = Call_descriptor_->nested_type(6);
  static const int Call_UnreserveResources_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_UnreserveResources, slave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_UnreserveResources, resources_),
  };
  Call_UnreserveResources_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_UnreserveResources_descriptor_,
      Call_UnreserveResources::default_instance_,
      Call_UnreserveResources_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_UnreserveResources, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_UnreserveResources, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_UnreserveResources));
  Call_CreateVolumes_descriptor_ = Call_descriptor_->nested_type(7);
  static const int Call_CreateVolumes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_CreateVolumes, slave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_CreateVolumes, volumes_),
  };
  Call_CreateVolumes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_CreateVolumes_descriptor_,
      Call_CreateVolumes::default_instance_,
      Call_CreateVolumes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_CreateVolumes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_CreateVolumes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_CreateVolumes));
  Call_DestroyVolumes_descriptor_ = Call_descriptor_->nested_type(8);
  static const int Call_DestroyVolumes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_DestroyVolumes, slave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_DestroyVolumes, volumes_),
  };
  Call_DestroyVolumes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_DestroyVolumes_descriptor_,
      Call_DestroyVolumes::default_instance_,
      Call_DestroyVolumes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_DestroyVolumes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_DestroyVolumes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_DestroyVolumes));
  Call_UpdateMaintenanceSchedule_descriptor_ = Call_descriptor_->nested_type(9);
  static const int Call_UpdateMaintenanceSchedule_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_UpdateMaintenanceSchedule, schedule_),
  };
  Call_UpdateMaintenanceSchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_UpdateMaintenanceSchedule_descriptor_,
      Call_UpdateMaintenanceSchedule::default_instance_,
      Call_UpdateMaintenanceSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_UpdateMaintenanceSchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_UpdateMaintenanceSchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_UpdateMaintenanceSchedule));
  Call_StartMaintenance_descriptor_ = Call_descriptor_->nested_type(10);
  static const int Call_StartMaintenance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_StartMaintenance, machines_),
  };
  Call_StartMaintenance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_StartMaintenance_descriptor_,
      Call_StartMaintenance::default_instance_,
      Call_StartMaintenance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_StartMaintenance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_StartMaintenance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_StartMaintenance));
  Call_StopMaintenance_descriptor_ = Call_descriptor_->nested_type(11);
  static const int Call_StopMaintenance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_StopMaintenance, machines_),
  };
  Call_StopMaintenance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_StopMaintenance_descriptor_,
      Call_StopMaintenance::default_instance_,
      Call_StopMaintenance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_StopMaintenance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_StopMaintenance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_StopMaintenance));
  Call_SetQuota_descriptor_ = Call_descriptor_->nested_type(12);
  static const int Call_SetQuota_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_SetQuota, quota_request_),
  };
  Call_SetQuota_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_SetQuota_descriptor_,
      Call_SetQuota::default_instance_,
      Call_SetQuota_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_SetQuota, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_SetQuota, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_SetQuota));
  Call_RemoveQuota_descriptor_ = Call_descriptor_->nested_type(13);
  static const int Call_RemoveQuota_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_RemoveQuota, role_),
  };
  Call_RemoveQuota_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Call_RemoveQuota_descriptor_,
      Call_RemoveQuota::default_instance_,
      Call_RemoveQuota_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_RemoveQuota, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Call_RemoveQuota, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Call_RemoveQuota));
  Call_Type_descriptor_ = Call_descriptor_->enum_type(0);
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_metrics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_logging_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, list_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, read_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_agents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_frameworks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_executors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_roles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_maintenance_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_maintenance_schedule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, get_quota_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  Response_GetHealth_descriptor_ = Response_descriptor_->nested_type(0);
  static const int Response_GetHealth_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetHealth, healthy_),
  };
  Response_GetHealth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetHealth_descriptor_,
      Response_GetHealth::default_instance_,
      Response_GetHealth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetHealth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetHealth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetHealth));
  Response_GetFlags_descriptor_ = Response_descriptor_->nested_type(1);
  static const int Response_GetFlags_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFlags, flags_),
  };
  Response_GetFlags_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetFlags_descriptor_,
      Response_GetFlags::default_instance_,
      Response_GetFlags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFlags, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFlags, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetFlags));
  Response_GetVersion_descriptor_ = Response_descriptor_->nested_type(2);
  static const int Response_GetVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetVersion, version_info_),
  };
  Response_GetVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetVersion_descriptor_,
      Response_GetVersion::default_instance_,
      Response_GetVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetVersion));
  Response_GetMetrics_descriptor_ = Response_descriptor_->nested_type(3);
  static const int Response_GetMetrics_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetMetrics, metrics_),
  };
  Response_GetMetrics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetMetrics_descriptor_,
      Response_GetMetrics::default_instance_,
      Response_GetMetrics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetMetrics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetMetrics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetMetrics));
  Response_GetLoggingLevel_descriptor_ = Response_descriptor_->nested_type(4);
  static const int Response_GetLoggingLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetLoggingLevel, level_),
  };
  Response_GetLoggingLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetLoggingLevel_descriptor_,
      Response_GetLoggingLevel::default_instance_,
      Response_GetLoggingLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetLoggingLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetLoggingLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetLoggingLevel));
  Response_ListFiles_descriptor_ = Response_descriptor_->nested_type(5);
  static const int Response_ListFiles_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ListFiles, file_infos_),
  };
  Response_ListFiles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_ListFiles_descriptor_,
      Response_ListFiles::default_instance_,
      Response_ListFiles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ListFiles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ListFiles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_ListFiles));
  Response_ReadFile_descriptor_ = Response_descriptor_->nested_type(6);
  static const int Response_ReadFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ReadFile, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ReadFile, data_),
  };
  Response_ReadFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_ReadFile_descriptor_,
      Response_ReadFile::default_instance_,
      Response_ReadFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ReadFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ReadFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_ReadFile));
  Response_GetState_descriptor_ = Response_descriptor_->nested_type(7);
  static const int Response_GetState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetState, get_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetState, get_executors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetState, get_frameworks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetState, get_agents_),
  };
  Response_GetState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetState_descriptor_,
      Response_GetState::default_instance_,
      Response_GetState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetState));
  Response_GetAgents_descriptor_ = Response_descriptor_->nested_type(8);
  static const int Response_GetAgents_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents, agents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents, recovered_agents_),
  };
  Response_GetAgents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetAgents_descriptor_,
      Response_GetAgents::default_instance_,
      Response_GetAgents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetAgents));
  Response_GetAgents_Agent_descriptor_ = Response_GetAgents_descriptor_->nested_type(0);
  static const int Response_GetAgents_Agent_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents_Agent, agent_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents_Agent, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents_Agent, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents_Agent, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents_Agent, registered_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents_Agent, reregistered_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents_Agent, total_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents_Agent, allocated_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents_Agent, offered_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents_Agent, capabilities_),
  };
  Response_GetAgents_Agent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetAgents_Agent_descriptor_,
      Response_GetAgents_Agent::default_instance_,
      Response_GetAgents_Agent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents_Agent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetAgents_Agent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetAgents_Agent));
  Response_GetFrameworks_descriptor_ = Response_descriptor_->nested_type(9);
  static const int Response_GetFrameworks_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks, frameworks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks, completed_frameworks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks, recovered_frameworks_),
  };
  Response_GetFrameworks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetFrameworks_descriptor_,
      Response_GetFrameworks::default_instance_,
      Response_GetFrameworks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetFrameworks));
  Response_GetFrameworks_Framework_descriptor_ = Response_GetFrameworks_descriptor_->nested_type(0);
  static const int Response_GetFrameworks_Framework_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks_Framework, framework_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks_Framework, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks_Framework, connected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks_Framework, recovered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks_Framework, registered_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks_Framework, reregistered_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks_Framework, unregistered_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks_Framework, offers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks_Framework, inverse_offers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks_Framework, allocated_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks_Framework, offered_resources_),
  };
  Response_GetFrameworks_Framework_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetFrameworks_Framework_descriptor_,
      Response_GetFrameworks_Framework::default_instance_,
      Response_GetFrameworks_Framework_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks_Framework, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetFrameworks_Framework, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetFrameworks_Framework));
  Response_GetExecutors_descriptor_ = Response_descriptor_->nested_type(10);
  static const int Response_GetExecutors_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetExecutors, executors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetExecutors, orphan_executors_),
  };
  Response_GetExecutors_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetExecutors_descriptor_,
      Response_GetExecutors::default_instance_,
      Response_GetExecutors_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetExecutors, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetExecutors, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetExecutors));
  Response_GetExecutors_Executor_descriptor_ = Response_GetExecutors_descriptor_->nested_type(0);
  static const int Response_GetExecutors_Executor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetExecutors_Executor, executor_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetExecutors_Executor, slave_id_),
  };
  Response_GetExecutors_Executor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetExecutors_Executor_descriptor_,
      Response_GetExecutors_Executor::default_instance_,
      Response_GetExecutors_Executor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetExecutors_Executor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetExecutors_Executor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetExecutors_Executor));
  Response_GetTasks_descriptor_ = Response_descriptor_->nested_type(11);
  static const int Response_GetTasks_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetTasks, pending_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetTasks, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetTasks, unreachable_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetTasks, completed_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetTasks, orphan_tasks_),
  };
  Response_GetTasks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetTasks_descriptor_,
      Response_GetTasks::default_instance_,
      Response_GetTasks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetTasks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetTasks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetTasks));
  Response_GetRoles_descriptor_ = Response_descriptor_->nested_type(12);
  static const int Response_GetRoles_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetRoles, roles_),
  };
  Response_GetRoles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetRoles_descriptor_,
      Response_GetRoles::default_instance_,
      Response_GetRoles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetRoles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetRoles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetRoles));
  Response_GetWeights_descriptor_ = Response_descriptor_->nested_type(13);
  static const int Response_GetWeights_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWeights, weight_infos_),
  };
  Response_GetWeights_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetWeights_descriptor_,
      Response_GetWeights::default_instance_,
      Response_GetWeights_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWeights, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWeights, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetWeights));
  Response_GetMaster_descriptor_ = Response_descriptor_->nested_type(14);
  static const int Response_GetMaster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetMaster, master_info_),
  };
  Response_GetMaster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetMaster_descriptor_,
      Response_GetMaster::default_instance_,
      Response_GetMaster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetMaster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetMaster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetMaster));
  Response_GetMaintenanceStatus_descriptor_ = Response_descriptor_->nested_type(15);
  static const int Response_GetMaintenanceStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetMaintenanceStatus, status_),
  };
  Response_GetMaintenanceStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetMaintenanceStatus_descriptor_,
      Response_GetMaintenanceStatus::default_instance_,
      Response_GetMaintenanceStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetMaintenanceStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetMaintenanceStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetMaintenanceStatus));
  Response_GetMaintenanceSchedule_descriptor_ = Response_descriptor_->nested_type(16);
  static const int Response_GetMaintenanceSchedule_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetMaintenanceSchedule, schedule_),
  };
  Response_GetMaintenanceSchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetMaintenanceSchedule_descriptor_,
      Response_GetMaintenanceSchedule::default_instance_,
      Response_GetMaintenanceSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetMaintenanceSchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetMaintenanceSchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetMaintenanceSchedule));
  Response_GetQuota_descriptor_ = Response_descriptor_->nested_type(17);
  static const int Response_GetQuota_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuota, status_),
  };
  Response_GetQuota_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetQuota_descriptor_,
      Response_GetQuota::default_instance_,
      Response_GetQuota_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuota, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuota, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetQuota));
  Response_Type_descriptor_ = Response_descriptor_->enum_type(0);
  Event_descriptor_ = file->message_type(2);
  static const int Event_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, subscribed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, task_added_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, task_updated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, agent_added_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, agent_removed_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  Event_Subscribed_descriptor_ = Event_descriptor_->nested_type(0);
  static const int Event_Subscribed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Subscribed, get_state_),
  };
  Event_Subscribed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_Subscribed_descriptor_,
      Event_Subscribed::default_instance_,
      Event_Subscribed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Subscribed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_Subscribed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_Subscribed));
  Event_TaskAdded_descriptor_ = Event_descriptor_->nested_type(1);
  static const int Event_TaskAdded_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_TaskAdded, task_),
  };
  Event_TaskAdded_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_TaskAdded_descriptor_,
      Event_TaskAdded::default_instance_,
      Event_TaskAdded_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_TaskAdded, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_TaskAdded, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_TaskAdded));
  Event_TaskUpdated_descriptor_ = Event_descriptor_->nested_type(2);
  static const int Event_TaskUpdated_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_TaskUpdated, framework_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_TaskUpdated, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_TaskUpdated, state_),
  };
  Event_TaskUpdated_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_TaskUpdated_descriptor_,
      Event_TaskUpdated::default_instance_,
      Event_TaskUpdated_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_TaskUpdated, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_TaskUpdated, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_TaskUpdated));
  Event_AgentAdded_descriptor_ = Event_descriptor_->nested_type(3);
  static const int Event_AgentAdded_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_AgentAdded, agent_),
  };
  Event_AgentAdded_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_AgentAdded_descriptor_,
      Event_AgentAdded::default_instance_,
      Event_AgentAdded_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_AgentAdded, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_AgentAdded, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_AgentAdded));
  Event_AgentRemoved_descriptor_ = Event_descriptor_->nested_type(4);
  static const int Event_AgentRemoved_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_AgentRemoved, agent_id_),
  };
  Event_AgentRemoved_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_AgentRemoved_descriptor_,
      Event_AgentRemoved::default_instance_,
      Event_AgentRemoved_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_AgentRemoved, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event_AgentRemoved, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event_AgentRemoved));
  Event_Type_descriptor_ = Event_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_master_5fp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_descriptor_, &Call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_GetMetrics_descriptor_, &Call_GetMetrics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_SetLoggingLevel_descriptor_, &Call_SetLoggingLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_ListFiles_descriptor_, &Call_ListFiles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_ReadFile_descriptor_, &Call_ReadFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_UpdateWeights_descriptor_, &Call_UpdateWeights::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_ReserveResources_descriptor_, &Call_ReserveResources::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_UnreserveResources_descriptor_, &Call_UnreserveResources::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_CreateVolumes_descriptor_, &Call_CreateVolumes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_DestroyVolumes_descriptor_, &Call_DestroyVolumes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_UpdateMaintenanceSchedule_descriptor_, &Call_UpdateMaintenanceSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_StartMaintenance_descriptor_, &Call_StartMaintenance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_StopMaintenance_descriptor_, &Call_StopMaintenance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_SetQuota_descriptor_, &Call_SetQuota::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Call_RemoveQuota_descriptor_, &Call_RemoveQuota::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetHealth_descriptor_, &Response_GetHealth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetFlags_descriptor_, &Response_GetFlags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetVersion_descriptor_, &Response_GetVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetMetrics_descriptor_, &Response_GetMetrics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetLoggingLevel_descriptor_, &Response_GetLoggingLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_ListFiles_descriptor_, &Response_ListFiles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_ReadFile_descriptor_, &Response_ReadFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetState_descriptor_, &Response_GetState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetAgents_descriptor_, &Response_GetAgents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetAgents_Agent_descriptor_, &Response_GetAgents_Agent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetFrameworks_descriptor_, &Response_GetFrameworks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetFrameworks_Framework_descriptor_, &Response_GetFrameworks_Framework::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetExecutors_descriptor_, &Response_GetExecutors::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetExecutors_Executor_descriptor_, &Response_GetExecutors_Executor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetTasks_descriptor_, &Response_GetTasks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetRoles_descriptor_, &Response_GetRoles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetWeights_descriptor_, &Response_GetWeights::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetMaster_descriptor_, &Response_GetMaster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetMaintenanceStatus_descriptor_, &Response_GetMaintenanceStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetMaintenanceSchedule_descriptor_, &Response_GetMaintenanceSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetQuota_descriptor_, &Response_GetQuota::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_Subscribed_descriptor_, &Event_Subscribed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_TaskAdded_descriptor_, &Event_TaskAdded::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_TaskUpdated_descriptor_, &Event_TaskUpdated::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_AgentAdded_descriptor_, &Event_AgentAdded::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_AgentRemoved_descriptor_, &Event_AgentRemoved::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_master_5fp_2eproto() {
  delete Call::default_instance_;
  delete Call_reflection_;
  delete Call_GetMetrics::default_instance_;
  delete Call_GetMetrics_reflection_;
  delete Call_SetLoggingLevel::default_instance_;
  delete Call_SetLoggingLevel_reflection_;
  delete Call_ListFiles::default_instance_;
  delete Call_ListFiles_reflection_;
  delete Call_ReadFile::default_instance_;
  delete Call_ReadFile_reflection_;
  delete Call_UpdateWeights::default_instance_;
  delete Call_UpdateWeights_reflection_;
  delete Call_ReserveResources::default_instance_;
  delete Call_ReserveResources_reflection_;
  delete Call_UnreserveResources::default_instance_;
  delete Call_UnreserveResources_reflection_;
  delete Call_CreateVolumes::default_instance_;
  delete Call_CreateVolumes_reflection_;
  delete Call_DestroyVolumes::default_instance_;
  delete Call_DestroyVolumes_reflection_;
  delete Call_UpdateMaintenanceSchedule::default_instance_;
  delete Call_UpdateMaintenanceSchedule_reflection_;
  delete Call_StartMaintenance::default_instance_;
  delete Call_StartMaintenance_reflection_;
  delete Call_StopMaintenance::default_instance_;
  delete Call_StopMaintenance_reflection_;
  delete Call_SetQuota::default_instance_;
  delete Call_SetQuota_reflection_;
  delete Call_RemoveQuota::default_instance_;
  delete Call_RemoveQuota_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Response_GetHealth::default_instance_;
  delete Response_GetHealth_reflection_;
  delete Response_GetFlags::default_instance_;
  delete Response_GetFlags_reflection_;
  delete Response_GetVersion::default_instance_;
  delete Response_GetVersion_reflection_;
  delete Response_GetMetrics::default_instance_;
  delete Response_GetMetrics_reflection_;
  delete Response_GetLoggingLevel::default_instance_;
  delete Response_GetLoggingLevel_reflection_;
  delete Response_ListFiles::default_instance_;
  delete Response_ListFiles_reflection_;
  delete Response_ReadFile::default_instance_;
  delete Response_ReadFile_reflection_;
  delete Response_GetState::default_instance_;
  delete Response_GetState_reflection_;
  delete Response_GetAgents::default_instance_;
  delete Response_GetAgents_reflection_;
  delete Response_GetAgents_Agent::default_instance_;
  delete Response_GetAgents_Agent_reflection_;
  delete Response_GetFrameworks::default_instance_;
  delete Response_GetFrameworks_reflection_;
  delete Response_GetFrameworks_Framework::default_instance_;
  delete Response_GetFrameworks_Framework_reflection_;
  delete Response_GetExecutors::default_instance_;
  delete Response_GetExecutors_reflection_;
  delete Response_GetExecutors_Executor::default_instance_;
  delete Response_GetExecutors_Executor_reflection_;
  delete Response_GetTasks::default_instance_;
  delete Response_GetTasks_reflection_;
  delete Response_GetRoles::default_instance_;
  delete Response_GetRoles_reflection_;
  delete Response_GetWeights::default_instance_;
  delete Response_GetWeights_reflection_;
  delete Response_GetMaster::default_instance_;
  delete Response_GetMaster_reflection_;
  delete Response_GetMaintenanceStatus::default_instance_;
  delete Response_GetMaintenanceStatus_reflection_;
  delete Response_GetMaintenanceSchedule::default_instance_;
  delete Response_GetMaintenanceSchedule_reflection_;
  delete Response_GetQuota::default_instance_;
  delete Response_GetQuota_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete Event_Subscribed::default_instance_;
  delete Event_Subscribed_reflection_;
  delete Event_TaskAdded::default_instance_;
  delete Event_TaskAdded_reflection_;
  delete Event_TaskUpdated::default_instance_;
  delete Event_TaskUpdated_reflection_;
  delete Event_AgentAdded::default_instance_;
  delete Event_AgentAdded_reflection_;
  delete Event_AgentRemoved::default_instance_;
  delete Event_AgentRemoved_reflection_;
}

void protobuf_AddDesc_master_5fp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mesos::protobuf_AddDesc_mesos_2eproto();
  ::mesos::maintenance::protobuf_AddDesc_maintenance_2eproto();
  ::mesos::quota::protobuf_AddDesc_quota_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016master_p.proto\022\016mesos.master_p\032\013mesos."
    "proto\032\021maintenance.proto\032\013quota.proto\"\353\022"
    "\n\004Call\022\'\n\004type\030\001 \001(\0162\031.mesos.master_p.Ca"
    "ll.Type\0224\n\013get_metrics\030\002 \001(\0132\037.mesos.mas"
    "ter_p.Call.GetMetrics\022\?\n\021set_logging_lev"
    "el\030\003 \001(\0132$.mesos.master_p.Call.SetLoggin"
    "gLevel\0222\n\nlist_files\030\004 \001(\0132\036.mesos.maste"
    "r_p.Call.ListFiles\0220\n\tread_file\030\005 \001(\0132\035."
    "mesos.master_p.Call.ReadFile\022:\n\016update_w"
    "eights\030\006 \001(\0132\".mesos.master_p.Call.Updat"
    "eWeights\022@\n\021reserve_resources\030\007 \001(\0132%.me"
    "sos.master_p.Call.ReserveResources\022D\n\023un"
    "reserve_resources\030\010 \001(\0132\'.mesos.master_p"
    ".Call.UnreserveResources\022:\n\016create_volum"
    "es\030\t \001(\0132\".mesos.master_p.Call.CreateVol"
    "umes\022<\n\017destroy_volumes\030\n \001(\0132#.mesos.ma"
    "ster_p.Call.DestroyVolumes\022S\n\033update_mai"
    "ntenance_schedule\030\013 \001(\0132..mesos.master_p"
    ".Call.UpdateMaintenanceSchedule\022@\n\021start"
    "_maintenance\030\014 \001(\0132%.mesos.master_p.Call"
    ".StartMaintenance\022>\n\020stop_maintenance\030\r "
    "\001(\0132$.mesos.master_p.Call.StopMaintenanc"
    "e\0220\n\tset_quota\030\016 \001(\0132\035.mesos.master_p.Ca"
    "ll.SetQuota\0226\n\014remove_quota\030\017 \001(\0132 .meso"
    "s.master_p.Call.RemoveQuota\0322\n\nGetMetric"
    "s\022$\n\007timeout\030\001 \001(\0132\023.mesos.DurationInfo\032"
    "G\n\017SetLoggingLevel\022\r\n\005level\030\001 \002(\r\022%\n\010dur"
    "ation\030\002 \002(\0132\023.mesos.DurationInfo\032\031\n\tList"
    "Files\022\014\n\004path\030\001 \002(\t\0328\n\010ReadFile\022\014\n\004path\030"
    "\001 \002(\t\022\016\n\006offset\030\002 \002(\004\022\016\n\006length\030\003 \001(\004\0328\n"
    "\rUpdateWeights\022\'\n\014weight_infos\030\001 \003(\0132\021.m"
    "esos.WeightInfo\032X\n\020ReserveResources\022 \n\010s"
    "lave_id\030\001 \002(\0132\016.mesos.SlaveID\022\"\n\tresourc"
    "es\030\002 \003(\0132\017.mesos.Resource\032Z\n\022UnreserveRe"
    "sources\022 \n\010slave_id\030\001 \002(\0132\016.mesos.SlaveI"
    "D\022\"\n\tresources\030\002 \003(\0132\017.mesos.Resource\032S\n"
    "\rCreateVolumes\022 \n\010slave_id\030\001 \002(\0132\016.mesos"
    ".SlaveID\022 \n\007volumes\030\002 \003(\0132\017.mesos.Resour"
    "ce\032T\n\016DestroyVolumes\022 \n\010slave_id\030\001 \002(\0132\016"
    ".mesos.SlaveID\022 \n\007volumes\030\002 \003(\0132\017.mesos."
    "Resource\032J\n\031UpdateMaintenanceSchedule\022-\n"
    "\010schedule\030\001 \002(\0132\033.mesos.maintenance.Sche"
    "dule\0326\n\020StartMaintenance\022\"\n\010machines\030\001 \003"
    "(\0132\020.mesos.MachineID\0325\n\017StopMaintenance\022"
    "\"\n\010machines\030\001 \003(\0132\020.mesos.MachineID\032<\n\010S"
    "etQuota\0220\n\rquota_request\030\001 \002(\0132\031.mesos.q"
    "uota.QuotaRequest\032\033\n\013RemoveQuota\022\014\n\004role"
    "\030\001 \002(\t\"\332\004\n\004Type\022\013\n\007UNKNOWN\020\000\022\016\n\nGET_HEAL"
    "TH\020\001\022\r\n\tGET_FLAGS\020\002\022\017\n\013GET_VERSION\020\003\022\017\n\013"
    "GET_METRICS\020\004\022\025\n\021GET_LOGGING_LEVEL\020\005\022\025\n\021"
    "SET_LOGGING_LEVEL\020\006\022\016\n\nLIST_FILES\020\007\022\r\n\tR"
    "EAD_FILE\020\010\022\r\n\tGET_STATE\020\t\022\016\n\nGET_AGENTS\020"
    "\n\022\022\n\016GET_FRAMEWORKS\020\013\022\021\n\rGET_EXECUTORS\020\014"
    "\022\r\n\tGET_TASKS\020\r\022\r\n\tGET_ROLES\020\016\022\017\n\013GET_WE"
    "IGHTS\020\017\022\022\n\016UPDATE_WEIGHTS\020\020\022\016\n\nGET_MASTE"
    "R\020\021\022\r\n\tSUBSCRIBE\020\022\022\025\n\021RESERVE_RESOURCES\020"
    "\023\022\027\n\023UNRESERVE_RESOURCES\020\024\022\022\n\016CREATE_VOL"
    "UMES\020\025\022\023\n\017DESTROY_VOLUMES\020\026\022\032\n\026GET_MAINT"
    "ENANCE_STATUS\020\027\022\034\n\030GET_MAINTENANCE_SCHED"
    "ULE\020\030\022\037\n\033UPDATE_MAINTENANCE_SCHEDULE\020\031\022\025"
    "\n\021START_MAINTENANCE\020\032\022\024\n\020STOP_MAINTENANC"
    "E\020\033\022\r\n\tGET_QUOTA\020\034\022\r\n\tSET_QUOTA\020\035\022\020\n\014REM"
    "OVE_QUOTA\020\036\"\321\036\n\010Response\022+\n\004type\030\001 \001(\0162\035"
    ".mesos.master_p.Response.Type\0226\n\nget_hea"
    "lth\030\002 \001(\0132\".mesos.master_p.Response.GetH"
    "ealth\0224\n\tget_flags\030\003 \001(\0132!.mesos.master_"
    "p.Response.GetFlags\0228\n\013get_version\030\004 \001(\013"
    "2#.mesos.master_p.Response.GetVersion\0228\n"
    "\013get_metrics\030\005 \001(\0132#.mesos.master_p.Resp"
    "onse.GetMetrics\022C\n\021get_logging_level\030\006 \001"
    "(\0132(.mesos.master_p.Response.GetLoggingL"
    "evel\0226\n\nlist_files\030\007 \001(\0132\".mesos.master_"
    "p.Response.ListFiles\0224\n\tread_file\030\010 \001(\0132"
    "!.mesos.master_p.Response.ReadFile\0224\n\tge"
    "t_state\030\t \001(\0132!.mesos.master_p.Response."
    "GetState\0226\n\nget_agents\030\n \001(\0132\".mesos.mas"
    "ter_p.Response.GetAgents\022>\n\016get_framewor"
    "ks\030\013 \001(\0132&.mesos.master_p.Response.GetFr"
    "ameworks\022<\n\rget_executors\030\014 \001(\0132%.mesos."
    "master_p.Response.GetExecutors\0224\n\tget_ta"
    "sks\030\r \001(\0132!.mesos.master_p.Response.GetT"
    "asks\0224\n\tget_roles\030\016 \001(\0132!.mesos.master_p"
    ".Response.GetRoles\0228\n\013get_weights\030\017 \001(\0132"
    "#.mesos.master_p.Response.GetWeights\0226\n\n"
    "get_master\030\020 \001(\0132\".mesos.master_p.Respon"
    "se.GetMaster\022M\n\026get_maintenance_status\030\021"
    " \001(\0132-.mesos.master_p.Response.GetMainte"
    "nanceStatus\022Q\n\030get_maintenance_schedule\030"
    "\022 \001(\0132/.mesos.master_p.Response.GetMaint"
    "enanceSchedule\0224\n\tget_quota\030\023 \001(\0132!.meso"
    "s.master_p.Response.GetQuota\032\034\n\tGetHealt"
    "h\022\017\n\007healthy\030\001 \002(\010\032&\n\010GetFlags\022\032\n\005flags\030"
    "\001 \003(\0132\013.mesos.Flag\0326\n\nGetVersion\022(\n\014vers"
    "ion_info\030\001 \002(\0132\022.mesos.VersionInfo\032,\n\nGe"
    "tMetrics\022\036\n\007metrics\030\001 \003(\0132\r.mesos.Metric"
    "\032 \n\017GetLoggingLevel\022\r\n\005level\030\001 \002(\r\0320\n\tLi"
    "stFiles\022#\n\nfile_infos\030\001 \003(\0132\017.mesos.File"
    "Info\032&\n\010ReadFile\022\014\n\004size\030\001 \002(\004\022\014\n\004data\030\002"
    " \002(\014\032\366\001\n\010GetState\0224\n\tget_tasks\030\001 \001(\0132!.m"
    "esos.master_p.Response.GetTasks\022<\n\rget_e"
    "xecutors\030\002 \001(\0132%.mesos.master_p.Response"
    ".GetExecutors\022>\n\016get_frameworks\030\003 \001(\0132&."
    "mesos.master_p.Response.GetFrameworks\0226\n"
    "\nget_agents\030\004 \001(\0132\".mesos.master_p.Respo"
    "nse.GetAgents\032\334\003\n\tGetAgents\0228\n\006agents\030\001 "
    "\003(\0132(.mesos.master_p.Response.GetAgents."
    "Agent\022*\n\020recovered_agents\030\002 \003(\0132\020.mesos."
    "SlaveInfo\032\350\002\n\005Agent\022$\n\nagent_info\030\001 \002(\0132"
    "\020.mesos.SlaveInfo\022\016\n\006active\030\002 \002(\010\022\017\n\007ver"
    "sion\030\003 \002(\t\022\013\n\003pid\030\004 \001(\t\022(\n\017registered_ti"
    "me\030\005 \001(\0132\017.mesos.TimeInfo\022*\n\021reregistere"
    "d_time\030\006 \001(\0132\017.mesos.TimeInfo\022(\n\017total_r"
    "esources\030\007 \003(\0132\017.mesos.Resource\022,\n\023alloc"
    "ated_resources\030\010 \003(\0132\017.mesos.Resource\022*\n"
    "\021offered_resources\030\t \003(\0132\017.mesos.Resourc"
    "e\0221\n\014capabilities\030\n \003(\0132\033.mesos.SlaveInf"
    "o.Capability\032\362\004\n\rGetFrameworks\022D\n\nframew"
    "orks\030\001 \003(\01320.mesos.master_p.Response.Get"
    "Frameworks.Framework\022N\n\024completed_framew"
    "orks\030\002 \003(\01320.mesos.master_p.Response.Get"
    "Frameworks.Framework\0222\n\024recovered_framew"
    "orks\030\003 \003(\0132\024.mesos.FrameworkInfo\032\226\003\n\tFra"
    "mework\022,\n\016framework_info\030\001 \002(\0132\024.mesos.F"
    "rameworkInfo\022\016\n\006active\030\002 \002(\010\022\021\n\tconnecte"
    "d\030\003 \002(\010\022\021\n\trecovered\030\013 \002(\010\022(\n\017registered"
    "_time\030\004 \001(\0132\017.mesos.TimeInfo\022*\n\021reregist"
    "ered_time\030\005 \001(\0132\017.mesos.TimeInfo\022*\n\021unre"
    "gistered_time\030\006 \001(\0132\017.mesos.TimeInfo\022\034\n\006"
    "offers\030\007 \003(\0132\014.mesos.Offer\022+\n\016inverse_of"
    "fers\030\010 \003(\0132\023.mesos.InverseOffer\022,\n\023alloc"
    "ated_resources\030\t \003(\0132\017.mesos.Resource\022*\n"
    "\021offered_resources\030\n \003(\0132\017.mesos.Resourc"
    "e\032\365\001\n\014GetExecutors\022A\n\texecutors\030\001 \003(\0132.."
    "mesos.master_p.Response.GetExecutors.Exe"
    "cutor\022H\n\020orphan_executors\030\002 \003(\0132..mesos."
    "master_p.Response.GetExecutors.Executor\032"
    "X\n\010Executor\022*\n\rexecutor_info\030\001 \002(\0132\023.mes"
    "os.ExecutorInfo\022 \n\010slave_id\030\002 \002(\0132\016.meso"
    "s.SlaveID\032\273\001\n\010GetTasks\022\"\n\rpending_tasks\030"
    "\001 \003(\0132\013.mesos.Task\022\032\n\005tasks\030\002 \003(\0132\013.meso"
    "s.Task\022&\n\021unreachable_tasks\030\005 \003(\0132\013.meso"
    "s.Task\022$\n\017completed_tasks\030\003 \003(\0132\013.mesos."
    "Task\022!\n\014orphan_tasks\030\004 \003(\0132\013.mesos.Task\032"
    "&\n\010GetRoles\022\032\n\005roles\030\001 \003(\0132\013.mesos.Role\032"
    "5\n\nGetWeights\022\'\n\014weight_infos\030\001 \003(\0132\021.me"
    "sos.WeightInfo\0323\n\tGetMaster\022&\n\013master_in"
    "fo\030\001 \001(\0132\021.mesos.MasterInfo\032H\n\024GetMainte"
    "nanceStatus\0220\n\006status\030\001 \002(\0132 .mesos.main"
    "tenance.ClusterStatus\032G\n\026GetMaintenanceS"
    "chedule\022-\n\010schedule\030\001 \002(\0132\033.mesos.mainte"
    "nance.Schedule\0324\n\010GetQuota\022(\n\006status\030\001 \002"
    "(\0132\030.mesos.quota.QuotaStatus\"\330\002\n\004Type\022\013\n"
    "\007UNKNOWN\020\000\022\016\n\nGET_HEALTH\020\001\022\r\n\tGET_FLAGS\020"
    "\002\022\017\n\013GET_VERSION\020\003\022\017\n\013GET_METRICS\020\004\022\025\n\021G"
    "ET_LOGGING_LEVEL\020\005\022\016\n\nLIST_FILES\020\006\022\r\n\tRE"
    "AD_FILE\020\007\022\r\n\tGET_STATE\020\010\022\016\n\nGET_AGENTS\020\t"
    "\022\022\n\016GET_FRAMEWORKS\020\n\022\021\n\rGET_EXECUTORS\020\013\022"
    "\r\n\tGET_TASKS\020\014\022\r\n\tGET_ROLES\020\r\022\017\n\013GET_WEI"
    "GHTS\020\016\022\016\n\nGET_MASTER\020\017\022\032\n\026GET_MAINTENANC"
    "E_STATUS\020\020\022\034\n\030GET_MAINTENANCE_SCHEDULE\020\021"
    "\022\r\n\tGET_QUOTA\020\022\"\224\006\n\005Event\022(\n\004type\030\001 \001(\0162"
    "\032.mesos.master_p.Event.Type\0224\n\nsubscribe"
    "d\030\002 \001(\0132 .mesos.master_p.Event.Subscribe"
    "d\0223\n\ntask_added\030\003 \001(\0132\037.mesos.master_p.E"
    "vent.TaskAdded\0227\n\014task_updated\030\004 \001(\0132!.m"
    "esos.master_p.Event.TaskUpdated\0225\n\013agent"
    "_added\030\005 \001(\0132 .mesos.master_p.Event.Agen"
    "tAdded\0229\n\ragent_removed\030\006 \001(\0132\".mesos.ma"
    "ster_p.Event.AgentRemoved\032B\n\nSubscribed\022"
    "4\n\tget_state\030\001 \001(\0132!.mesos.master_p.Resp"
    "onse.GetState\032&\n\tTaskAdded\022\031\n\004task\030\001 \002(\013"
    "2\013.mesos.Task\032{\n\013TaskUpdated\022(\n\014framewor"
    "k_id\030\001 \002(\0132\022.mesos.FrameworkID\022!\n\006status"
    "\030\002 \002(\0132\021.mesos.TaskStatus\022\037\n\005state\030\003 \002(\016"
    "2\020.mesos.TaskState\032E\n\nAgentAdded\0227\n\005agen"
    "t\030\001 \002(\0132(.mesos.master_p.Response.GetAge"
    "nts.Agent\0320\n\014AgentRemoved\022 \n\010agent_id\030\001 "
    "\002(\0132\016.mesos.SlaveID\"i\n\004Type\022\013\n\007UNKNOWN\020\000"
    "\022\016\n\nSUBSCRIBED\020\001\022\016\n\nTASK_ADDED\020\002\022\020\n\014TASK"
    "_UPDATED\020\003\022\017\n\013AGENT_ADDED\020\004\022\021\n\rAGENT_REM"
    "OVED\020\005B#\n\031org.apache.mesos.master_pB\006Pro"
    "tos", 7243);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "master_p.proto", &protobuf_RegisterTypes);
  Call::default_instance_ = new Call();
  Call_GetMetrics::default_instance_ = new Call_GetMetrics();
  Call_SetLoggingLevel::default_instance_ = new Call_SetLoggingLevel();
  Call_ListFiles::default_instance_ = new Call_ListFiles();
  Call_ReadFile::default_instance_ = new Call_ReadFile();
  Call_UpdateWeights::default_instance_ = new Call_UpdateWeights();
  Call_ReserveResources::default_instance_ = new Call_ReserveResources();
  Call_UnreserveResources::default_instance_ = new Call_UnreserveResources();
  Call_CreateVolumes::default_instance_ = new Call_CreateVolumes();
  Call_DestroyVolumes::default_instance_ = new Call_DestroyVolumes();
  Call_UpdateMaintenanceSchedule::default_instance_ = new Call_UpdateMaintenanceSchedule();
  Call_StartMaintenance::default_instance_ = new Call_StartMaintenance();
  Call_StopMaintenance::default_instance_ = new Call_StopMaintenance();
  Call_SetQuota::default_instance_ = new Call_SetQuota();
  Call_RemoveQuota::default_instance_ = new Call_RemoveQuota();
  Response::default_instance_ = new Response();
  Response_GetHealth::default_instance_ = new Response_GetHealth();
  Response_GetFlags::default_instance_ = new Response_GetFlags();
  Response_GetVersion::default_instance_ = new Response_GetVersion();
  Response_GetMetrics::default_instance_ = new Response_GetMetrics();
  Response_GetLoggingLevel::default_instance_ = new Response_GetLoggingLevel();
  Response_ListFiles::default_instance_ = new Response_ListFiles();
  Response_ReadFile::default_instance_ = new Response_ReadFile();
  Response_GetState::default_instance_ = new Response_GetState();
  Response_GetAgents::default_instance_ = new Response_GetAgents();
  Response_GetAgents_Agent::default_instance_ = new Response_GetAgents_Agent();
  Response_GetFrameworks::default_instance_ = new Response_GetFrameworks();
  Response_GetFrameworks_Framework::default_instance_ = new Response_GetFrameworks_Framework();
  Response_GetExecutors::default_instance_ = new Response_GetExecutors();
  Response_GetExecutors_Executor::default_instance_ = new Response_GetExecutors_Executor();
  Response_GetTasks::default_instance_ = new Response_GetTasks();
  Response_GetRoles::default_instance_ = new Response_GetRoles();
  Response_GetWeights::default_instance_ = new Response_GetWeights();
  Response_GetMaster::default_instance_ = new Response_GetMaster();
  Response_GetMaintenanceStatus::default_instance_ = new Response_GetMaintenanceStatus();
  Response_GetMaintenanceSchedule::default_instance_ = new Response_GetMaintenanceSchedule();
  Response_GetQuota::default_instance_ = new Response_GetQuota();
  Event::default_instance_ = new Event();
  Event_Subscribed::default_instance_ = new Event_Subscribed();
  Event_TaskAdded::default_instance_ = new Event_TaskAdded();
  Event_TaskUpdated::default_instance_ = new Event_TaskUpdated();
  Event_AgentAdded::default_instance_ = new Event_AgentAdded();
  Event_AgentRemoved::default_instance_ = new Event_AgentRemoved();
  Call::default_instance_->InitAsDefaultInstance();
  Call_GetMetrics::default_instance_->InitAsDefaultInstance();
  Call_SetLoggingLevel::default_instance_->InitAsDefaultInstance();
  Call_ListFiles::default_instance_->InitAsDefaultInstance();
  Call_ReadFile::default_instance_->InitAsDefaultInstance();
  Call_UpdateWeights::default_instance_->InitAsDefaultInstance();
  Call_ReserveResources::default_instance_->InitAsDefaultInstance();
  Call_UnreserveResources::default_instance_->InitAsDefaultInstance();
  Call_CreateVolumes::default_instance_->InitAsDefaultInstance();
  Call_DestroyVolumes::default_instance_->InitAsDefaultInstance();
  Call_UpdateMaintenanceSchedule::default_instance_->InitAsDefaultInstance();
  Call_StartMaintenance::default_instance_->InitAsDefaultInstance();
  Call_StopMaintenance::default_instance_->InitAsDefaultInstance();
  Call_SetQuota::default_instance_->InitAsDefaultInstance();
  Call_RemoveQuota::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Response_GetHealth::default_instance_->InitAsDefaultInstance();
  Response_GetFlags::default_instance_->InitAsDefaultInstance();
  Response_GetVersion::default_instance_->InitAsDefaultInstance();
  Response_GetMetrics::default_instance_->InitAsDefaultInstance();
  Response_GetLoggingLevel::default_instance_->InitAsDefaultInstance();
  Response_ListFiles::default_instance_->InitAsDefaultInstance();
  Response_ReadFile::default_instance_->InitAsDefaultInstance();
  Response_GetState::default_instance_->InitAsDefaultInstance();
  Response_GetAgents::default_instance_->InitAsDefaultInstance();
  Response_GetAgents_Agent::default_instance_->InitAsDefaultInstance();
  Response_GetFrameworks::default_instance_->InitAsDefaultInstance();
  Response_GetFrameworks_Framework::default_instance_->InitAsDefaultInstance();
  Response_GetExecutors::default_instance_->InitAsDefaultInstance();
  Response_GetExecutors_Executor::default_instance_->InitAsDefaultInstance();
  Response_GetTasks::default_instance_->InitAsDefaultInstance();
  Response_GetRoles::default_instance_->InitAsDefaultInstance();
  Response_GetWeights::default_instance_->InitAsDefaultInstance();
  Response_GetMaster::default_instance_->InitAsDefaultInstance();
  Response_GetMaintenanceStatus::default_instance_->InitAsDefaultInstance();
  Response_GetMaintenanceSchedule::default_instance_->InitAsDefaultInstance();
  Response_GetQuota::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  Event_Subscribed::default_instance_->InitAsDefaultInstance();
  Event_TaskAdded::default_instance_->InitAsDefaultInstance();
  Event_TaskUpdated::default_instance_->InitAsDefaultInstance();
  Event_AgentAdded::default_instance_->InitAsDefaultInstance();
  Event_AgentRemoved::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_master_5fp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_master_5fp_2eproto {
  StaticDescriptorInitializer_master_5fp_2eproto() {
    protobuf_AddDesc_master_5fp_2eproto();
  }
} static_descriptor_initializer_master_5fp_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Call_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_Type_descriptor_;
}
bool Call_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Call_Type Call::UNKNOWN;
const Call_Type Call::GET_HEALTH;
const Call_Type Call::GET_FLAGS;
const Call_Type Call::GET_VERSION;
const Call_Type Call::GET_METRICS;
const Call_Type Call::GET_LOGGING_LEVEL;
const Call_Type Call::SET_LOGGING_LEVEL;
const Call_Type Call::LIST_FILES;
const Call_Type Call::READ_FILE;
const Call_Type Call::GET_STATE;
const Call_Type Call::GET_AGENTS;
const Call_Type Call::GET_FRAMEWORKS;
const Call_Type Call::GET_EXECUTORS;
const Call_Type Call::GET_TASKS;
const Call_Type Call::GET_ROLES;
const Call_Type Call::GET_WEIGHTS;
const Call_Type Call::UPDATE_WEIGHTS;
const Call_Type Call::GET_MASTER;
const Call_Type Call::SUBSCRIBE;
const Call_Type Call::RESERVE_RESOURCES;
const Call_Type Call::UNRESERVE_RESOURCES;
const Call_Type Call::CREATE_VOLUMES;
const Call_Type Call::DESTROY_VOLUMES;
const Call_Type Call::GET_MAINTENANCE_STATUS;
const Call_Type Call::GET_MAINTENANCE_SCHEDULE;
const Call_Type Call::UPDATE_MAINTENANCE_SCHEDULE;
const Call_Type Call::START_MAINTENANCE;
const Call_Type Call::STOP_MAINTENANCE;
const Call_Type Call::GET_QUOTA;
const Call_Type Call::SET_QUOTA;
const Call_Type Call::REMOVE_QUOTA;
const Call_Type Call::Type_MIN;
const Call_Type Call::Type_MAX;
const int Call::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Call_GetMetrics::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Call_GetMetrics::Call_GetMetrics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call.GetMetrics)
}

void Call_GetMetrics::InitAsDefaultInstance() {
  timeout_ = const_cast< ::mesos::DurationInfo*>(&::mesos::DurationInfo::default_instance());
}

Call_GetMetrics::Call_GetMetrics(const Call_GetMetrics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call.GetMetrics)
}

void Call_GetMetrics::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_GetMetrics::~Call_GetMetrics() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call.GetMetrics)
  SharedDtor();
}

void Call_GetMetrics::SharedDtor() {
  if (this != default_instance_) {
    delete timeout_;
  }
}

void Call_GetMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_GetMetrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_GetMetrics_descriptor_;
}

const Call_GetMetrics& Call_GetMetrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call_GetMetrics* Call_GetMetrics::default_instance_ = NULL;

Call_GetMetrics* Call_GetMetrics::New() const {
  return new Call_GetMetrics;
}

void Call_GetMetrics::Clear() {
  if (has_timeout()) {
    if (timeout_ != NULL) timeout_->::mesos::DurationInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_GetMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call.GetMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.DurationInfo timeout = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timeout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call.GetMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call.GetMetrics)
  return false;
#undef DO_
}

void Call_GetMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call.GetMetrics)
  // optional .mesos.DurationInfo timeout = 1;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call.GetMetrics)
}

::google::protobuf::uint8* Call_GetMetrics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call.GetMetrics)
  // optional .mesos.DurationInfo timeout = 1;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call.GetMetrics)
  return target;
}

int Call_GetMetrics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.DurationInfo timeout = 1;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_GetMetrics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_GetMetrics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_GetMetrics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_GetMetrics::MergeFrom(const Call_GetMetrics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      mutable_timeout()->::mesos::DurationInfo::MergeFrom(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_GetMetrics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_GetMetrics::CopyFrom(const Call_GetMetrics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_GetMetrics::IsInitialized() const {

  if (has_timeout()) {
    if (!this->timeout().IsInitialized()) return false;
  }
  return true;
}

void Call_GetMetrics::Swap(Call_GetMetrics* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_GetMetrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_GetMetrics_descriptor_;
  metadata.reflection = Call_GetMetrics_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_SetLoggingLevel::kLevelFieldNumber;
const int Call_SetLoggingLevel::kDurationFieldNumber;
#endif  // !_MSC_VER

Call_SetLoggingLevel::Call_SetLoggingLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call.SetLoggingLevel)
}

void Call_SetLoggingLevel::InitAsDefaultInstance() {
  duration_ = const_cast< ::mesos::DurationInfo*>(&::mesos::DurationInfo::default_instance());
}

Call_SetLoggingLevel::Call_SetLoggingLevel(const Call_SetLoggingLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call.SetLoggingLevel)
}

void Call_SetLoggingLevel::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  duration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_SetLoggingLevel::~Call_SetLoggingLevel() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call.SetLoggingLevel)
  SharedDtor();
}

void Call_SetLoggingLevel::SharedDtor() {
  if (this != default_instance_) {
    delete duration_;
  }
}

void Call_SetLoggingLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_SetLoggingLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_SetLoggingLevel_descriptor_;
}

const Call_SetLoggingLevel& Call_SetLoggingLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call_SetLoggingLevel* Call_SetLoggingLevel::default_instance_ = NULL;

Call_SetLoggingLevel* Call_SetLoggingLevel::New() const {
  return new Call_SetLoggingLevel;
}

void Call_SetLoggingLevel::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    level_ = 0u;
    if (has_duration()) {
      if (duration_ != NULL) duration_->::mesos::DurationInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_SetLoggingLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call.SetLoggingLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_duration;
        break;
      }

      // required .mesos.DurationInfo duration = 2;
      case 2: {
        if (tag == 18) {
         parse_duration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call.SetLoggingLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call.SetLoggingLevel)
  return false;
#undef DO_
}

void Call_SetLoggingLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call.SetLoggingLevel)
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required .mesos.DurationInfo duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call.SetLoggingLevel)
}

::google::protobuf::uint8* Call_SetLoggingLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call.SetLoggingLevel)
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required .mesos.DurationInfo duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call.SetLoggingLevel)
  return target;
}

int Call_SetLoggingLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required .mesos.DurationInfo duration = 2;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->duration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_SetLoggingLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_SetLoggingLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_SetLoggingLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_SetLoggingLevel::MergeFrom(const Call_SetLoggingLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_duration()) {
      mutable_duration()->::mesos::DurationInfo::MergeFrom(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_SetLoggingLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_SetLoggingLevel::CopyFrom(const Call_SetLoggingLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_SetLoggingLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_duration()) {
    if (!this->duration().IsInitialized()) return false;
  }
  return true;
}

void Call_SetLoggingLevel::Swap(Call_SetLoggingLevel* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_SetLoggingLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_SetLoggingLevel_descriptor_;
  metadata.reflection = Call_SetLoggingLevel_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_ListFiles::kPathFieldNumber;
#endif  // !_MSC_VER

Call_ListFiles::Call_ListFiles()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call.ListFiles)
}

void Call_ListFiles::InitAsDefaultInstance() {
}

Call_ListFiles::Call_ListFiles(const Call_ListFiles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call.ListFiles)
}

void Call_ListFiles::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_ListFiles::~Call_ListFiles() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call.ListFiles)
  SharedDtor();
}

void Call_ListFiles::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void Call_ListFiles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_ListFiles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_ListFiles_descriptor_;
}

const Call_ListFiles& Call_ListFiles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call_ListFiles* Call_ListFiles::default_instance_ = NULL;

Call_ListFiles* Call_ListFiles::New() const {
  return new Call_ListFiles;
}

void Call_ListFiles::Clear() {
  if (has_path()) {
    if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      path_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_ListFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call.ListFiles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call.ListFiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call.ListFiles)
  return false;
#undef DO_
}

void Call_ListFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call.ListFiles)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call.ListFiles)
}

::google::protobuf::uint8* Call_ListFiles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call.ListFiles)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call.ListFiles)
  return target;
}

int Call_ListFiles::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_ListFiles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_ListFiles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_ListFiles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_ListFiles::MergeFrom(const Call_ListFiles& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_ListFiles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_ListFiles::CopyFrom(const Call_ListFiles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_ListFiles::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Call_ListFiles::Swap(Call_ListFiles* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_ListFiles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_ListFiles_descriptor_;
  metadata.reflection = Call_ListFiles_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_ReadFile::kPathFieldNumber;
const int Call_ReadFile::kOffsetFieldNumber;
const int Call_ReadFile::kLengthFieldNumber;
#endif  // !_MSC_VER

Call_ReadFile::Call_ReadFile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call.ReadFile)
}

void Call_ReadFile::InitAsDefaultInstance() {
}

Call_ReadFile::Call_ReadFile(const Call_ReadFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call.ReadFile)
}

void Call_ReadFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = GOOGLE_ULONGLONG(0);
  length_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_ReadFile::~Call_ReadFile() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call.ReadFile)
  SharedDtor();
}

void Call_ReadFile::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void Call_ReadFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_ReadFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_ReadFile_descriptor_;
}

const Call_ReadFile& Call_ReadFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call_ReadFile* Call_ReadFile::default_instance_ = NULL;

Call_ReadFile* Call_ReadFile::New() const {
  return new Call_ReadFile;
}

void Call_ReadFile::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Call_ReadFile*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(offset_, length_);
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_ReadFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call.ReadFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required uint64 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // optional uint64 length = 3;
      case 3: {
        if (tag == 24) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call.ReadFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call.ReadFile)
  return false;
#undef DO_
}

void Call_ReadFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call.ReadFile)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // required uint64 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->offset(), output);
  }

  // optional uint64 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call.ReadFile)
}

::google::protobuf::uint8* Call_ReadFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call.ReadFile)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // required uint64 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->offset(), target);
  }

  // optional uint64 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call.ReadFile)
  return target;
}

int Call_ReadFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required uint64 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }

    // optional uint64 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_ReadFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_ReadFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_ReadFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_ReadFile::MergeFrom(const Call_ReadFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_ReadFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_ReadFile::CopyFrom(const Call_ReadFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_ReadFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Call_ReadFile::Swap(Call_ReadFile* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_ReadFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_ReadFile_descriptor_;
  metadata.reflection = Call_ReadFile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_UpdateWeights::kWeightInfosFieldNumber;
#endif  // !_MSC_VER

Call_UpdateWeights::Call_UpdateWeights()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call.UpdateWeights)
}

void Call_UpdateWeights::InitAsDefaultInstance() {
}

Call_UpdateWeights::Call_UpdateWeights(const Call_UpdateWeights& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call.UpdateWeights)
}

void Call_UpdateWeights::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_UpdateWeights::~Call_UpdateWeights() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call.UpdateWeights)
  SharedDtor();
}

void Call_UpdateWeights::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Call_UpdateWeights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_UpdateWeights::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_UpdateWeights_descriptor_;
}

const Call_UpdateWeights& Call_UpdateWeights::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call_UpdateWeights* Call_UpdateWeights::default_instance_ = NULL;

Call_UpdateWeights* Call_UpdateWeights::New() const {
  return new Call_UpdateWeights;
}

void Call_UpdateWeights::Clear() {
  weight_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_UpdateWeights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call.UpdateWeights)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.WeightInfo weight_infos = 1;
      case 1: {
        if (tag == 10) {
         parse_weight_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weight_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_weight_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call.UpdateWeights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call.UpdateWeights)
  return false;
#undef DO_
}

void Call_UpdateWeights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call.UpdateWeights)
  // repeated .mesos.WeightInfo weight_infos = 1;
  for (int i = 0; i < this->weight_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->weight_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call.UpdateWeights)
}

::google::protobuf::uint8* Call_UpdateWeights::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call.UpdateWeights)
  // repeated .mesos.WeightInfo weight_infos = 1;
  for (int i = 0; i < this->weight_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->weight_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call.UpdateWeights)
  return target;
}

int Call_UpdateWeights::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.WeightInfo weight_infos = 1;
  total_size += 1 * this->weight_infos_size();
  for (int i = 0; i < this->weight_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weight_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_UpdateWeights::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_UpdateWeights* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_UpdateWeights*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_UpdateWeights::MergeFrom(const Call_UpdateWeights& from) {
  GOOGLE_CHECK_NE(&from, this);
  weight_infos_.MergeFrom(from.weight_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_UpdateWeights::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_UpdateWeights::CopyFrom(const Call_UpdateWeights& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_UpdateWeights::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->weight_infos())) return false;
  return true;
}

void Call_UpdateWeights::Swap(Call_UpdateWeights* other) {
  if (other != this) {
    weight_infos_.Swap(&other->weight_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_UpdateWeights::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_UpdateWeights_descriptor_;
  metadata.reflection = Call_UpdateWeights_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_ReserveResources::kSlaveIdFieldNumber;
const int Call_ReserveResources::kResourcesFieldNumber;
#endif  // !_MSC_VER

Call_ReserveResources::Call_ReserveResources()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call.ReserveResources)
}

void Call_ReserveResources::InitAsDefaultInstance() {
  slave_id_ = const_cast< ::mesos::SlaveID*>(&::mesos::SlaveID::default_instance());
}

Call_ReserveResources::Call_ReserveResources(const Call_ReserveResources& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call.ReserveResources)
}

void Call_ReserveResources::SharedCtor() {
  _cached_size_ = 0;
  slave_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_ReserveResources::~Call_ReserveResources() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call.ReserveResources)
  SharedDtor();
}

void Call_ReserveResources::SharedDtor() {
  if (this != default_instance_) {
    delete slave_id_;
  }
}

void Call_ReserveResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_ReserveResources::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_ReserveResources_descriptor_;
}

const Call_ReserveResources& Call_ReserveResources::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call_ReserveResources* Call_ReserveResources::default_instance_ = NULL;

Call_ReserveResources* Call_ReserveResources::New() const {
  return new Call_ReserveResources;
}

void Call_ReserveResources::Clear() {
  if (has_slave_id()) {
    if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
  }
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_ReserveResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call.ReserveResources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.SlaveID slave_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slave_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        break;
      }

      // repeated .mesos.Resource resources = 2;
      case 2: {
        if (tag == 18) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call.ReserveResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call.ReserveResources)
  return false;
#undef DO_
}

void Call_ReserveResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call.ReserveResources)
  // required .mesos.SlaveID slave_id = 1;
  if (has_slave_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slave_id(), output);
  }

  // repeated .mesos.Resource resources = 2;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resources(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call.ReserveResources)
}

::google::protobuf::uint8* Call_ReserveResources::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call.ReserveResources)
  // required .mesos.SlaveID slave_id = 1;
  if (has_slave_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slave_id(), target);
  }

  // repeated .mesos.Resource resources = 2;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resources(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call.ReserveResources)
  return target;
}

int Call_ReserveResources::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.SlaveID slave_id = 1;
    if (has_slave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slave_id());
    }

  }
  // repeated .mesos.Resource resources = 2;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_ReserveResources::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_ReserveResources* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_ReserveResources*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_ReserveResources::MergeFrom(const Call_ReserveResources& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slave_id()) {
      mutable_slave_id()->::mesos::SlaveID::MergeFrom(from.slave_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_ReserveResources::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_ReserveResources::CopyFrom(const Call_ReserveResources& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_ReserveResources::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_slave_id()) {
    if (!this->slave_id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->resources())) return false;
  return true;
}

void Call_ReserveResources::Swap(Call_ReserveResources* other) {
  if (other != this) {
    std::swap(slave_id_, other->slave_id_);
    resources_.Swap(&other->resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_ReserveResources::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_ReserveResources_descriptor_;
  metadata.reflection = Call_ReserveResources_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_UnreserveResources::kSlaveIdFieldNumber;
const int Call_UnreserveResources::kResourcesFieldNumber;
#endif  // !_MSC_VER

Call_UnreserveResources::Call_UnreserveResources()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call.UnreserveResources)
}

void Call_UnreserveResources::InitAsDefaultInstance() {
  slave_id_ = const_cast< ::mesos::SlaveID*>(&::mesos::SlaveID::default_instance());
}

Call_UnreserveResources::Call_UnreserveResources(const Call_UnreserveResources& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call.UnreserveResources)
}

void Call_UnreserveResources::SharedCtor() {
  _cached_size_ = 0;
  slave_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_UnreserveResources::~Call_UnreserveResources() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call.UnreserveResources)
  SharedDtor();
}

void Call_UnreserveResources::SharedDtor() {
  if (this != default_instance_) {
    delete slave_id_;
  }
}

void Call_UnreserveResources::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_UnreserveResources::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_UnreserveResources_descriptor_;
}

const Call_UnreserveResources& Call_UnreserveResources::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call_UnreserveResources* Call_UnreserveResources::default_instance_ = NULL;

Call_UnreserveResources* Call_UnreserveResources::New() const {
  return new Call_UnreserveResources;
}

void Call_UnreserveResources::Clear() {
  if (has_slave_id()) {
    if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
  }
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_UnreserveResources::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call.UnreserveResources)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.SlaveID slave_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slave_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        break;
      }

      // repeated .mesos.Resource resources = 2;
      case 2: {
        if (tag == 18) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call.UnreserveResources)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call.UnreserveResources)
  return false;
#undef DO_
}

void Call_UnreserveResources::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call.UnreserveResources)
  // required .mesos.SlaveID slave_id = 1;
  if (has_slave_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slave_id(), output);
  }

  // repeated .mesos.Resource resources = 2;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resources(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call.UnreserveResources)
}

::google::protobuf::uint8* Call_UnreserveResources::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call.UnreserveResources)
  // required .mesos.SlaveID slave_id = 1;
  if (has_slave_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slave_id(), target);
  }

  // repeated .mesos.Resource resources = 2;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resources(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call.UnreserveResources)
  return target;
}

int Call_UnreserveResources::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.SlaveID slave_id = 1;
    if (has_slave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slave_id());
    }

  }
  // repeated .mesos.Resource resources = 2;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_UnreserveResources::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_UnreserveResources* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_UnreserveResources*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_UnreserveResources::MergeFrom(const Call_UnreserveResources& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slave_id()) {
      mutable_slave_id()->::mesos::SlaveID::MergeFrom(from.slave_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_UnreserveResources::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_UnreserveResources::CopyFrom(const Call_UnreserveResources& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_UnreserveResources::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_slave_id()) {
    if (!this->slave_id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->resources())) return false;
  return true;
}

void Call_UnreserveResources::Swap(Call_UnreserveResources* other) {
  if (other != this) {
    std::swap(slave_id_, other->slave_id_);
    resources_.Swap(&other->resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_UnreserveResources::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_UnreserveResources_descriptor_;
  metadata.reflection = Call_UnreserveResources_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_CreateVolumes::kSlaveIdFieldNumber;
const int Call_CreateVolumes::kVolumesFieldNumber;
#endif  // !_MSC_VER

Call_CreateVolumes::Call_CreateVolumes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call.CreateVolumes)
}

void Call_CreateVolumes::InitAsDefaultInstance() {
  slave_id_ = const_cast< ::mesos::SlaveID*>(&::mesos::SlaveID::default_instance());
}

Call_CreateVolumes::Call_CreateVolumes(const Call_CreateVolumes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call.CreateVolumes)
}

void Call_CreateVolumes::SharedCtor() {
  _cached_size_ = 0;
  slave_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_CreateVolumes::~Call_CreateVolumes() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call.CreateVolumes)
  SharedDtor();
}

void Call_CreateVolumes::SharedDtor() {
  if (this != default_instance_) {
    delete slave_id_;
  }
}

void Call_CreateVolumes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_CreateVolumes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_CreateVolumes_descriptor_;
}

const Call_CreateVolumes& Call_CreateVolumes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call_CreateVolumes* Call_CreateVolumes::default_instance_ = NULL;

Call_CreateVolumes* Call_CreateVolumes::New() const {
  return new Call_CreateVolumes;
}

void Call_CreateVolumes::Clear() {
  if (has_slave_id()) {
    if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
  }
  volumes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_CreateVolumes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call.CreateVolumes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.SlaveID slave_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slave_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_volumes;
        break;
      }

      // repeated .mesos.Resource volumes = 2;
      case 2: {
        if (tag == 18) {
         parse_volumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volumes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_volumes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call.CreateVolumes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call.CreateVolumes)
  return false;
#undef DO_
}

void Call_CreateVolumes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call.CreateVolumes)
  // required .mesos.SlaveID slave_id = 1;
  if (has_slave_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slave_id(), output);
  }

  // repeated .mesos.Resource volumes = 2;
  for (int i = 0; i < this->volumes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->volumes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call.CreateVolumes)
}

::google::protobuf::uint8* Call_CreateVolumes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call.CreateVolumes)
  // required .mesos.SlaveID slave_id = 1;
  if (has_slave_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slave_id(), target);
  }

  // repeated .mesos.Resource volumes = 2;
  for (int i = 0; i < this->volumes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->volumes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call.CreateVolumes)
  return target;
}

int Call_CreateVolumes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.SlaveID slave_id = 1;
    if (has_slave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slave_id());
    }

  }
  // repeated .mesos.Resource volumes = 2;
  total_size += 1 * this->volumes_size();
  for (int i = 0; i < this->volumes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->volumes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_CreateVolumes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_CreateVolumes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_CreateVolumes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_CreateVolumes::MergeFrom(const Call_CreateVolumes& from) {
  GOOGLE_CHECK_NE(&from, this);
  volumes_.MergeFrom(from.volumes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slave_id()) {
      mutable_slave_id()->::mesos::SlaveID::MergeFrom(from.slave_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_CreateVolumes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_CreateVolumes::CopyFrom(const Call_CreateVolumes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_CreateVolumes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_slave_id()) {
    if (!this->slave_id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->volumes())) return false;
  return true;
}

void Call_CreateVolumes::Swap(Call_CreateVolumes* other) {
  if (other != this) {
    std::swap(slave_id_, other->slave_id_);
    volumes_.Swap(&other->volumes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_CreateVolumes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_CreateVolumes_descriptor_;
  metadata.reflection = Call_CreateVolumes_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_DestroyVolumes::kSlaveIdFieldNumber;
const int Call_DestroyVolumes::kVolumesFieldNumber;
#endif  // !_MSC_VER

Call_DestroyVolumes::Call_DestroyVolumes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call.DestroyVolumes)
}

void Call_DestroyVolumes::InitAsDefaultInstance() {
  slave_id_ = const_cast< ::mesos::SlaveID*>(&::mesos::SlaveID::default_instance());
}

Call_DestroyVolumes::Call_DestroyVolumes(const Call_DestroyVolumes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call.DestroyVolumes)
}

void Call_DestroyVolumes::SharedCtor() {
  _cached_size_ = 0;
  slave_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_DestroyVolumes::~Call_DestroyVolumes() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call.DestroyVolumes)
  SharedDtor();
}

void Call_DestroyVolumes::SharedDtor() {
  if (this != default_instance_) {
    delete slave_id_;
  }
}

void Call_DestroyVolumes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_DestroyVolumes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_DestroyVolumes_descriptor_;
}

const Call_DestroyVolumes& Call_DestroyVolumes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call_DestroyVolumes* Call_DestroyVolumes::default_instance_ = NULL;

Call_DestroyVolumes* Call_DestroyVolumes::New() const {
  return new Call_DestroyVolumes;
}

void Call_DestroyVolumes::Clear() {
  if (has_slave_id()) {
    if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
  }
  volumes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_DestroyVolumes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call.DestroyVolumes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.SlaveID slave_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slave_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_volumes;
        break;
      }

      // repeated .mesos.Resource volumes = 2;
      case 2: {
        if (tag == 18) {
         parse_volumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volumes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_volumes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call.DestroyVolumes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call.DestroyVolumes)
  return false;
#undef DO_
}

void Call_DestroyVolumes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call.DestroyVolumes)
  // required .mesos.SlaveID slave_id = 1;
  if (has_slave_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slave_id(), output);
  }

  // repeated .mesos.Resource volumes = 2;
  for (int i = 0; i < this->volumes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->volumes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call.DestroyVolumes)
}

::google::protobuf::uint8* Call_DestroyVolumes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call.DestroyVolumes)
  // required .mesos.SlaveID slave_id = 1;
  if (has_slave_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slave_id(), target);
  }

  // repeated .mesos.Resource volumes = 2;
  for (int i = 0; i < this->volumes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->volumes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call.DestroyVolumes)
  return target;
}

int Call_DestroyVolumes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.SlaveID slave_id = 1;
    if (has_slave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slave_id());
    }

  }
  // repeated .mesos.Resource volumes = 2;
  total_size += 1 * this->volumes_size();
  for (int i = 0; i < this->volumes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->volumes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_DestroyVolumes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_DestroyVolumes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_DestroyVolumes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_DestroyVolumes::MergeFrom(const Call_DestroyVolumes& from) {
  GOOGLE_CHECK_NE(&from, this);
  volumes_.MergeFrom(from.volumes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slave_id()) {
      mutable_slave_id()->::mesos::SlaveID::MergeFrom(from.slave_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_DestroyVolumes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_DestroyVolumes::CopyFrom(const Call_DestroyVolumes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_DestroyVolumes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_slave_id()) {
    if (!this->slave_id().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->volumes())) return false;
  return true;
}

void Call_DestroyVolumes::Swap(Call_DestroyVolumes* other) {
  if (other != this) {
    std::swap(slave_id_, other->slave_id_);
    volumes_.Swap(&other->volumes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_DestroyVolumes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_DestroyVolumes_descriptor_;
  metadata.reflection = Call_DestroyVolumes_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_UpdateMaintenanceSchedule::kScheduleFieldNumber;
#endif  // !_MSC_VER

Call_UpdateMaintenanceSchedule::Call_UpdateMaintenanceSchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call.UpdateMaintenanceSchedule)
}

void Call_UpdateMaintenanceSchedule::InitAsDefaultInstance() {
  schedule_ = const_cast< ::mesos::maintenance::Schedule*>(&::mesos::maintenance::Schedule::default_instance());
}

Call_UpdateMaintenanceSchedule::Call_UpdateMaintenanceSchedule(const Call_UpdateMaintenanceSchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call.UpdateMaintenanceSchedule)
}

void Call_UpdateMaintenanceSchedule::SharedCtor() {
  _cached_size_ = 0;
  schedule_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_UpdateMaintenanceSchedule::~Call_UpdateMaintenanceSchedule() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call.UpdateMaintenanceSchedule)
  SharedDtor();
}

void Call_UpdateMaintenanceSchedule::SharedDtor() {
  if (this != default_instance_) {
    delete schedule_;
  }
}

void Call_UpdateMaintenanceSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_UpdateMaintenanceSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_UpdateMaintenanceSchedule_descriptor_;
}

const Call_UpdateMaintenanceSchedule& Call_UpdateMaintenanceSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call_UpdateMaintenanceSchedule* Call_UpdateMaintenanceSchedule::default_instance_ = NULL;

Call_UpdateMaintenanceSchedule* Call_UpdateMaintenanceSchedule::New() const {
  return new Call_UpdateMaintenanceSchedule;
}

void Call_UpdateMaintenanceSchedule::Clear() {
  if (has_schedule()) {
    if (schedule_ != NULL) schedule_->::mesos::maintenance::Schedule::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_UpdateMaintenanceSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call.UpdateMaintenanceSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.maintenance.Schedule schedule = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schedule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call.UpdateMaintenanceSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call.UpdateMaintenanceSchedule)
  return false;
#undef DO_
}

void Call_UpdateMaintenanceSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call.UpdateMaintenanceSchedule)
  // required .mesos.maintenance.Schedule schedule = 1;
  if (has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->schedule(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call.UpdateMaintenanceSchedule)
}

::google::protobuf::uint8* Call_UpdateMaintenanceSchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call.UpdateMaintenanceSchedule)
  // required .mesos.maintenance.Schedule schedule = 1;
  if (has_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->schedule(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call.UpdateMaintenanceSchedule)
  return target;
}

int Call_UpdateMaintenanceSchedule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.maintenance.Schedule schedule = 1;
    if (has_schedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schedule());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_UpdateMaintenanceSchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_UpdateMaintenanceSchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_UpdateMaintenanceSchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_UpdateMaintenanceSchedule::MergeFrom(const Call_UpdateMaintenanceSchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schedule()) {
      mutable_schedule()->::mesos::maintenance::Schedule::MergeFrom(from.schedule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_UpdateMaintenanceSchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_UpdateMaintenanceSchedule::CopyFrom(const Call_UpdateMaintenanceSchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_UpdateMaintenanceSchedule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_schedule()) {
    if (!this->schedule().IsInitialized()) return false;
  }
  return true;
}

void Call_UpdateMaintenanceSchedule::Swap(Call_UpdateMaintenanceSchedule* other) {
  if (other != this) {
    std::swap(schedule_, other->schedule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_UpdateMaintenanceSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_UpdateMaintenanceSchedule_descriptor_;
  metadata.reflection = Call_UpdateMaintenanceSchedule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_StartMaintenance::kMachinesFieldNumber;
#endif  // !_MSC_VER

Call_StartMaintenance::Call_StartMaintenance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call.StartMaintenance)
}

void Call_StartMaintenance::InitAsDefaultInstance() {
}

Call_StartMaintenance::Call_StartMaintenance(const Call_StartMaintenance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call.StartMaintenance)
}

void Call_StartMaintenance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_StartMaintenance::~Call_StartMaintenance() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call.StartMaintenance)
  SharedDtor();
}

void Call_StartMaintenance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Call_StartMaintenance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_StartMaintenance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_StartMaintenance_descriptor_;
}

const Call_StartMaintenance& Call_StartMaintenance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call_StartMaintenance* Call_StartMaintenance::default_instance_ = NULL;

Call_StartMaintenance* Call_StartMaintenance::New() const {
  return new Call_StartMaintenance;
}

void Call_StartMaintenance::Clear() {
  machines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_StartMaintenance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call.StartMaintenance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.MachineID machines = 1;
      case 1: {
        if (tag == 10) {
         parse_machines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_machines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_machines;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call.StartMaintenance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call.StartMaintenance)
  return false;
#undef DO_
}

void Call_StartMaintenance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call.StartMaintenance)
  // repeated .mesos.MachineID machines = 1;
  for (int i = 0; i < this->machines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machines(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call.StartMaintenance)
}

::google::protobuf::uint8* Call_StartMaintenance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call.StartMaintenance)
  // repeated .mesos.MachineID machines = 1;
  for (int i = 0; i < this->machines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machines(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call.StartMaintenance)
  return target;
}

int Call_StartMaintenance::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.MachineID machines = 1;
  total_size += 1 * this->machines_size();
  for (int i = 0; i < this->machines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->machines(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_StartMaintenance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_StartMaintenance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_StartMaintenance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_StartMaintenance::MergeFrom(const Call_StartMaintenance& from) {
  GOOGLE_CHECK_NE(&from, this);
  machines_.MergeFrom(from.machines_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_StartMaintenance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_StartMaintenance::CopyFrom(const Call_StartMaintenance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_StartMaintenance::IsInitialized() const {

  return true;
}

void Call_StartMaintenance::Swap(Call_StartMaintenance* other) {
  if (other != this) {
    machines_.Swap(&other->machines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_StartMaintenance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_StartMaintenance_descriptor_;
  metadata.reflection = Call_StartMaintenance_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_StopMaintenance::kMachinesFieldNumber;
#endif  // !_MSC_VER

Call_StopMaintenance::Call_StopMaintenance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call.StopMaintenance)
}

void Call_StopMaintenance::InitAsDefaultInstance() {
}

Call_StopMaintenance::Call_StopMaintenance(const Call_StopMaintenance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call.StopMaintenance)
}

void Call_StopMaintenance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_StopMaintenance::~Call_StopMaintenance() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call.StopMaintenance)
  SharedDtor();
}

void Call_StopMaintenance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Call_StopMaintenance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_StopMaintenance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_StopMaintenance_descriptor_;
}

const Call_StopMaintenance& Call_StopMaintenance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call_StopMaintenance* Call_StopMaintenance::default_instance_ = NULL;

Call_StopMaintenance* Call_StopMaintenance::New() const {
  return new Call_StopMaintenance;
}

void Call_StopMaintenance::Clear() {
  machines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_StopMaintenance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call.StopMaintenance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.MachineID machines = 1;
      case 1: {
        if (tag == 10) {
         parse_machines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_machines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_machines;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call.StopMaintenance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call.StopMaintenance)
  return false;
#undef DO_
}

void Call_StopMaintenance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call.StopMaintenance)
  // repeated .mesos.MachineID machines = 1;
  for (int i = 0; i < this->machines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machines(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call.StopMaintenance)
}

::google::protobuf::uint8* Call_StopMaintenance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call.StopMaintenance)
  // repeated .mesos.MachineID machines = 1;
  for (int i = 0; i < this->machines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machines(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call.StopMaintenance)
  return target;
}

int Call_StopMaintenance::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.MachineID machines = 1;
  total_size += 1 * this->machines_size();
  for (int i = 0; i < this->machines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->machines(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_StopMaintenance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_StopMaintenance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_StopMaintenance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_StopMaintenance::MergeFrom(const Call_StopMaintenance& from) {
  GOOGLE_CHECK_NE(&from, this);
  machines_.MergeFrom(from.machines_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_StopMaintenance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_StopMaintenance::CopyFrom(const Call_StopMaintenance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_StopMaintenance::IsInitialized() const {

  return true;
}

void Call_StopMaintenance::Swap(Call_StopMaintenance* other) {
  if (other != this) {
    machines_.Swap(&other->machines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_StopMaintenance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_StopMaintenance_descriptor_;
  metadata.reflection = Call_StopMaintenance_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_SetQuota::kQuotaRequestFieldNumber;
#endif  // !_MSC_VER

Call_SetQuota::Call_SetQuota()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call.SetQuota)
}

void Call_SetQuota::InitAsDefaultInstance() {
  quota_request_ = const_cast< ::mesos::quota::QuotaRequest*>(&::mesos::quota::QuotaRequest::default_instance());
}

Call_SetQuota::Call_SetQuota(const Call_SetQuota& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call.SetQuota)
}

void Call_SetQuota::SharedCtor() {
  _cached_size_ = 0;
  quota_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_SetQuota::~Call_SetQuota() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call.SetQuota)
  SharedDtor();
}

void Call_SetQuota::SharedDtor() {
  if (this != default_instance_) {
    delete quota_request_;
  }
}

void Call_SetQuota::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_SetQuota::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_SetQuota_descriptor_;
}

const Call_SetQuota& Call_SetQuota::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call_SetQuota* Call_SetQuota::default_instance_ = NULL;

Call_SetQuota* Call_SetQuota::New() const {
  return new Call_SetQuota;
}

void Call_SetQuota::Clear() {
  if (has_quota_request()) {
    if (quota_request_ != NULL) quota_request_->::mesos::quota::QuotaRequest::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_SetQuota::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call.SetQuota)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.quota.QuotaRequest quota_request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quota_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call.SetQuota)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call.SetQuota)
  return false;
#undef DO_
}

void Call_SetQuota::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call.SetQuota)
  // required .mesos.quota.QuotaRequest quota_request = 1;
  if (has_quota_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quota_request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call.SetQuota)
}

::google::protobuf::uint8* Call_SetQuota::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call.SetQuota)
  // required .mesos.quota.QuotaRequest quota_request = 1;
  if (has_quota_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quota_request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call.SetQuota)
  return target;
}

int Call_SetQuota::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.quota.QuotaRequest quota_request = 1;
    if (has_quota_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quota_request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_SetQuota::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_SetQuota* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_SetQuota*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_SetQuota::MergeFrom(const Call_SetQuota& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quota_request()) {
      mutable_quota_request()->::mesos::quota::QuotaRequest::MergeFrom(from.quota_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_SetQuota::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_SetQuota::CopyFrom(const Call_SetQuota& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_SetQuota::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_quota_request()) {
    if (!this->quota_request().IsInitialized()) return false;
  }
  return true;
}

void Call_SetQuota::Swap(Call_SetQuota* other) {
  if (other != this) {
    std::swap(quota_request_, other->quota_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_SetQuota::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_SetQuota_descriptor_;
  metadata.reflection = Call_SetQuota_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call_RemoveQuota::kRoleFieldNumber;
#endif  // !_MSC_VER

Call_RemoveQuota::Call_RemoveQuota()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call.RemoveQuota)
}

void Call_RemoveQuota::InitAsDefaultInstance() {
}

Call_RemoveQuota::Call_RemoveQuota(const Call_RemoveQuota& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call.RemoveQuota)
}

void Call_RemoveQuota::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  role_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call_RemoveQuota::~Call_RemoveQuota() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call.RemoveQuota)
  SharedDtor();
}

void Call_RemoveQuota::SharedDtor() {
  if (role_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete role_;
  }
  if (this != default_instance_) {
  }
}

void Call_RemoveQuota::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call_RemoveQuota::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_RemoveQuota_descriptor_;
}

const Call_RemoveQuota& Call_RemoveQuota::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call_RemoveQuota* Call_RemoveQuota::default_instance_ = NULL;

Call_RemoveQuota* Call_RemoveQuota::New() const {
  return new Call_RemoveQuota;
}

void Call_RemoveQuota::Clear() {
  if (has_role()) {
    if (role_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      role_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call_RemoveQuota::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call.RemoveQuota)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string role = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "role");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call.RemoveQuota)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call.RemoveQuota)
  return false;
#undef DO_
}

void Call_RemoveQuota::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call.RemoveQuota)
  // required string role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->role(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call.RemoveQuota)
}

::google::protobuf::uint8* Call_RemoveQuota::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call.RemoveQuota)
  // required string role = 1;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->role(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call.RemoveQuota)
  return target;
}

int Call_RemoveQuota::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call_RemoveQuota::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call_RemoveQuota* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call_RemoveQuota*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call_RemoveQuota::MergeFrom(const Call_RemoveQuota& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role()) {
      set_role(from.role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call_RemoveQuota::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call_RemoveQuota::CopyFrom(const Call_RemoveQuota& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call_RemoveQuota::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Call_RemoveQuota::Swap(Call_RemoveQuota* other) {
  if (other != this) {
    std::swap(role_, other->role_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call_RemoveQuota::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_RemoveQuota_descriptor_;
  metadata.reflection = Call_RemoveQuota_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Call::kTypeFieldNumber;
const int Call::kGetMetricsFieldNumber;
const int Call::kSetLoggingLevelFieldNumber;
const int Call::kListFilesFieldNumber;
const int Call::kReadFileFieldNumber;
const int Call::kUpdateWeightsFieldNumber;
const int Call::kReserveResourcesFieldNumber;
const int Call::kUnreserveResourcesFieldNumber;
const int Call::kCreateVolumesFieldNumber;
const int Call::kDestroyVolumesFieldNumber;
const int Call::kUpdateMaintenanceScheduleFieldNumber;
const int Call::kStartMaintenanceFieldNumber;
const int Call::kStopMaintenanceFieldNumber;
const int Call::kSetQuotaFieldNumber;
const int Call::kRemoveQuotaFieldNumber;
#endif  // !_MSC_VER

Call::Call()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Call)
}

void Call::InitAsDefaultInstance() {
  get_metrics_ = const_cast< ::mesos::master_p::Call_GetMetrics*>(&::mesos::master_p::Call_GetMetrics::default_instance());
  set_logging_level_ = const_cast< ::mesos::master_p::Call_SetLoggingLevel*>(&::mesos::master_p::Call_SetLoggingLevel::default_instance());
  list_files_ = const_cast< ::mesos::master_p::Call_ListFiles*>(&::mesos::master_p::Call_ListFiles::default_instance());
  read_file_ = const_cast< ::mesos::master_p::Call_ReadFile*>(&::mesos::master_p::Call_ReadFile::default_instance());
  update_weights_ = const_cast< ::mesos::master_p::Call_UpdateWeights*>(&::mesos::master_p::Call_UpdateWeights::default_instance());
  reserve_resources_ = const_cast< ::mesos::master_p::Call_ReserveResources*>(&::mesos::master_p::Call_ReserveResources::default_instance());
  unreserve_resources_ = const_cast< ::mesos::master_p::Call_UnreserveResources*>(&::mesos::master_p::Call_UnreserveResources::default_instance());
  create_volumes_ = const_cast< ::mesos::master_p::Call_CreateVolumes*>(&::mesos::master_p::Call_CreateVolumes::default_instance());
  destroy_volumes_ = const_cast< ::mesos::master_p::Call_DestroyVolumes*>(&::mesos::master_p::Call_DestroyVolumes::default_instance());
  update_maintenance_schedule_ = const_cast< ::mesos::master_p::Call_UpdateMaintenanceSchedule*>(&::mesos::master_p::Call_UpdateMaintenanceSchedule::default_instance());
  start_maintenance_ = const_cast< ::mesos::master_p::Call_StartMaintenance*>(&::mesos::master_p::Call_StartMaintenance::default_instance());
  stop_maintenance_ = const_cast< ::mesos::master_p::Call_StopMaintenance*>(&::mesos::master_p::Call_StopMaintenance::default_instance());
  set_quota_ = const_cast< ::mesos::master_p::Call_SetQuota*>(&::mesos::master_p::Call_SetQuota::default_instance());
  remove_quota_ = const_cast< ::mesos::master_p::Call_RemoveQuota*>(&::mesos::master_p::Call_RemoveQuota::default_instance());
}

Call::Call(const Call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Call)
}

void Call::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  get_metrics_ = NULL;
  set_logging_level_ = NULL;
  list_files_ = NULL;
  read_file_ = NULL;
  update_weights_ = NULL;
  reserve_resources_ = NULL;
  unreserve_resources_ = NULL;
  create_volumes_ = NULL;
  destroy_volumes_ = NULL;
  update_maintenance_schedule_ = NULL;
  start_maintenance_ = NULL;
  stop_maintenance_ = NULL;
  set_quota_ = NULL;
  remove_quota_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Call::~Call() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Call)
  SharedDtor();
}

void Call::SharedDtor() {
  if (this != default_instance_) {
    delete get_metrics_;
    delete set_logging_level_;
    delete list_files_;
    delete read_file_;
    delete update_weights_;
    delete reserve_resources_;
    delete unreserve_resources_;
    delete create_volumes_;
    delete destroy_volumes_;
    delete update_maintenance_schedule_;
    delete start_maintenance_;
    delete stop_maintenance_;
    delete set_quota_;
    delete remove_quota_;
  }
}

void Call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Call_descriptor_;
}

const Call& Call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Call* Call::default_instance_ = NULL;

Call* Call::New() const {
  return new Call;
}

void Call::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = 0;
    if (has_get_metrics()) {
      if (get_metrics_ != NULL) get_metrics_->::mesos::master_p::Call_GetMetrics::Clear();
    }
    if (has_set_logging_level()) {
      if (set_logging_level_ != NULL) set_logging_level_->::mesos::master_p::Call_SetLoggingLevel::Clear();
    }
    if (has_list_files()) {
      if (list_files_ != NULL) list_files_->::mesos::master_p::Call_ListFiles::Clear();
    }
    if (has_read_file()) {
      if (read_file_ != NULL) read_file_->::mesos::master_p::Call_ReadFile::Clear();
    }
    if (has_update_weights()) {
      if (update_weights_ != NULL) update_weights_->::mesos::master_p::Call_UpdateWeights::Clear();
    }
    if (has_reserve_resources()) {
      if (reserve_resources_ != NULL) reserve_resources_->::mesos::master_p::Call_ReserveResources::Clear();
    }
    if (has_unreserve_resources()) {
      if (unreserve_resources_ != NULL) unreserve_resources_->::mesos::master_p::Call_UnreserveResources::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_create_volumes()) {
      if (create_volumes_ != NULL) create_volumes_->::mesos::master_p::Call_CreateVolumes::Clear();
    }
    if (has_destroy_volumes()) {
      if (destroy_volumes_ != NULL) destroy_volumes_->::mesos::master_p::Call_DestroyVolumes::Clear();
    }
    if (has_update_maintenance_schedule()) {
      if (update_maintenance_schedule_ != NULL) update_maintenance_schedule_->::mesos::master_p::Call_UpdateMaintenanceSchedule::Clear();
    }
    if (has_start_maintenance()) {
      if (start_maintenance_ != NULL) start_maintenance_->::mesos::master_p::Call_StartMaintenance::Clear();
    }
    if (has_stop_maintenance()) {
      if (stop_maintenance_ != NULL) stop_maintenance_->::mesos::master_p::Call_StopMaintenance::Clear();
    }
    if (has_set_quota()) {
      if (set_quota_ != NULL) set_quota_->::mesos::master_p::Call_SetQuota::Clear();
    }
    if (has_remove_quota()) {
      if (remove_quota_ != NULL) remove_quota_->::mesos::master_p::Call_RemoveQuota::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Call)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.master_p.Call.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::master_p::Call_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::master_p::Call_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get_metrics;
        break;
      }

      // optional .mesos.master_p.Call.GetMetrics get_metrics = 2;
      case 2: {
        if (tag == 18) {
         parse_get_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_set_logging_level;
        break;
      }

      // optional .mesos.master_p.Call.SetLoggingLevel set_logging_level = 3;
      case 3: {
        if (tag == 26) {
         parse_set_logging_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_logging_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_list_files;
        break;
      }

      // optional .mesos.master_p.Call.ListFiles list_files = 4;
      case 4: {
        if (tag == 34) {
         parse_list_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_read_file;
        break;
      }

      // optional .mesos.master_p.Call.ReadFile read_file = 5;
      case 5: {
        if (tag == 42) {
         parse_read_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_update_weights;
        break;
      }

      // optional .mesos.master_p.Call.UpdateWeights update_weights = 6;
      case 6: {
        if (tag == 50) {
         parse_update_weights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_weights()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_reserve_resources;
        break;
      }

      // optional .mesos.master_p.Call.ReserveResources reserve_resources = 7;
      case 7: {
        if (tag == 58) {
         parse_reserve_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reserve_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_unreserve_resources;
        break;
      }

      // optional .mesos.master_p.Call.UnreserveResources unreserve_resources = 8;
      case 8: {
        if (tag == 66) {
         parse_unreserve_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unreserve_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_create_volumes;
        break;
      }

      // optional .mesos.master_p.Call.CreateVolumes create_volumes = 9;
      case 9: {
        if (tag == 74) {
         parse_create_volumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_volumes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_destroy_volumes;
        break;
      }

      // optional .mesos.master_p.Call.DestroyVolumes destroy_volumes = 10;
      case 10: {
        if (tag == 82) {
         parse_destroy_volumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroy_volumes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_update_maintenance_schedule;
        break;
      }

      // optional .mesos.master_p.Call.UpdateMaintenanceSchedule update_maintenance_schedule = 11;
      case 11: {
        if (tag == 90) {
         parse_update_maintenance_schedule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_maintenance_schedule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_start_maintenance;
        break;
      }

      // optional .mesos.master_p.Call.StartMaintenance start_maintenance = 12;
      case 12: {
        if (tag == 98) {
         parse_start_maintenance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_maintenance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_stop_maintenance;
        break;
      }

      // optional .mesos.master_p.Call.StopMaintenance stop_maintenance = 13;
      case 13: {
        if (tag == 106) {
         parse_stop_maintenance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_maintenance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_set_quota;
        break;
      }

      // optional .mesos.master_p.Call.SetQuota set_quota = 14;
      case 14: {
        if (tag == 114) {
         parse_set_quota:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_quota()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_remove_quota;
        break;
      }

      // optional .mesos.master_p.Call.RemoveQuota remove_quota = 15;
      case 15: {
        if (tag == 122) {
         parse_remove_quota:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_quota()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Call)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Call)
  return false;
#undef DO_
}

void Call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Call)
  // optional .mesos.master_p.Call.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .mesos.master_p.Call.GetMetrics get_metrics = 2;
  if (has_get_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get_metrics(), output);
  }

  // optional .mesos.master_p.Call.SetLoggingLevel set_logging_level = 3;
  if (has_set_logging_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->set_logging_level(), output);
  }

  // optional .mesos.master_p.Call.ListFiles list_files = 4;
  if (has_list_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list_files(), output);
  }

  // optional .mesos.master_p.Call.ReadFile read_file = 5;
  if (has_read_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->read_file(), output);
  }

  // optional .mesos.master_p.Call.UpdateWeights update_weights = 6;
  if (has_update_weights()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->update_weights(), output);
  }

  // optional .mesos.master_p.Call.ReserveResources reserve_resources = 7;
  if (has_reserve_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->reserve_resources(), output);
  }

  // optional .mesos.master_p.Call.UnreserveResources unreserve_resources = 8;
  if (has_unreserve_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->unreserve_resources(), output);
  }

  // optional .mesos.master_p.Call.CreateVolumes create_volumes = 9;
  if (has_create_volumes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->create_volumes(), output);
  }

  // optional .mesos.master_p.Call.DestroyVolumes destroy_volumes = 10;
  if (has_destroy_volumes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->destroy_volumes(), output);
  }

  // optional .mesos.master_p.Call.UpdateMaintenanceSchedule update_maintenance_schedule = 11;
  if (has_update_maintenance_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->update_maintenance_schedule(), output);
  }

  // optional .mesos.master_p.Call.StartMaintenance start_maintenance = 12;
  if (has_start_maintenance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->start_maintenance(), output);
  }

  // optional .mesos.master_p.Call.StopMaintenance stop_maintenance = 13;
  if (has_stop_maintenance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->stop_maintenance(), output);
  }

  // optional .mesos.master_p.Call.SetQuota set_quota = 14;
  if (has_set_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->set_quota(), output);
  }

  // optional .mesos.master_p.Call.RemoveQuota remove_quota = 15;
  if (has_remove_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->remove_quota(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Call)
}

::google::protobuf::uint8* Call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Call)
  // optional .mesos.master_p.Call.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .mesos.master_p.Call.GetMetrics get_metrics = 2;
  if (has_get_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get_metrics(), target);
  }

  // optional .mesos.master_p.Call.SetLoggingLevel set_logging_level = 3;
  if (has_set_logging_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->set_logging_level(), target);
  }

  // optional .mesos.master_p.Call.ListFiles list_files = 4;
  if (has_list_files()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list_files(), target);
  }

  // optional .mesos.master_p.Call.ReadFile read_file = 5;
  if (has_read_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->read_file(), target);
  }

  // optional .mesos.master_p.Call.UpdateWeights update_weights = 6;
  if (has_update_weights()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->update_weights(), target);
  }

  // optional .mesos.master_p.Call.ReserveResources reserve_resources = 7;
  if (has_reserve_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->reserve_resources(), target);
  }

  // optional .mesos.master_p.Call.UnreserveResources unreserve_resources = 8;
  if (has_unreserve_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->unreserve_resources(), target);
  }

  // optional .mesos.master_p.Call.CreateVolumes create_volumes = 9;
  if (has_create_volumes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->create_volumes(), target);
  }

  // optional .mesos.master_p.Call.DestroyVolumes destroy_volumes = 10;
  if (has_destroy_volumes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->destroy_volumes(), target);
  }

  // optional .mesos.master_p.Call.UpdateMaintenanceSchedule update_maintenance_schedule = 11;
  if (has_update_maintenance_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->update_maintenance_schedule(), target);
  }

  // optional .mesos.master_p.Call.StartMaintenance start_maintenance = 12;
  if (has_start_maintenance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->start_maintenance(), target);
  }

  // optional .mesos.master_p.Call.StopMaintenance stop_maintenance = 13;
  if (has_stop_maintenance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->stop_maintenance(), target);
  }

  // optional .mesos.master_p.Call.SetQuota set_quota = 14;
  if (has_set_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->set_quota(), target);
  }

  // optional .mesos.master_p.Call.RemoveQuota remove_quota = 15;
  if (has_remove_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->remove_quota(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Call)
  return target;
}

int Call::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.master_p.Call.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .mesos.master_p.Call.GetMetrics get_metrics = 2;
    if (has_get_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_metrics());
    }

    // optional .mesos.master_p.Call.SetLoggingLevel set_logging_level = 3;
    if (has_set_logging_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_logging_level());
    }

    // optional .mesos.master_p.Call.ListFiles list_files = 4;
    if (has_list_files()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_files());
    }

    // optional .mesos.master_p.Call.ReadFile read_file = 5;
    if (has_read_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_file());
    }

    // optional .mesos.master_p.Call.UpdateWeights update_weights = 6;
    if (has_update_weights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_weights());
    }

    // optional .mesos.master_p.Call.ReserveResources reserve_resources = 7;
    if (has_reserve_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reserve_resources());
    }

    // optional .mesos.master_p.Call.UnreserveResources unreserve_resources = 8;
    if (has_unreserve_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unreserve_resources());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .mesos.master_p.Call.CreateVolumes create_volumes = 9;
    if (has_create_volumes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_volumes());
    }

    // optional .mesos.master_p.Call.DestroyVolumes destroy_volumes = 10;
    if (has_destroy_volumes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destroy_volumes());
    }

    // optional .mesos.master_p.Call.UpdateMaintenanceSchedule update_maintenance_schedule = 11;
    if (has_update_maintenance_schedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_maintenance_schedule());
    }

    // optional .mesos.master_p.Call.StartMaintenance start_maintenance = 12;
    if (has_start_maintenance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_maintenance());
    }

    // optional .mesos.master_p.Call.StopMaintenance stop_maintenance = 13;
    if (has_stop_maintenance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_maintenance());
    }

    // optional .mesos.master_p.Call.SetQuota set_quota = 14;
    if (has_set_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_quota());
    }

    // optional .mesos.master_p.Call.RemoveQuota remove_quota = 15;
    if (has_remove_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remove_quota());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Call::MergeFrom(const Call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_get_metrics()) {
      mutable_get_metrics()->::mesos::master_p::Call_GetMetrics::MergeFrom(from.get_metrics());
    }
    if (from.has_set_logging_level()) {
      mutable_set_logging_level()->::mesos::master_p::Call_SetLoggingLevel::MergeFrom(from.set_logging_level());
    }
    if (from.has_list_files()) {
      mutable_list_files()->::mesos::master_p::Call_ListFiles::MergeFrom(from.list_files());
    }
    if (from.has_read_file()) {
      mutable_read_file()->::mesos::master_p::Call_ReadFile::MergeFrom(from.read_file());
    }
    if (from.has_update_weights()) {
      mutable_update_weights()->::mesos::master_p::Call_UpdateWeights::MergeFrom(from.update_weights());
    }
    if (from.has_reserve_resources()) {
      mutable_reserve_resources()->::mesos::master_p::Call_ReserveResources::MergeFrom(from.reserve_resources());
    }
    if (from.has_unreserve_resources()) {
      mutable_unreserve_resources()->::mesos::master_p::Call_UnreserveResources::MergeFrom(from.unreserve_resources());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_create_volumes()) {
      mutable_create_volumes()->::mesos::master_p::Call_CreateVolumes::MergeFrom(from.create_volumes());
    }
    if (from.has_destroy_volumes()) {
      mutable_destroy_volumes()->::mesos::master_p::Call_DestroyVolumes::MergeFrom(from.destroy_volumes());
    }
    if (from.has_update_maintenance_schedule()) {
      mutable_update_maintenance_schedule()->::mesos::master_p::Call_UpdateMaintenanceSchedule::MergeFrom(from.update_maintenance_schedule());
    }
    if (from.has_start_maintenance()) {
      mutable_start_maintenance()->::mesos::master_p::Call_StartMaintenance::MergeFrom(from.start_maintenance());
    }
    if (from.has_stop_maintenance()) {
      mutable_stop_maintenance()->::mesos::master_p::Call_StopMaintenance::MergeFrom(from.stop_maintenance());
    }
    if (from.has_set_quota()) {
      mutable_set_quota()->::mesos::master_p::Call_SetQuota::MergeFrom(from.set_quota());
    }
    if (from.has_remove_quota()) {
      mutable_remove_quota()->::mesos::master_p::Call_RemoveQuota::MergeFrom(from.remove_quota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Call::CopyFrom(const Call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Call::IsInitialized() const {

  if (has_get_metrics()) {
    if (!this->get_metrics().IsInitialized()) return false;
  }
  if (has_set_logging_level()) {
    if (!this->set_logging_level().IsInitialized()) return false;
  }
  if (has_list_files()) {
    if (!this->list_files().IsInitialized()) return false;
  }
  if (has_read_file()) {
    if (!this->read_file().IsInitialized()) return false;
  }
  if (has_update_weights()) {
    if (!this->update_weights().IsInitialized()) return false;
  }
  if (has_reserve_resources()) {
    if (!this->reserve_resources().IsInitialized()) return false;
  }
  if (has_unreserve_resources()) {
    if (!this->unreserve_resources().IsInitialized()) return false;
  }
  if (has_create_volumes()) {
    if (!this->create_volumes().IsInitialized()) return false;
  }
  if (has_destroy_volumes()) {
    if (!this->destroy_volumes().IsInitialized()) return false;
  }
  if (has_update_maintenance_schedule()) {
    if (!this->update_maintenance_schedule().IsInitialized()) return false;
  }
  if (has_set_quota()) {
    if (!this->set_quota().IsInitialized()) return false;
  }
  if (has_remove_quota()) {
    if (!this->remove_quota().IsInitialized()) return false;
  }
  return true;
}

void Call::Swap(Call* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(get_metrics_, other->get_metrics_);
    std::swap(set_logging_level_, other->set_logging_level_);
    std::swap(list_files_, other->list_files_);
    std::swap(read_file_, other->read_file_);
    std::swap(update_weights_, other->update_weights_);
    std::swap(reserve_resources_, other->reserve_resources_);
    std::swap(unreserve_resources_, other->unreserve_resources_);
    std::swap(create_volumes_, other->create_volumes_);
    std::swap(destroy_volumes_, other->destroy_volumes_);
    std::swap(update_maintenance_schedule_, other->update_maintenance_schedule_);
    std::swap(start_maintenance_, other->start_maintenance_);
    std::swap(stop_maintenance_, other->stop_maintenance_);
    std::swap(set_quota_, other->set_quota_);
    std::swap(remove_quota_, other->remove_quota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Call_descriptor_;
  metadata.reflection = Call_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Response_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_Type_descriptor_;
}
bool Response_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Response_Type Response::UNKNOWN;
const Response_Type Response::GET_HEALTH;
const Response_Type Response::GET_FLAGS;
const Response_Type Response::GET_VERSION;
const Response_Type Response::GET_METRICS;
const Response_Type Response::GET_LOGGING_LEVEL;
const Response_Type Response::LIST_FILES;
const Response_Type Response::READ_FILE;
const Response_Type Response::GET_STATE;
const Response_Type Response::GET_AGENTS;
const Response_Type Response::GET_FRAMEWORKS;
const Response_Type Response::GET_EXECUTORS;
const Response_Type Response::GET_TASKS;
const Response_Type Response::GET_ROLES;
const Response_Type Response::GET_WEIGHTS;
const Response_Type Response::GET_MASTER;
const Response_Type Response::GET_MAINTENANCE_STATUS;
const Response_Type Response::GET_MAINTENANCE_SCHEDULE;
const Response_Type Response::GET_QUOTA;
const Response_Type Response::Type_MIN;
const Response_Type Response::Type_MAX;
const int Response::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Response_GetHealth::kHealthyFieldNumber;
#endif  // !_MSC_VER

Response_GetHealth::Response_GetHealth()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetHealth)
}

void Response_GetHealth::InitAsDefaultInstance() {
}

Response_GetHealth::Response_GetHealth(const Response_GetHealth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetHealth)
}

void Response_GetHealth::SharedCtor() {
  _cached_size_ = 0;
  healthy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetHealth::~Response_GetHealth() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetHealth)
  SharedDtor();
}

void Response_GetHealth::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetHealth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetHealth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetHealth_descriptor_;
}

const Response_GetHealth& Response_GetHealth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetHealth* Response_GetHealth::default_instance_ = NULL;

Response_GetHealth* Response_GetHealth::New() const {
  return new Response_GetHealth;
}

void Response_GetHealth::Clear() {
  healthy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetHealth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetHealth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool healthy = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &healthy_)));
          set_has_healthy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetHealth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetHealth)
  return false;
#undef DO_
}

void Response_GetHealth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetHealth)
  // required bool healthy = 1;
  if (has_healthy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->healthy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetHealth)
}

::google::protobuf::uint8* Response_GetHealth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetHealth)
  // required bool healthy = 1;
  if (has_healthy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->healthy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetHealth)
  return target;
}

int Response_GetHealth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool healthy = 1;
    if (has_healthy()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetHealth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetHealth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetHealth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetHealth::MergeFrom(const Response_GetHealth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_healthy()) {
      set_healthy(from.healthy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetHealth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetHealth::CopyFrom(const Response_GetHealth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetHealth::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_GetHealth::Swap(Response_GetHealth* other) {
  if (other != this) {
    std::swap(healthy_, other->healthy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetHealth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetHealth_descriptor_;
  metadata.reflection = Response_GetHealth_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetFlags::kFlagsFieldNumber;
#endif  // !_MSC_VER

Response_GetFlags::Response_GetFlags()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetFlags)
}

void Response_GetFlags::InitAsDefaultInstance() {
}

Response_GetFlags::Response_GetFlags(const Response_GetFlags& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetFlags)
}

void Response_GetFlags::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetFlags::~Response_GetFlags() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetFlags)
  SharedDtor();
}

void Response_GetFlags::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetFlags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetFlags_descriptor_;
}

const Response_GetFlags& Response_GetFlags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetFlags* Response_GetFlags::default_instance_ = NULL;

Response_GetFlags* Response_GetFlags::New() const {
  return new Response_GetFlags;
}

void Response_GetFlags::Clear() {
  flags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetFlags)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.Flag flags = 1;
      case 1: {
        if (tag == 10) {
         parse_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_flags;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetFlags)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetFlags)
  return false;
#undef DO_
}

void Response_GetFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetFlags)
  // repeated .mesos.Flag flags = 1;
  for (int i = 0; i < this->flags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->flags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetFlags)
}

::google::protobuf::uint8* Response_GetFlags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetFlags)
  // repeated .mesos.Flag flags = 1;
  for (int i = 0; i < this->flags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->flags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetFlags)
  return target;
}

int Response_GetFlags::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.Flag flags = 1;
  total_size += 1 * this->flags_size();
  for (int i = 0; i < this->flags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetFlags::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetFlags* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetFlags*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetFlags::MergeFrom(const Response_GetFlags& from) {
  GOOGLE_CHECK_NE(&from, this);
  flags_.MergeFrom(from.flags_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetFlags::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetFlags::CopyFrom(const Response_GetFlags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetFlags::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->flags())) return false;
  return true;
}

void Response_GetFlags::Swap(Response_GetFlags* other) {
  if (other != this) {
    flags_.Swap(&other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetFlags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetFlags_descriptor_;
  metadata.reflection = Response_GetFlags_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetVersion::kVersionInfoFieldNumber;
#endif  // !_MSC_VER

Response_GetVersion::Response_GetVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetVersion)
}

void Response_GetVersion::InitAsDefaultInstance() {
  version_info_ = const_cast< ::mesos::VersionInfo*>(&::mesos::VersionInfo::default_instance());
}

Response_GetVersion::Response_GetVersion(const Response_GetVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetVersion)
}

void Response_GetVersion::SharedCtor() {
  _cached_size_ = 0;
  version_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetVersion::~Response_GetVersion() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetVersion)
  SharedDtor();
}

void Response_GetVersion::SharedDtor() {
  if (this != default_instance_) {
    delete version_info_;
  }
}

void Response_GetVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetVersion_descriptor_;
}

const Response_GetVersion& Response_GetVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetVersion* Response_GetVersion::default_instance_ = NULL;

Response_GetVersion* Response_GetVersion::New() const {
  return new Response_GetVersion;
}

void Response_GetVersion::Clear() {
  if (has_version_info()) {
    if (version_info_ != NULL) version_info_->::mesos::VersionInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.VersionInfo version_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetVersion)
  return false;
#undef DO_
}

void Response_GetVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetVersion)
  // required .mesos.VersionInfo version_info = 1;
  if (has_version_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->version_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetVersion)
}

::google::protobuf::uint8* Response_GetVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetVersion)
  // required .mesos.VersionInfo version_info = 1;
  if (has_version_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->version_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetVersion)
  return target;
}

int Response_GetVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.VersionInfo version_info = 1;
    if (has_version_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->version_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetVersion::MergeFrom(const Response_GetVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version_info()) {
      mutable_version_info()->::mesos::VersionInfo::MergeFrom(from.version_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetVersion::CopyFrom(const Response_GetVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_version_info()) {
    if (!this->version_info().IsInitialized()) return false;
  }
  return true;
}

void Response_GetVersion::Swap(Response_GetVersion* other) {
  if (other != this) {
    std::swap(version_info_, other->version_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetVersion_descriptor_;
  metadata.reflection = Response_GetVersion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetMetrics::kMetricsFieldNumber;
#endif  // !_MSC_VER

Response_GetMetrics::Response_GetMetrics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetMetrics)
}

void Response_GetMetrics::InitAsDefaultInstance() {
}

Response_GetMetrics::Response_GetMetrics(const Response_GetMetrics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetMetrics)
}

void Response_GetMetrics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetMetrics::~Response_GetMetrics() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetMetrics)
  SharedDtor();
}

void Response_GetMetrics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetMetrics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetMetrics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetMetrics_descriptor_;
}

const Response_GetMetrics& Response_GetMetrics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetMetrics* Response_GetMetrics::default_instance_ = NULL;

Response_GetMetrics* Response_GetMetrics::New() const {
  return new Response_GetMetrics;
}

void Response_GetMetrics::Clear() {
  metrics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetMetrics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetMetrics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.Metric metrics = 1;
      case 1: {
        if (tag == 10) {
         parse_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_metrics;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetMetrics)
  return false;
#undef DO_
}

void Response_GetMetrics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetMetrics)
  // repeated .mesos.Metric metrics = 1;
  for (int i = 0; i < this->metrics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metrics(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetMetrics)
}

::google::protobuf::uint8* Response_GetMetrics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetMetrics)
  // repeated .mesos.Metric metrics = 1;
  for (int i = 0; i < this->metrics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metrics(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetMetrics)
  return target;
}

int Response_GetMetrics::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.Metric metrics = 1;
  total_size += 1 * this->metrics_size();
  for (int i = 0; i < this->metrics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metrics(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetMetrics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetMetrics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetMetrics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetMetrics::MergeFrom(const Response_GetMetrics& from) {
  GOOGLE_CHECK_NE(&from, this);
  metrics_.MergeFrom(from.metrics_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetMetrics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetMetrics::CopyFrom(const Response_GetMetrics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetMetrics::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->metrics())) return false;
  return true;
}

void Response_GetMetrics::Swap(Response_GetMetrics* other) {
  if (other != this) {
    metrics_.Swap(&other->metrics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetMetrics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetMetrics_descriptor_;
  metadata.reflection = Response_GetMetrics_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetLoggingLevel::kLevelFieldNumber;
#endif  // !_MSC_VER

Response_GetLoggingLevel::Response_GetLoggingLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetLoggingLevel)
}

void Response_GetLoggingLevel::InitAsDefaultInstance() {
}

Response_GetLoggingLevel::Response_GetLoggingLevel(const Response_GetLoggingLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetLoggingLevel)
}

void Response_GetLoggingLevel::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetLoggingLevel::~Response_GetLoggingLevel() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetLoggingLevel)
  SharedDtor();
}

void Response_GetLoggingLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetLoggingLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetLoggingLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetLoggingLevel_descriptor_;
}

const Response_GetLoggingLevel& Response_GetLoggingLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetLoggingLevel* Response_GetLoggingLevel::default_instance_ = NULL;

Response_GetLoggingLevel* Response_GetLoggingLevel::New() const {
  return new Response_GetLoggingLevel;
}

void Response_GetLoggingLevel::Clear() {
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetLoggingLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetLoggingLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetLoggingLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetLoggingLevel)
  return false;
#undef DO_
}

void Response_GetLoggingLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetLoggingLevel)
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetLoggingLevel)
}

::google::protobuf::uint8* Response_GetLoggingLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetLoggingLevel)
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetLoggingLevel)
  return target;
}

int Response_GetLoggingLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetLoggingLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetLoggingLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetLoggingLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetLoggingLevel::MergeFrom(const Response_GetLoggingLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetLoggingLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetLoggingLevel::CopyFrom(const Response_GetLoggingLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetLoggingLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_GetLoggingLevel::Swap(Response_GetLoggingLevel* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetLoggingLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetLoggingLevel_descriptor_;
  metadata.reflection = Response_GetLoggingLevel_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_ListFiles::kFileInfosFieldNumber;
#endif  // !_MSC_VER

Response_ListFiles::Response_ListFiles()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.ListFiles)
}

void Response_ListFiles::InitAsDefaultInstance() {
}

Response_ListFiles::Response_ListFiles(const Response_ListFiles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.ListFiles)
}

void Response_ListFiles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_ListFiles::~Response_ListFiles() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.ListFiles)
  SharedDtor();
}

void Response_ListFiles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_ListFiles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_ListFiles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_ListFiles_descriptor_;
}

const Response_ListFiles& Response_ListFiles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_ListFiles* Response_ListFiles::default_instance_ = NULL;

Response_ListFiles* Response_ListFiles::New() const {
  return new Response_ListFiles;
}

void Response_ListFiles::Clear() {
  file_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_ListFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.ListFiles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.FileInfo file_infos = 1;
      case 1: {
        if (tag == 10) {
         parse_file_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_file_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.ListFiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.ListFiles)
  return false;
#undef DO_
}

void Response_ListFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.ListFiles)
  // repeated .mesos.FileInfo file_infos = 1;
  for (int i = 0; i < this->file_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->file_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.ListFiles)
}

::google::protobuf::uint8* Response_ListFiles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.ListFiles)
  // repeated .mesos.FileInfo file_infos = 1;
  for (int i = 0; i < this->file_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->file_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.ListFiles)
  return target;
}

int Response_ListFiles::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.FileInfo file_infos = 1;
  total_size += 1 * this->file_infos_size();
  for (int i = 0; i < this->file_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_ListFiles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_ListFiles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_ListFiles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_ListFiles::MergeFrom(const Response_ListFiles& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_infos_.MergeFrom(from.file_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_ListFiles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_ListFiles::CopyFrom(const Response_ListFiles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_ListFiles::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->file_infos())) return false;
  return true;
}

void Response_ListFiles::Swap(Response_ListFiles* other) {
  if (other != this) {
    file_infos_.Swap(&other->file_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_ListFiles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_ListFiles_descriptor_;
  metadata.reflection = Response_ListFiles_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_ReadFile::kSizeFieldNumber;
const int Response_ReadFile::kDataFieldNumber;
#endif  // !_MSC_VER

Response_ReadFile::Response_ReadFile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.ReadFile)
}

void Response_ReadFile::InitAsDefaultInstance() {
}

Response_ReadFile::Response_ReadFile(const Response_ReadFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.ReadFile)
}

void Response_ReadFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_ReadFile::~Response_ReadFile() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.ReadFile)
  SharedDtor();
}

void Response_ReadFile::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Response_ReadFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_ReadFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_ReadFile_descriptor_;
}

const Response_ReadFile& Response_ReadFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_ReadFile* Response_ReadFile::default_instance_ = NULL;

Response_ReadFile* Response_ReadFile::New() const {
  return new Response_ReadFile;
}

void Response_ReadFile::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    size_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_ReadFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.ReadFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.ReadFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.ReadFile)
  return false;
#undef DO_
}

void Response_ReadFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.ReadFile)
  // required uint64 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.ReadFile)
}

::google::protobuf::uint8* Response_ReadFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.ReadFile)
  // required uint64 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->size(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.ReadFile)
  return target;
}

int Response_ReadFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_ReadFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_ReadFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_ReadFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_ReadFile::MergeFrom(const Response_ReadFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_ReadFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_ReadFile::CopyFrom(const Response_ReadFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_ReadFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Response_ReadFile::Swap(Response_ReadFile* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_ReadFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_ReadFile_descriptor_;
  metadata.reflection = Response_ReadFile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetState::kGetTasksFieldNumber;
const int Response_GetState::kGetExecutorsFieldNumber;
const int Response_GetState::kGetFrameworksFieldNumber;
const int Response_GetState::kGetAgentsFieldNumber;
#endif  // !_MSC_VER

Response_GetState::Response_GetState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetState)
}

void Response_GetState::InitAsDefaultInstance() {
  get_tasks_ = const_cast< ::mesos::master_p::Response_GetTasks*>(&::mesos::master_p::Response_GetTasks::default_instance());
  get_executors_ = const_cast< ::mesos::master_p::Response_GetExecutors*>(&::mesos::master_p::Response_GetExecutors::default_instance());
  get_frameworks_ = const_cast< ::mesos::master_p::Response_GetFrameworks*>(&::mesos::master_p::Response_GetFrameworks::default_instance());
  get_agents_ = const_cast< ::mesos::master_p::Response_GetAgents*>(&::mesos::master_p::Response_GetAgents::default_instance());
}

Response_GetState::Response_GetState(const Response_GetState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetState)
}

void Response_GetState::SharedCtor() {
  _cached_size_ = 0;
  get_tasks_ = NULL;
  get_executors_ = NULL;
  get_frameworks_ = NULL;
  get_agents_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetState::~Response_GetState() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetState)
  SharedDtor();
}

void Response_GetState::SharedDtor() {
  if (this != default_instance_) {
    delete get_tasks_;
    delete get_executors_;
    delete get_frameworks_;
    delete get_agents_;
  }
}

void Response_GetState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetState_descriptor_;
}

const Response_GetState& Response_GetState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetState* Response_GetState::default_instance_ = NULL;

Response_GetState* Response_GetState::New() const {
  return new Response_GetState;
}

void Response_GetState::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_get_tasks()) {
      if (get_tasks_ != NULL) get_tasks_->::mesos::master_p::Response_GetTasks::Clear();
    }
    if (has_get_executors()) {
      if (get_executors_ != NULL) get_executors_->::mesos::master_p::Response_GetExecutors::Clear();
    }
    if (has_get_frameworks()) {
      if (get_frameworks_ != NULL) get_frameworks_->::mesos::master_p::Response_GetFrameworks::Clear();
    }
    if (has_get_agents()) {
      if (get_agents_ != NULL) get_agents_->::mesos::master_p::Response_GetAgents::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.master_p.Response.GetTasks get_tasks = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_tasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get_executors;
        break;
      }

      // optional .mesos.master_p.Response.GetExecutors get_executors = 2;
      case 2: {
        if (tag == 18) {
         parse_get_executors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_executors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_get_frameworks;
        break;
      }

      // optional .mesos.master_p.Response.GetFrameworks get_frameworks = 3;
      case 3: {
        if (tag == 26) {
         parse_get_frameworks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_frameworks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_get_agents;
        break;
      }

      // optional .mesos.master_p.Response.GetAgents get_agents = 4;
      case 4: {
        if (tag == 34) {
         parse_get_agents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_agents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetState)
  return false;
#undef DO_
}

void Response_GetState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetState)
  // optional .mesos.master_p.Response.GetTasks get_tasks = 1;
  if (has_get_tasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->get_tasks(), output);
  }

  // optional .mesos.master_p.Response.GetExecutors get_executors = 2;
  if (has_get_executors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get_executors(), output);
  }

  // optional .mesos.master_p.Response.GetFrameworks get_frameworks = 3;
  if (has_get_frameworks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->get_frameworks(), output);
  }

  // optional .mesos.master_p.Response.GetAgents get_agents = 4;
  if (has_get_agents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->get_agents(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetState)
}

::google::protobuf::uint8* Response_GetState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetState)
  // optional .mesos.master_p.Response.GetTasks get_tasks = 1;
  if (has_get_tasks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->get_tasks(), target);
  }

  // optional .mesos.master_p.Response.GetExecutors get_executors = 2;
  if (has_get_executors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get_executors(), target);
  }

  // optional .mesos.master_p.Response.GetFrameworks get_frameworks = 3;
  if (has_get_frameworks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->get_frameworks(), target);
  }

  // optional .mesos.master_p.Response.GetAgents get_agents = 4;
  if (has_get_agents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->get_agents(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetState)
  return target;
}

int Response_GetState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.master_p.Response.GetTasks get_tasks = 1;
    if (has_get_tasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_tasks());
    }

    // optional .mesos.master_p.Response.GetExecutors get_executors = 2;
    if (has_get_executors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_executors());
    }

    // optional .mesos.master_p.Response.GetFrameworks get_frameworks = 3;
    if (has_get_frameworks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_frameworks());
    }

    // optional .mesos.master_p.Response.GetAgents get_agents = 4;
    if (has_get_agents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_agents());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetState::MergeFrom(const Response_GetState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_get_tasks()) {
      mutable_get_tasks()->::mesos::master_p::Response_GetTasks::MergeFrom(from.get_tasks());
    }
    if (from.has_get_executors()) {
      mutable_get_executors()->::mesos::master_p::Response_GetExecutors::MergeFrom(from.get_executors());
    }
    if (from.has_get_frameworks()) {
      mutable_get_frameworks()->::mesos::master_p::Response_GetFrameworks::MergeFrom(from.get_frameworks());
    }
    if (from.has_get_agents()) {
      mutable_get_agents()->::mesos::master_p::Response_GetAgents::MergeFrom(from.get_agents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetState::CopyFrom(const Response_GetState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetState::IsInitialized() const {

  if (has_get_tasks()) {
    if (!this->get_tasks().IsInitialized()) return false;
  }
  if (has_get_executors()) {
    if (!this->get_executors().IsInitialized()) return false;
  }
  if (has_get_frameworks()) {
    if (!this->get_frameworks().IsInitialized()) return false;
  }
  if (has_get_agents()) {
    if (!this->get_agents().IsInitialized()) return false;
  }
  return true;
}

void Response_GetState::Swap(Response_GetState* other) {
  if (other != this) {
    std::swap(get_tasks_, other->get_tasks_);
    std::swap(get_executors_, other->get_executors_);
    std::swap(get_frameworks_, other->get_frameworks_);
    std::swap(get_agents_, other->get_agents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetState_descriptor_;
  metadata.reflection = Response_GetState_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetAgents_Agent::kAgentInfoFieldNumber;
const int Response_GetAgents_Agent::kActiveFieldNumber;
const int Response_GetAgents_Agent::kVersionFieldNumber;
const int Response_GetAgents_Agent::kPidFieldNumber;
const int Response_GetAgents_Agent::kRegisteredTimeFieldNumber;
const int Response_GetAgents_Agent::kReregisteredTimeFieldNumber;
const int Response_GetAgents_Agent::kTotalResourcesFieldNumber;
const int Response_GetAgents_Agent::kAllocatedResourcesFieldNumber;
const int Response_GetAgents_Agent::kOfferedResourcesFieldNumber;
const int Response_GetAgents_Agent::kCapabilitiesFieldNumber;
#endif  // !_MSC_VER

Response_GetAgents_Agent::Response_GetAgents_Agent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetAgents.Agent)
}

void Response_GetAgents_Agent::InitAsDefaultInstance() {
  agent_info_ = const_cast< ::mesos::SlaveInfo*>(&::mesos::SlaveInfo::default_instance());
  registered_time_ = const_cast< ::mesos::TimeInfo*>(&::mesos::TimeInfo::default_instance());
  reregistered_time_ = const_cast< ::mesos::TimeInfo*>(&::mesos::TimeInfo::default_instance());
}

Response_GetAgents_Agent::Response_GetAgents_Agent(const Response_GetAgents_Agent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetAgents.Agent)
}

void Response_GetAgents_Agent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  agent_info_ = NULL;
  active_ = false;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registered_time_ = NULL;
  reregistered_time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetAgents_Agent::~Response_GetAgents_Agent() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetAgents.Agent)
  SharedDtor();
}

void Response_GetAgents_Agent::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pid_;
  }
  if (this != default_instance_) {
    delete agent_info_;
    delete registered_time_;
    delete reregistered_time_;
  }
}

void Response_GetAgents_Agent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetAgents_Agent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetAgents_Agent_descriptor_;
}

const Response_GetAgents_Agent& Response_GetAgents_Agent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetAgents_Agent* Response_GetAgents_Agent::default_instance_ = NULL;

Response_GetAgents_Agent* Response_GetAgents_Agent::New() const {
  return new Response_GetAgents_Agent;
}

void Response_GetAgents_Agent::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_agent_info()) {
      if (agent_info_ != NULL) agent_info_->::mesos::SlaveInfo::Clear();
    }
    active_ = false;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pid_->clear();
      }
    }
    if (has_registered_time()) {
      if (registered_time_ != NULL) registered_time_->::mesos::TimeInfo::Clear();
    }
    if (has_reregistered_time()) {
      if (reregistered_time_ != NULL) reregistered_time_->::mesos::TimeInfo::Clear();
    }
  }
  total_resources_.Clear();
  allocated_resources_.Clear();
  offered_resources_.Clear();
  capabilities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetAgents_Agent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetAgents.Agent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.SlaveInfo agent_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_active;
        break;
      }

      // required bool active = 2;
      case 2: {
        if (tag == 16) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // required string version = 3;
      case 3: {
        if (tag == 26) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pid;
        break;
      }

      // optional string pid = 4;
      case 4: {
        if (tag == 34) {
         parse_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_registered_time;
        break;
      }

      // optional .mesos.TimeInfo registered_time = 5;
      case 5: {
        if (tag == 42) {
         parse_registered_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registered_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_reregistered_time;
        break;
      }

      // optional .mesos.TimeInfo reregistered_time = 6;
      case 6: {
        if (tag == 50) {
         parse_reregistered_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reregistered_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_total_resources;
        break;
      }

      // repeated .mesos.Resource total_resources = 7;
      case 7: {
        if (tag == 58) {
         parse_total_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_total_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_total_resources;
        if (input->ExpectTag(66)) goto parse_allocated_resources;
        break;
      }

      // repeated .mesos.Resource allocated_resources = 8;
      case 8: {
        if (tag == 66) {
         parse_allocated_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allocated_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_allocated_resources;
        if (input->ExpectTag(74)) goto parse_offered_resources;
        break;
      }

      // repeated .mesos.Resource offered_resources = 9;
      case 9: {
        if (tag == 74) {
         parse_offered_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offered_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_offered_resources;
        if (input->ExpectTag(82)) goto parse_capabilities;
        break;
      }

      // repeated .mesos.SlaveInfo.Capability capabilities = 10;
      case 10: {
        if (tag == 82) {
         parse_capabilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_capabilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_capabilities;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetAgents.Agent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetAgents.Agent)
  return false;
#undef DO_
}

void Response_GetAgents_Agent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetAgents.Agent)
  // required .mesos.SlaveInfo agent_info = 1;
  if (has_agent_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_info(), output);
  }

  // required bool active = 2;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }

  // required string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // optional string pid = 4;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pid(), output);
  }

  // optional .mesos.TimeInfo registered_time = 5;
  if (has_registered_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->registered_time(), output);
  }

  // optional .mesos.TimeInfo reregistered_time = 6;
  if (has_reregistered_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->reregistered_time(), output);
  }

  // repeated .mesos.Resource total_resources = 7;
  for (int i = 0; i < this->total_resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->total_resources(i), output);
  }

  // repeated .mesos.Resource allocated_resources = 8;
  for (int i = 0; i < this->allocated_resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->allocated_resources(i), output);
  }

  // repeated .mesos.Resource offered_resources = 9;
  for (int i = 0; i < this->offered_resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->offered_resources(i), output);
  }

  // repeated .mesos.SlaveInfo.Capability capabilities = 10;
  for (int i = 0; i < this->capabilities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->capabilities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetAgents.Agent)
}

::google::protobuf::uint8* Response_GetAgents_Agent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetAgents.Agent)
  // required .mesos.SlaveInfo agent_info = 1;
  if (has_agent_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_info(), target);
  }

  // required bool active = 2;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }

  // required string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional string pid = 4;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pid(), target);
  }

  // optional .mesos.TimeInfo registered_time = 5;
  if (has_registered_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->registered_time(), target);
  }

  // optional .mesos.TimeInfo reregistered_time = 6;
  if (has_reregistered_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->reregistered_time(), target);
  }

  // repeated .mesos.Resource total_resources = 7;
  for (int i = 0; i < this->total_resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->total_resources(i), target);
  }

  // repeated .mesos.Resource allocated_resources = 8;
  for (int i = 0; i < this->allocated_resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->allocated_resources(i), target);
  }

  // repeated .mesos.Resource offered_resources = 9;
  for (int i = 0; i < this->offered_resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->offered_resources(i), target);
  }

  // repeated .mesos.SlaveInfo.Capability capabilities = 10;
  for (int i = 0; i < this->capabilities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->capabilities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetAgents.Agent)
  return target;
}

int Response_GetAgents_Agent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.SlaveInfo agent_info = 1;
    if (has_agent_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_info());
    }

    // required bool active = 2;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // required string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string pid = 4;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }

    // optional .mesos.TimeInfo registered_time = 5;
    if (has_registered_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registered_time());
    }

    // optional .mesos.TimeInfo reregistered_time = 6;
    if (has_reregistered_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reregistered_time());
    }

  }
  // repeated .mesos.Resource total_resources = 7;
  total_size += 1 * this->total_resources_size();
  for (int i = 0; i < this->total_resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->total_resources(i));
  }

  // repeated .mesos.Resource allocated_resources = 8;
  total_size += 1 * this->allocated_resources_size();
  for (int i = 0; i < this->allocated_resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allocated_resources(i));
  }

  // repeated .mesos.Resource offered_resources = 9;
  total_size += 1 * this->offered_resources_size();
  for (int i = 0; i < this->offered_resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offered_resources(i));
  }

  // repeated .mesos.SlaveInfo.Capability capabilities = 10;
  total_size += 1 * this->capabilities_size();
  for (int i = 0; i < this->capabilities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capabilities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetAgents_Agent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetAgents_Agent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetAgents_Agent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetAgents_Agent::MergeFrom(const Response_GetAgents_Agent& from) {
  GOOGLE_CHECK_NE(&from, this);
  total_resources_.MergeFrom(from.total_resources_);
  allocated_resources_.MergeFrom(from.allocated_resources_);
  offered_resources_.MergeFrom(from.offered_resources_);
  capabilities_.MergeFrom(from.capabilities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_info()) {
      mutable_agent_info()->::mesos::SlaveInfo::MergeFrom(from.agent_info());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_registered_time()) {
      mutable_registered_time()->::mesos::TimeInfo::MergeFrom(from.registered_time());
    }
    if (from.has_reregistered_time()) {
      mutable_reregistered_time()->::mesos::TimeInfo::MergeFrom(from.reregistered_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetAgents_Agent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetAgents_Agent::CopyFrom(const Response_GetAgents_Agent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetAgents_Agent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_agent_info()) {
    if (!this->agent_info().IsInitialized()) return false;
  }
  if (has_registered_time()) {
    if (!this->registered_time().IsInitialized()) return false;
  }
  if (has_reregistered_time()) {
    if (!this->reregistered_time().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->total_resources())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->allocated_resources())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->offered_resources())) return false;
  return true;
}

void Response_GetAgents_Agent::Swap(Response_GetAgents_Agent* other) {
  if (other != this) {
    std::swap(agent_info_, other->agent_info_);
    std::swap(active_, other->active_);
    std::swap(version_, other->version_);
    std::swap(pid_, other->pid_);
    std::swap(registered_time_, other->registered_time_);
    std::swap(reregistered_time_, other->reregistered_time_);
    total_resources_.Swap(&other->total_resources_);
    allocated_resources_.Swap(&other->allocated_resources_);
    offered_resources_.Swap(&other->offered_resources_);
    capabilities_.Swap(&other->capabilities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetAgents_Agent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetAgents_Agent_descriptor_;
  metadata.reflection = Response_GetAgents_Agent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetAgents::kAgentsFieldNumber;
const int Response_GetAgents::kRecoveredAgentsFieldNumber;
#endif  // !_MSC_VER

Response_GetAgents::Response_GetAgents()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetAgents)
}

void Response_GetAgents::InitAsDefaultInstance() {
}

Response_GetAgents::Response_GetAgents(const Response_GetAgents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetAgents)
}

void Response_GetAgents::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetAgents::~Response_GetAgents() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetAgents)
  SharedDtor();
}

void Response_GetAgents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetAgents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetAgents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetAgents_descriptor_;
}

const Response_GetAgents& Response_GetAgents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetAgents* Response_GetAgents::default_instance_ = NULL;

Response_GetAgents* Response_GetAgents::New() const {
  return new Response_GetAgents;
}

void Response_GetAgents::Clear() {
  agents_.Clear();
  recovered_agents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetAgents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetAgents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.master_p.Response.GetAgents.Agent agents = 1;
      case 1: {
        if (tag == 10) {
         parse_agents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_agents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_agents;
        if (input->ExpectTag(18)) goto parse_recovered_agents;
        break;
      }

      // repeated .mesos.SlaveInfo recovered_agents = 2;
      case 2: {
        if (tag == 18) {
         parse_recovered_agents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recovered_agents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_recovered_agents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetAgents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetAgents)
  return false;
#undef DO_
}

void Response_GetAgents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetAgents)
  // repeated .mesos.master_p.Response.GetAgents.Agent agents = 1;
  for (int i = 0; i < this->agents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agents(i), output);
  }

  // repeated .mesos.SlaveInfo recovered_agents = 2;
  for (int i = 0; i < this->recovered_agents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recovered_agents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetAgents)
}

::google::protobuf::uint8* Response_GetAgents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetAgents)
  // repeated .mesos.master_p.Response.GetAgents.Agent agents = 1;
  for (int i = 0; i < this->agents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agents(i), target);
  }

  // repeated .mesos.SlaveInfo recovered_agents = 2;
  for (int i = 0; i < this->recovered_agents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recovered_agents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetAgents)
  return target;
}

int Response_GetAgents::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.master_p.Response.GetAgents.Agent agents = 1;
  total_size += 1 * this->agents_size();
  for (int i = 0; i < this->agents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->agents(i));
  }

  // repeated .mesos.SlaveInfo recovered_agents = 2;
  total_size += 1 * this->recovered_agents_size();
  for (int i = 0; i < this->recovered_agents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recovered_agents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetAgents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetAgents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetAgents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetAgents::MergeFrom(const Response_GetAgents& from) {
  GOOGLE_CHECK_NE(&from, this);
  agents_.MergeFrom(from.agents_);
  recovered_agents_.MergeFrom(from.recovered_agents_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetAgents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetAgents::CopyFrom(const Response_GetAgents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetAgents::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->agents())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->recovered_agents())) return false;
  return true;
}

void Response_GetAgents::Swap(Response_GetAgents* other) {
  if (other != this) {
    agents_.Swap(&other->agents_);
    recovered_agents_.Swap(&other->recovered_agents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetAgents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetAgents_descriptor_;
  metadata.reflection = Response_GetAgents_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetFrameworks_Framework::kFrameworkInfoFieldNumber;
const int Response_GetFrameworks_Framework::kActiveFieldNumber;
const int Response_GetFrameworks_Framework::kConnectedFieldNumber;
const int Response_GetFrameworks_Framework::kRecoveredFieldNumber;
const int Response_GetFrameworks_Framework::kRegisteredTimeFieldNumber;
const int Response_GetFrameworks_Framework::kReregisteredTimeFieldNumber;
const int Response_GetFrameworks_Framework::kUnregisteredTimeFieldNumber;
const int Response_GetFrameworks_Framework::kOffersFieldNumber;
const int Response_GetFrameworks_Framework::kInverseOffersFieldNumber;
const int Response_GetFrameworks_Framework::kAllocatedResourcesFieldNumber;
const int Response_GetFrameworks_Framework::kOfferedResourcesFieldNumber;
#endif  // !_MSC_VER

Response_GetFrameworks_Framework::Response_GetFrameworks_Framework()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetFrameworks.Framework)
}

void Response_GetFrameworks_Framework::InitAsDefaultInstance() {
  framework_info_ = const_cast< ::mesos::FrameworkInfo*>(&::mesos::FrameworkInfo::default_instance());
  registered_time_ = const_cast< ::mesos::TimeInfo*>(&::mesos::TimeInfo::default_instance());
  reregistered_time_ = const_cast< ::mesos::TimeInfo*>(&::mesos::TimeInfo::default_instance());
  unregistered_time_ = const_cast< ::mesos::TimeInfo*>(&::mesos::TimeInfo::default_instance());
}

Response_GetFrameworks_Framework::Response_GetFrameworks_Framework(const Response_GetFrameworks_Framework& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetFrameworks.Framework)
}

void Response_GetFrameworks_Framework::SharedCtor() {
  _cached_size_ = 0;
  framework_info_ = NULL;
  active_ = false;
  connected_ = false;
  recovered_ = false;
  registered_time_ = NULL;
  reregistered_time_ = NULL;
  unregistered_time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetFrameworks_Framework::~Response_GetFrameworks_Framework() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetFrameworks.Framework)
  SharedDtor();
}

void Response_GetFrameworks_Framework::SharedDtor() {
  if (this != default_instance_) {
    delete framework_info_;
    delete registered_time_;
    delete reregistered_time_;
    delete unregistered_time_;
  }
}

void Response_GetFrameworks_Framework::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetFrameworks_Framework::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetFrameworks_Framework_descriptor_;
}

const Response_GetFrameworks_Framework& Response_GetFrameworks_Framework::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetFrameworks_Framework* Response_GetFrameworks_Framework::default_instance_ = NULL;

Response_GetFrameworks_Framework* Response_GetFrameworks_Framework::New() const {
  return new Response_GetFrameworks_Framework;
}

void Response_GetFrameworks_Framework::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Response_GetFrameworks_Framework*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(active_, recovered_);
    if (has_framework_info()) {
      if (framework_info_ != NULL) framework_info_->::mesos::FrameworkInfo::Clear();
    }
    if (has_registered_time()) {
      if (registered_time_ != NULL) registered_time_->::mesos::TimeInfo::Clear();
    }
    if (has_reregistered_time()) {
      if (reregistered_time_ != NULL) reregistered_time_->::mesos::TimeInfo::Clear();
    }
    if (has_unregistered_time()) {
      if (unregistered_time_ != NULL) unregistered_time_->::mesos::TimeInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  offers_.Clear();
  inverse_offers_.Clear();
  allocated_resources_.Clear();
  offered_resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetFrameworks_Framework::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetFrameworks.Framework)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.FrameworkInfo framework_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_active;
        break;
      }

      // required bool active = 2;
      case 2: {
        if (tag == 16) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_connected;
        break;
      }

      // required bool connected = 3;
      case 3: {
        if (tag == 24) {
         parse_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connected_)));
          set_has_connected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_registered_time;
        break;
      }

      // optional .mesos.TimeInfo registered_time = 4;
      case 4: {
        if (tag == 34) {
         parse_registered_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registered_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reregistered_time;
        break;
      }

      // optional .mesos.TimeInfo reregistered_time = 5;
      case 5: {
        if (tag == 42) {
         parse_reregistered_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reregistered_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_unregistered_time;
        break;
      }

      // optional .mesos.TimeInfo unregistered_time = 6;
      case 6: {
        if (tag == 50) {
         parse_unregistered_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unregistered_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_offers;
        break;
      }

      // repeated .mesos.Offer offers = 7;
      case 7: {
        if (tag == 58) {
         parse_offers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_offers;
        if (input->ExpectTag(66)) goto parse_inverse_offers;
        break;
      }

      // repeated .mesos.InverseOffer inverse_offers = 8;
      case 8: {
        if (tag == 66) {
         parse_inverse_offers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inverse_offers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_inverse_offers;
        if (input->ExpectTag(74)) goto parse_allocated_resources;
        break;
      }

      // repeated .mesos.Resource allocated_resources = 9;
      case 9: {
        if (tag == 74) {
         parse_allocated_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allocated_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_allocated_resources;
        if (input->ExpectTag(82)) goto parse_offered_resources;
        break;
      }

      // repeated .mesos.Resource offered_resources = 10;
      case 10: {
        if (tag == 82) {
         parse_offered_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offered_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_offered_resources;
        if (input->ExpectTag(88)) goto parse_recovered;
        break;
      }

      // required bool recovered = 11;
      case 11: {
        if (tag == 88) {
         parse_recovered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recovered_)));
          set_has_recovered();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetFrameworks.Framework)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetFrameworks.Framework)
  return false;
#undef DO_
}

void Response_GetFrameworks_Framework::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetFrameworks.Framework)
  // required .mesos.FrameworkInfo framework_info = 1;
  if (has_framework_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_info(), output);
  }

  // required bool active = 2;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->active(), output);
  }

  // required bool connected = 3;
  if (has_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->connected(), output);
  }

  // optional .mesos.TimeInfo registered_time = 4;
  if (has_registered_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->registered_time(), output);
  }

  // optional .mesos.TimeInfo reregistered_time = 5;
  if (has_reregistered_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reregistered_time(), output);
  }

  // optional .mesos.TimeInfo unregistered_time = 6;
  if (has_unregistered_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->unregistered_time(), output);
  }

  // repeated .mesos.Offer offers = 7;
  for (int i = 0; i < this->offers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->offers(i), output);
  }

  // repeated .mesos.InverseOffer inverse_offers = 8;
  for (int i = 0; i < this->inverse_offers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->inverse_offers(i), output);
  }

  // repeated .mesos.Resource allocated_resources = 9;
  for (int i = 0; i < this->allocated_resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->allocated_resources(i), output);
  }

  // repeated .mesos.Resource offered_resources = 10;
  for (int i = 0; i < this->offered_resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->offered_resources(i), output);
  }

  // required bool recovered = 11;
  if (has_recovered()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->recovered(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetFrameworks.Framework)
}

::google::protobuf::uint8* Response_GetFrameworks_Framework::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetFrameworks.Framework)
  // required .mesos.FrameworkInfo framework_info = 1;
  if (has_framework_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_info(), target);
  }

  // required bool active = 2;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->active(), target);
  }

  // required bool connected = 3;
  if (has_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->connected(), target);
  }

  // optional .mesos.TimeInfo registered_time = 4;
  if (has_registered_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->registered_time(), target);
  }

  // optional .mesos.TimeInfo reregistered_time = 5;
  if (has_reregistered_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reregistered_time(), target);
  }

  // optional .mesos.TimeInfo unregistered_time = 6;
  if (has_unregistered_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->unregistered_time(), target);
  }

  // repeated .mesos.Offer offers = 7;
  for (int i = 0; i < this->offers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->offers(i), target);
  }

  // repeated .mesos.InverseOffer inverse_offers = 8;
  for (int i = 0; i < this->inverse_offers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->inverse_offers(i), target);
  }

  // repeated .mesos.Resource allocated_resources = 9;
  for (int i = 0; i < this->allocated_resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->allocated_resources(i), target);
  }

  // repeated .mesos.Resource offered_resources = 10;
  for (int i = 0; i < this->offered_resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->offered_resources(i), target);
  }

  // required bool recovered = 11;
  if (has_recovered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->recovered(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetFrameworks.Framework)
  return target;
}

int Response_GetFrameworks_Framework::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.FrameworkInfo framework_info = 1;
    if (has_framework_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_info());
    }

    // required bool active = 2;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // required bool connected = 3;
    if (has_connected()) {
      total_size += 1 + 1;
    }

    // required bool recovered = 11;
    if (has_recovered()) {
      total_size += 1 + 1;
    }

    // optional .mesos.TimeInfo registered_time = 4;
    if (has_registered_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registered_time());
    }

    // optional .mesos.TimeInfo reregistered_time = 5;
    if (has_reregistered_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reregistered_time());
    }

    // optional .mesos.TimeInfo unregistered_time = 6;
    if (has_unregistered_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unregistered_time());
    }

  }
  // repeated .mesos.Offer offers = 7;
  total_size += 1 * this->offers_size();
  for (int i = 0; i < this->offers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offers(i));
  }

  // repeated .mesos.InverseOffer inverse_offers = 8;
  total_size += 1 * this->inverse_offers_size();
  for (int i = 0; i < this->inverse_offers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inverse_offers(i));
  }

  // repeated .mesos.Resource allocated_resources = 9;
  total_size += 1 * this->allocated_resources_size();
  for (int i = 0; i < this->allocated_resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allocated_resources(i));
  }

  // repeated .mesos.Resource offered_resources = 10;
  total_size += 1 * this->offered_resources_size();
  for (int i = 0; i < this->offered_resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offered_resources(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetFrameworks_Framework::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetFrameworks_Framework* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetFrameworks_Framework*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetFrameworks_Framework::MergeFrom(const Response_GetFrameworks_Framework& from) {
  GOOGLE_CHECK_NE(&from, this);
  offers_.MergeFrom(from.offers_);
  inverse_offers_.MergeFrom(from.inverse_offers_);
  allocated_resources_.MergeFrom(from.allocated_resources_);
  offered_resources_.MergeFrom(from.offered_resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_info()) {
      mutable_framework_info()->::mesos::FrameworkInfo::MergeFrom(from.framework_info());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_connected()) {
      set_connected(from.connected());
    }
    if (from.has_recovered()) {
      set_recovered(from.recovered());
    }
    if (from.has_registered_time()) {
      mutable_registered_time()->::mesos::TimeInfo::MergeFrom(from.registered_time());
    }
    if (from.has_reregistered_time()) {
      mutable_reregistered_time()->::mesos::TimeInfo::MergeFrom(from.reregistered_time());
    }
    if (from.has_unregistered_time()) {
      mutable_unregistered_time()->::mesos::TimeInfo::MergeFrom(from.unregistered_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetFrameworks_Framework::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetFrameworks_Framework::CopyFrom(const Response_GetFrameworks_Framework& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetFrameworks_Framework::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_framework_info()) {
    if (!this->framework_info().IsInitialized()) return false;
  }
  if (has_registered_time()) {
    if (!this->registered_time().IsInitialized()) return false;
  }
  if (has_reregistered_time()) {
    if (!this->reregistered_time().IsInitialized()) return false;
  }
  if (has_unregistered_time()) {
    if (!this->unregistered_time().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->offers())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->inverse_offers())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->allocated_resources())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->offered_resources())) return false;
  return true;
}

void Response_GetFrameworks_Framework::Swap(Response_GetFrameworks_Framework* other) {
  if (other != this) {
    std::swap(framework_info_, other->framework_info_);
    std::swap(active_, other->active_);
    std::swap(connected_, other->connected_);
    std::swap(recovered_, other->recovered_);
    std::swap(registered_time_, other->registered_time_);
    std::swap(reregistered_time_, other->reregistered_time_);
    std::swap(unregistered_time_, other->unregistered_time_);
    offers_.Swap(&other->offers_);
    inverse_offers_.Swap(&other->inverse_offers_);
    allocated_resources_.Swap(&other->allocated_resources_);
    offered_resources_.Swap(&other->offered_resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetFrameworks_Framework::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetFrameworks_Framework_descriptor_;
  metadata.reflection = Response_GetFrameworks_Framework_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetFrameworks::kFrameworksFieldNumber;
const int Response_GetFrameworks::kCompletedFrameworksFieldNumber;
const int Response_GetFrameworks::kRecoveredFrameworksFieldNumber;
#endif  // !_MSC_VER

Response_GetFrameworks::Response_GetFrameworks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetFrameworks)
}

void Response_GetFrameworks::InitAsDefaultInstance() {
}

Response_GetFrameworks::Response_GetFrameworks(const Response_GetFrameworks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetFrameworks)
}

void Response_GetFrameworks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetFrameworks::~Response_GetFrameworks() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetFrameworks)
  SharedDtor();
}

void Response_GetFrameworks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetFrameworks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetFrameworks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetFrameworks_descriptor_;
}

const Response_GetFrameworks& Response_GetFrameworks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetFrameworks* Response_GetFrameworks::default_instance_ = NULL;

Response_GetFrameworks* Response_GetFrameworks::New() const {
  return new Response_GetFrameworks;
}

void Response_GetFrameworks::Clear() {
  frameworks_.Clear();
  completed_frameworks_.Clear();
  recovered_frameworks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetFrameworks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetFrameworks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.master_p.Response.GetFrameworks.Framework frameworks = 1;
      case 1: {
        if (tag == 10) {
         parse_frameworks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frameworks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_frameworks;
        if (input->ExpectTag(18)) goto parse_completed_frameworks;
        break;
      }

      // repeated .mesos.master_p.Response.GetFrameworks.Framework completed_frameworks = 2;
      case 2: {
        if (tag == 18) {
         parse_completed_frameworks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_completed_frameworks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_completed_frameworks;
        if (input->ExpectTag(26)) goto parse_recovered_frameworks;
        break;
      }

      // repeated .mesos.FrameworkInfo recovered_frameworks = 3;
      case 3: {
        if (tag == 26) {
         parse_recovered_frameworks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recovered_frameworks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_recovered_frameworks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetFrameworks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetFrameworks)
  return false;
#undef DO_
}

void Response_GetFrameworks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetFrameworks)
  // repeated .mesos.master_p.Response.GetFrameworks.Framework frameworks = 1;
  for (int i = 0; i < this->frameworks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->frameworks(i), output);
  }

  // repeated .mesos.master_p.Response.GetFrameworks.Framework completed_frameworks = 2;
  for (int i = 0; i < this->completed_frameworks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->completed_frameworks(i), output);
  }

  // repeated .mesos.FrameworkInfo recovered_frameworks = 3;
  for (int i = 0; i < this->recovered_frameworks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->recovered_frameworks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetFrameworks)
}

::google::protobuf::uint8* Response_GetFrameworks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetFrameworks)
  // repeated .mesos.master_p.Response.GetFrameworks.Framework frameworks = 1;
  for (int i = 0; i < this->frameworks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->frameworks(i), target);
  }

  // repeated .mesos.master_p.Response.GetFrameworks.Framework completed_frameworks = 2;
  for (int i = 0; i < this->completed_frameworks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->completed_frameworks(i), target);
  }

  // repeated .mesos.FrameworkInfo recovered_frameworks = 3;
  for (int i = 0; i < this->recovered_frameworks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->recovered_frameworks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetFrameworks)
  return target;
}

int Response_GetFrameworks::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.master_p.Response.GetFrameworks.Framework frameworks = 1;
  total_size += 1 * this->frameworks_size();
  for (int i = 0; i < this->frameworks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frameworks(i));
  }

  // repeated .mesos.master_p.Response.GetFrameworks.Framework completed_frameworks = 2;
  total_size += 1 * this->completed_frameworks_size();
  for (int i = 0; i < this->completed_frameworks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->completed_frameworks(i));
  }

  // repeated .mesos.FrameworkInfo recovered_frameworks = 3;
  total_size += 1 * this->recovered_frameworks_size();
  for (int i = 0; i < this->recovered_frameworks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recovered_frameworks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetFrameworks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetFrameworks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetFrameworks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetFrameworks::MergeFrom(const Response_GetFrameworks& from) {
  GOOGLE_CHECK_NE(&from, this);
  frameworks_.MergeFrom(from.frameworks_);
  completed_frameworks_.MergeFrom(from.completed_frameworks_);
  recovered_frameworks_.MergeFrom(from.recovered_frameworks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetFrameworks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetFrameworks::CopyFrom(const Response_GetFrameworks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetFrameworks::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->frameworks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->completed_frameworks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->recovered_frameworks())) return false;
  return true;
}

void Response_GetFrameworks::Swap(Response_GetFrameworks* other) {
  if (other != this) {
    frameworks_.Swap(&other->frameworks_);
    completed_frameworks_.Swap(&other->completed_frameworks_);
    recovered_frameworks_.Swap(&other->recovered_frameworks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetFrameworks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetFrameworks_descriptor_;
  metadata.reflection = Response_GetFrameworks_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetExecutors_Executor::kExecutorInfoFieldNumber;
const int Response_GetExecutors_Executor::kSlaveIdFieldNumber;
#endif  // !_MSC_VER

Response_GetExecutors_Executor::Response_GetExecutors_Executor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetExecutors.Executor)
}

void Response_GetExecutors_Executor::InitAsDefaultInstance() {
  executor_info_ = const_cast< ::mesos::ExecutorInfo*>(&::mesos::ExecutorInfo::default_instance());
  slave_id_ = const_cast< ::mesos::SlaveID*>(&::mesos::SlaveID::default_instance());
}

Response_GetExecutors_Executor::Response_GetExecutors_Executor(const Response_GetExecutors_Executor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetExecutors.Executor)
}

void Response_GetExecutors_Executor::SharedCtor() {
  _cached_size_ = 0;
  executor_info_ = NULL;
  slave_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetExecutors_Executor::~Response_GetExecutors_Executor() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetExecutors.Executor)
  SharedDtor();
}

void Response_GetExecutors_Executor::SharedDtor() {
  if (this != default_instance_) {
    delete executor_info_;
    delete slave_id_;
  }
}

void Response_GetExecutors_Executor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetExecutors_Executor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetExecutors_Executor_descriptor_;
}

const Response_GetExecutors_Executor& Response_GetExecutors_Executor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetExecutors_Executor* Response_GetExecutors_Executor::default_instance_ = NULL;

Response_GetExecutors_Executor* Response_GetExecutors_Executor::New() const {
  return new Response_GetExecutors_Executor;
}

void Response_GetExecutors_Executor::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_executor_info()) {
      if (executor_info_ != NULL) executor_info_->::mesos::ExecutorInfo::Clear();
    }
    if (has_slave_id()) {
      if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetExecutors_Executor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetExecutors.Executor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.ExecutorInfo executor_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_executor_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_slave_id;
        break;
      }

      // required .mesos.SlaveID slave_id = 2;
      case 2: {
        if (tag == 18) {
         parse_slave_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slave_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetExecutors.Executor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetExecutors.Executor)
  return false;
#undef DO_
}

void Response_GetExecutors_Executor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetExecutors.Executor)
  // required .mesos.ExecutorInfo executor_info = 1;
  if (has_executor_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->executor_info(), output);
  }

  // required .mesos.SlaveID slave_id = 2;
  if (has_slave_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slave_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetExecutors.Executor)
}

::google::protobuf::uint8* Response_GetExecutors_Executor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetExecutors.Executor)
  // required .mesos.ExecutorInfo executor_info = 1;
  if (has_executor_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->executor_info(), target);
  }

  // required .mesos.SlaveID slave_id = 2;
  if (has_slave_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slave_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetExecutors.Executor)
  return target;
}

int Response_GetExecutors_Executor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.ExecutorInfo executor_info = 1;
    if (has_executor_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->executor_info());
    }

    // required .mesos.SlaveID slave_id = 2;
    if (has_slave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slave_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetExecutors_Executor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetExecutors_Executor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetExecutors_Executor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetExecutors_Executor::MergeFrom(const Response_GetExecutors_Executor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_executor_info()) {
      mutable_executor_info()->::mesos::ExecutorInfo::MergeFrom(from.executor_info());
    }
    if (from.has_slave_id()) {
      mutable_slave_id()->::mesos::SlaveID::MergeFrom(from.slave_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetExecutors_Executor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetExecutors_Executor::CopyFrom(const Response_GetExecutors_Executor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetExecutors_Executor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_executor_info()) {
    if (!this->executor_info().IsInitialized()) return false;
  }
  if (has_slave_id()) {
    if (!this->slave_id().IsInitialized()) return false;
  }
  return true;
}

void Response_GetExecutors_Executor::Swap(Response_GetExecutors_Executor* other) {
  if (other != this) {
    std::swap(executor_info_, other->executor_info_);
    std::swap(slave_id_, other->slave_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetExecutors_Executor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetExecutors_Executor_descriptor_;
  metadata.reflection = Response_GetExecutors_Executor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetExecutors::kExecutorsFieldNumber;
const int Response_GetExecutors::kOrphanExecutorsFieldNumber;
#endif  // !_MSC_VER

Response_GetExecutors::Response_GetExecutors()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetExecutors)
}

void Response_GetExecutors::InitAsDefaultInstance() {
}

Response_GetExecutors::Response_GetExecutors(const Response_GetExecutors& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetExecutors)
}

void Response_GetExecutors::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetExecutors::~Response_GetExecutors() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetExecutors)
  SharedDtor();
}

void Response_GetExecutors::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetExecutors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetExecutors::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetExecutors_descriptor_;
}

const Response_GetExecutors& Response_GetExecutors::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetExecutors* Response_GetExecutors::default_instance_ = NULL;

Response_GetExecutors* Response_GetExecutors::New() const {
  return new Response_GetExecutors;
}

void Response_GetExecutors::Clear() {
  executors_.Clear();
  orphan_executors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetExecutors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetExecutors)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.master_p.Response.GetExecutors.Executor executors = 1;
      case 1: {
        if (tag == 10) {
         parse_executors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_executors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_executors;
        if (input->ExpectTag(18)) goto parse_orphan_executors;
        break;
      }

      // repeated .mesos.master_p.Response.GetExecutors.Executor orphan_executors = 2;
      case 2: {
        if (tag == 18) {
         parse_orphan_executors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orphan_executors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orphan_executors;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetExecutors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetExecutors)
  return false;
#undef DO_
}

void Response_GetExecutors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetExecutors)
  // repeated .mesos.master_p.Response.GetExecutors.Executor executors = 1;
  for (int i = 0; i < this->executors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->executors(i), output);
  }

  // repeated .mesos.master_p.Response.GetExecutors.Executor orphan_executors = 2;
  for (int i = 0; i < this->orphan_executors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->orphan_executors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetExecutors)
}

::google::protobuf::uint8* Response_GetExecutors::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetExecutors)
  // repeated .mesos.master_p.Response.GetExecutors.Executor executors = 1;
  for (int i = 0; i < this->executors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->executors(i), target);
  }

  // repeated .mesos.master_p.Response.GetExecutors.Executor orphan_executors = 2;
  for (int i = 0; i < this->orphan_executors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->orphan_executors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetExecutors)
  return target;
}

int Response_GetExecutors::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.master_p.Response.GetExecutors.Executor executors = 1;
  total_size += 1 * this->executors_size();
  for (int i = 0; i < this->executors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->executors(i));
  }

  // repeated .mesos.master_p.Response.GetExecutors.Executor orphan_executors = 2;
  total_size += 1 * this->orphan_executors_size();
  for (int i = 0; i < this->orphan_executors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orphan_executors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetExecutors::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetExecutors* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetExecutors*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetExecutors::MergeFrom(const Response_GetExecutors& from) {
  GOOGLE_CHECK_NE(&from, this);
  executors_.MergeFrom(from.executors_);
  orphan_executors_.MergeFrom(from.orphan_executors_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetExecutors::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetExecutors::CopyFrom(const Response_GetExecutors& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetExecutors::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->executors())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->orphan_executors())) return false;
  return true;
}

void Response_GetExecutors::Swap(Response_GetExecutors* other) {
  if (other != this) {
    executors_.Swap(&other->executors_);
    orphan_executors_.Swap(&other->orphan_executors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetExecutors::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetExecutors_descriptor_;
  metadata.reflection = Response_GetExecutors_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetTasks::kPendingTasksFieldNumber;
const int Response_GetTasks::kTasksFieldNumber;
const int Response_GetTasks::kUnreachableTasksFieldNumber;
const int Response_GetTasks::kCompletedTasksFieldNumber;
const int Response_GetTasks::kOrphanTasksFieldNumber;
#endif  // !_MSC_VER

Response_GetTasks::Response_GetTasks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetTasks)
}

void Response_GetTasks::InitAsDefaultInstance() {
}

Response_GetTasks::Response_GetTasks(const Response_GetTasks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetTasks)
}

void Response_GetTasks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetTasks::~Response_GetTasks() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetTasks)
  SharedDtor();
}

void Response_GetTasks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetTasks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetTasks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetTasks_descriptor_;
}

const Response_GetTasks& Response_GetTasks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetTasks* Response_GetTasks::default_instance_ = NULL;

Response_GetTasks* Response_GetTasks::New() const {
  return new Response_GetTasks;
}

void Response_GetTasks::Clear() {
  pending_tasks_.Clear();
  tasks_.Clear();
  unreachable_tasks_.Clear();
  completed_tasks_.Clear();
  orphan_tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetTasks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetTasks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.Task pending_tasks = 1;
      case 1: {
        if (tag == 10) {
         parse_pending_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pending_tasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pending_tasks;
        if (input->ExpectTag(18)) goto parse_tasks;
        break;
      }

      // repeated .mesos.Task tasks = 2;
      case 2: {
        if (tag == 18) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tasks;
        if (input->ExpectTag(26)) goto parse_completed_tasks;
        break;
      }

      // repeated .mesos.Task completed_tasks = 3;
      case 3: {
        if (tag == 26) {
         parse_completed_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_completed_tasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_completed_tasks;
        if (input->ExpectTag(34)) goto parse_orphan_tasks;
        break;
      }

      // repeated .mesos.Task orphan_tasks = 4;
      case 4: {
        if (tag == 34) {
         parse_orphan_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orphan_tasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_orphan_tasks;
        if (input->ExpectTag(42)) goto parse_unreachable_tasks;
        break;
      }

      // repeated .mesos.Task unreachable_tasks = 5;
      case 5: {
        if (tag == 42) {
         parse_unreachable_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unreachable_tasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_unreachable_tasks;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetTasks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetTasks)
  return false;
#undef DO_
}

void Response_GetTasks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetTasks)
  // repeated .mesos.Task pending_tasks = 1;
  for (int i = 0; i < this->pending_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pending_tasks(i), output);
  }

  // repeated .mesos.Task tasks = 2;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tasks(i), output);
  }

  // repeated .mesos.Task completed_tasks = 3;
  for (int i = 0; i < this->completed_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->completed_tasks(i), output);
  }

  // repeated .mesos.Task orphan_tasks = 4;
  for (int i = 0; i < this->orphan_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->orphan_tasks(i), output);
  }

  // repeated .mesos.Task unreachable_tasks = 5;
  for (int i = 0; i < this->unreachable_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->unreachable_tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetTasks)
}

::google::protobuf::uint8* Response_GetTasks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetTasks)
  // repeated .mesos.Task pending_tasks = 1;
  for (int i = 0; i < this->pending_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pending_tasks(i), target);
  }

  // repeated .mesos.Task tasks = 2;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tasks(i), target);
  }

  // repeated .mesos.Task completed_tasks = 3;
  for (int i = 0; i < this->completed_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->completed_tasks(i), target);
  }

  // repeated .mesos.Task orphan_tasks = 4;
  for (int i = 0; i < this->orphan_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->orphan_tasks(i), target);
  }

  // repeated .mesos.Task unreachable_tasks = 5;
  for (int i = 0; i < this->unreachable_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->unreachable_tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetTasks)
  return target;
}

int Response_GetTasks::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.Task pending_tasks = 1;
  total_size += 1 * this->pending_tasks_size();
  for (int i = 0; i < this->pending_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pending_tasks(i));
  }

  // repeated .mesos.Task tasks = 2;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  // repeated .mesos.Task unreachable_tasks = 5;
  total_size += 1 * this->unreachable_tasks_size();
  for (int i = 0; i < this->unreachable_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unreachable_tasks(i));
  }

  // repeated .mesos.Task completed_tasks = 3;
  total_size += 1 * this->completed_tasks_size();
  for (int i = 0; i < this->completed_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->completed_tasks(i));
  }

  // repeated .mesos.Task orphan_tasks = 4;
  total_size += 1 * this->orphan_tasks_size();
  for (int i = 0; i < this->orphan_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orphan_tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetTasks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetTasks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetTasks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetTasks::MergeFrom(const Response_GetTasks& from) {
  GOOGLE_CHECK_NE(&from, this);
  pending_tasks_.MergeFrom(from.pending_tasks_);
  tasks_.MergeFrom(from.tasks_);
  unreachable_tasks_.MergeFrom(from.unreachable_tasks_);
  completed_tasks_.MergeFrom(from.completed_tasks_);
  orphan_tasks_.MergeFrom(from.orphan_tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetTasks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetTasks::CopyFrom(const Response_GetTasks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetTasks::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->pending_tasks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tasks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->unreachable_tasks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->completed_tasks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->orphan_tasks())) return false;
  return true;
}

void Response_GetTasks::Swap(Response_GetTasks* other) {
  if (other != this) {
    pending_tasks_.Swap(&other->pending_tasks_);
    tasks_.Swap(&other->tasks_);
    unreachable_tasks_.Swap(&other->unreachable_tasks_);
    completed_tasks_.Swap(&other->completed_tasks_);
    orphan_tasks_.Swap(&other->orphan_tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetTasks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetTasks_descriptor_;
  metadata.reflection = Response_GetTasks_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetRoles::kRolesFieldNumber;
#endif  // !_MSC_VER

Response_GetRoles::Response_GetRoles()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetRoles)
}

void Response_GetRoles::InitAsDefaultInstance() {
}

Response_GetRoles::Response_GetRoles(const Response_GetRoles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetRoles)
}

void Response_GetRoles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetRoles::~Response_GetRoles() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetRoles)
  SharedDtor();
}

void Response_GetRoles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetRoles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetRoles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetRoles_descriptor_;
}

const Response_GetRoles& Response_GetRoles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetRoles* Response_GetRoles::default_instance_ = NULL;

Response_GetRoles* Response_GetRoles::New() const {
  return new Response_GetRoles;
}

void Response_GetRoles::Clear() {
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetRoles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetRoles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.Role roles = 1;
      case 1: {
        if (tag == 10) {
         parse_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_roles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetRoles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetRoles)
  return false;
#undef DO_
}

void Response_GetRoles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetRoles)
  // repeated .mesos.Role roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetRoles)
}

::google::protobuf::uint8* Response_GetRoles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetRoles)
  // repeated .mesos.Role roles = 1;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetRoles)
  return target;
}

int Response_GetRoles::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.Role roles = 1;
  total_size += 1 * this->roles_size();
  for (int i = 0; i < this->roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetRoles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetRoles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetRoles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetRoles::MergeFrom(const Response_GetRoles& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetRoles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetRoles::CopyFrom(const Response_GetRoles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetRoles::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->roles())) return false;
  return true;
}

void Response_GetRoles::Swap(Response_GetRoles* other) {
  if (other != this) {
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetRoles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetRoles_descriptor_;
  metadata.reflection = Response_GetRoles_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetWeights::kWeightInfosFieldNumber;
#endif  // !_MSC_VER

Response_GetWeights::Response_GetWeights()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetWeights)
}

void Response_GetWeights::InitAsDefaultInstance() {
}

Response_GetWeights::Response_GetWeights(const Response_GetWeights& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetWeights)
}

void Response_GetWeights::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetWeights::~Response_GetWeights() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetWeights)
  SharedDtor();
}

void Response_GetWeights::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetWeights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetWeights::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetWeights_descriptor_;
}

const Response_GetWeights& Response_GetWeights::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetWeights* Response_GetWeights::default_instance_ = NULL;

Response_GetWeights* Response_GetWeights::New() const {
  return new Response_GetWeights;
}

void Response_GetWeights::Clear() {
  weight_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetWeights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetWeights)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mesos.WeightInfo weight_infos = 1;
      case 1: {
        if (tag == 10) {
         parse_weight_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weight_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_weight_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetWeights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetWeights)
  return false;
#undef DO_
}

void Response_GetWeights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetWeights)
  // repeated .mesos.WeightInfo weight_infos = 1;
  for (int i = 0; i < this->weight_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->weight_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetWeights)
}

::google::protobuf::uint8* Response_GetWeights::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetWeights)
  // repeated .mesos.WeightInfo weight_infos = 1;
  for (int i = 0; i < this->weight_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->weight_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetWeights)
  return target;
}

int Response_GetWeights::ByteSize() const {
  int total_size = 0;

  // repeated .mesos.WeightInfo weight_infos = 1;
  total_size += 1 * this->weight_infos_size();
  for (int i = 0; i < this->weight_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weight_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetWeights::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetWeights* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetWeights*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetWeights::MergeFrom(const Response_GetWeights& from) {
  GOOGLE_CHECK_NE(&from, this);
  weight_infos_.MergeFrom(from.weight_infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetWeights::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetWeights::CopyFrom(const Response_GetWeights& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetWeights::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->weight_infos())) return false;
  return true;
}

void Response_GetWeights::Swap(Response_GetWeights* other) {
  if (other != this) {
    weight_infos_.Swap(&other->weight_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetWeights::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetWeights_descriptor_;
  metadata.reflection = Response_GetWeights_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetMaster::kMasterInfoFieldNumber;
#endif  // !_MSC_VER

Response_GetMaster::Response_GetMaster()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetMaster)
}

void Response_GetMaster::InitAsDefaultInstance() {
  master_info_ = const_cast< ::mesos::MasterInfo*>(&::mesos::MasterInfo::default_instance());
}

Response_GetMaster::Response_GetMaster(const Response_GetMaster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetMaster)
}

void Response_GetMaster::SharedCtor() {
  _cached_size_ = 0;
  master_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetMaster::~Response_GetMaster() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetMaster)
  SharedDtor();
}

void Response_GetMaster::SharedDtor() {
  if (this != default_instance_) {
    delete master_info_;
  }
}

void Response_GetMaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetMaster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetMaster_descriptor_;
}

const Response_GetMaster& Response_GetMaster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetMaster* Response_GetMaster::default_instance_ = NULL;

Response_GetMaster* Response_GetMaster::New() const {
  return new Response_GetMaster;
}

void Response_GetMaster::Clear() {
  if (has_master_info()) {
    if (master_info_ != NULL) master_info_->::mesos::MasterInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetMaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetMaster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.MasterInfo master_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetMaster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetMaster)
  return false;
#undef DO_
}

void Response_GetMaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetMaster)
  // optional .mesos.MasterInfo master_info = 1;
  if (has_master_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->master_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetMaster)
}

::google::protobuf::uint8* Response_GetMaster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetMaster)
  // optional .mesos.MasterInfo master_info = 1;
  if (has_master_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->master_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetMaster)
  return target;
}

int Response_GetMaster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.MasterInfo master_info = 1;
    if (has_master_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetMaster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetMaster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetMaster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetMaster::MergeFrom(const Response_GetMaster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_info()) {
      mutable_master_info()->::mesos::MasterInfo::MergeFrom(from.master_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetMaster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetMaster::CopyFrom(const Response_GetMaster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetMaster::IsInitialized() const {

  if (has_master_info()) {
    if (!this->master_info().IsInitialized()) return false;
  }
  return true;
}

void Response_GetMaster::Swap(Response_GetMaster* other) {
  if (other != this) {
    std::swap(master_info_, other->master_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetMaster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetMaster_descriptor_;
  metadata.reflection = Response_GetMaster_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetMaintenanceStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

Response_GetMaintenanceStatus::Response_GetMaintenanceStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetMaintenanceStatus)
}

void Response_GetMaintenanceStatus::InitAsDefaultInstance() {
  status_ = const_cast< ::mesos::maintenance::ClusterStatus*>(&::mesos::maintenance::ClusterStatus::default_instance());
}

Response_GetMaintenanceStatus::Response_GetMaintenanceStatus(const Response_GetMaintenanceStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetMaintenanceStatus)
}

void Response_GetMaintenanceStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetMaintenanceStatus::~Response_GetMaintenanceStatus() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetMaintenanceStatus)
  SharedDtor();
}

void Response_GetMaintenanceStatus::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void Response_GetMaintenanceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetMaintenanceStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetMaintenanceStatus_descriptor_;
}

const Response_GetMaintenanceStatus& Response_GetMaintenanceStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetMaintenanceStatus* Response_GetMaintenanceStatus::default_instance_ = NULL;

Response_GetMaintenanceStatus* Response_GetMaintenanceStatus::New() const {
  return new Response_GetMaintenanceStatus;
}

void Response_GetMaintenanceStatus::Clear() {
  if (has_status()) {
    if (status_ != NULL) status_->::mesos::maintenance::ClusterStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetMaintenanceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetMaintenanceStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.maintenance.ClusterStatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetMaintenanceStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetMaintenanceStatus)
  return false;
#undef DO_
}

void Response_GetMaintenanceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetMaintenanceStatus)
  // required .mesos.maintenance.ClusterStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetMaintenanceStatus)
}

::google::protobuf::uint8* Response_GetMaintenanceStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetMaintenanceStatus)
  // required .mesos.maintenance.ClusterStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetMaintenanceStatus)
  return target;
}

int Response_GetMaintenanceStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.maintenance.ClusterStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetMaintenanceStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetMaintenanceStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetMaintenanceStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetMaintenanceStatus::MergeFrom(const Response_GetMaintenanceStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::mesos::maintenance::ClusterStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetMaintenanceStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetMaintenanceStatus::CopyFrom(const Response_GetMaintenanceStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetMaintenanceStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void Response_GetMaintenanceStatus::Swap(Response_GetMaintenanceStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetMaintenanceStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetMaintenanceStatus_descriptor_;
  metadata.reflection = Response_GetMaintenanceStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetMaintenanceSchedule::kScheduleFieldNumber;
#endif  // !_MSC_VER

Response_GetMaintenanceSchedule::Response_GetMaintenanceSchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetMaintenanceSchedule)
}

void Response_GetMaintenanceSchedule::InitAsDefaultInstance() {
  schedule_ = const_cast< ::mesos::maintenance::Schedule*>(&::mesos::maintenance::Schedule::default_instance());
}

Response_GetMaintenanceSchedule::Response_GetMaintenanceSchedule(const Response_GetMaintenanceSchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetMaintenanceSchedule)
}

void Response_GetMaintenanceSchedule::SharedCtor() {
  _cached_size_ = 0;
  schedule_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetMaintenanceSchedule::~Response_GetMaintenanceSchedule() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetMaintenanceSchedule)
  SharedDtor();
}

void Response_GetMaintenanceSchedule::SharedDtor() {
  if (this != default_instance_) {
    delete schedule_;
  }
}

void Response_GetMaintenanceSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetMaintenanceSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetMaintenanceSchedule_descriptor_;
}

const Response_GetMaintenanceSchedule& Response_GetMaintenanceSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetMaintenanceSchedule* Response_GetMaintenanceSchedule::default_instance_ = NULL;

Response_GetMaintenanceSchedule* Response_GetMaintenanceSchedule::New() const {
  return new Response_GetMaintenanceSchedule;
}

void Response_GetMaintenanceSchedule::Clear() {
  if (has_schedule()) {
    if (schedule_ != NULL) schedule_->::mesos::maintenance::Schedule::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetMaintenanceSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetMaintenanceSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.maintenance.Schedule schedule = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schedule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetMaintenanceSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetMaintenanceSchedule)
  return false;
#undef DO_
}

void Response_GetMaintenanceSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetMaintenanceSchedule)
  // required .mesos.maintenance.Schedule schedule = 1;
  if (has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->schedule(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetMaintenanceSchedule)
}

::google::protobuf::uint8* Response_GetMaintenanceSchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetMaintenanceSchedule)
  // required .mesos.maintenance.Schedule schedule = 1;
  if (has_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->schedule(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetMaintenanceSchedule)
  return target;
}

int Response_GetMaintenanceSchedule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.maintenance.Schedule schedule = 1;
    if (has_schedule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schedule());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetMaintenanceSchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetMaintenanceSchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetMaintenanceSchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetMaintenanceSchedule::MergeFrom(const Response_GetMaintenanceSchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schedule()) {
      mutable_schedule()->::mesos::maintenance::Schedule::MergeFrom(from.schedule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetMaintenanceSchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetMaintenanceSchedule::CopyFrom(const Response_GetMaintenanceSchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetMaintenanceSchedule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_schedule()) {
    if (!this->schedule().IsInitialized()) return false;
  }
  return true;
}

void Response_GetMaintenanceSchedule::Swap(Response_GetMaintenanceSchedule* other) {
  if (other != this) {
    std::swap(schedule_, other->schedule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetMaintenanceSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetMaintenanceSchedule_descriptor_;
  metadata.reflection = Response_GetMaintenanceSchedule_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetQuota::kStatusFieldNumber;
#endif  // !_MSC_VER

Response_GetQuota::Response_GetQuota()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response.GetQuota)
}

void Response_GetQuota::InitAsDefaultInstance() {
  status_ = const_cast< ::mesos::quota::QuotaStatus*>(&::mesos::quota::QuotaStatus::default_instance());
}

Response_GetQuota::Response_GetQuota(const Response_GetQuota& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response.GetQuota)
}

void Response_GetQuota::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetQuota::~Response_GetQuota() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response.GetQuota)
  SharedDtor();
}

void Response_GetQuota::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void Response_GetQuota::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetQuota::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetQuota_descriptor_;
}

const Response_GetQuota& Response_GetQuota::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response_GetQuota* Response_GetQuota::default_instance_ = NULL;

Response_GetQuota* Response_GetQuota::New() const {
  return new Response_GetQuota;
}

void Response_GetQuota::Clear() {
  if (has_status()) {
    if (status_ != NULL) status_->::mesos::quota::QuotaStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetQuota::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response.GetQuota)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.quota.QuotaStatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response.GetQuota)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response.GetQuota)
  return false;
#undef DO_
}

void Response_GetQuota::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response.GetQuota)
  // required .mesos.quota.QuotaStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response.GetQuota)
}

::google::protobuf::uint8* Response_GetQuota::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response.GetQuota)
  // required .mesos.quota.QuotaStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response.GetQuota)
  return target;
}

int Response_GetQuota::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.quota.QuotaStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetQuota::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetQuota* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetQuota*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetQuota::MergeFrom(const Response_GetQuota& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::mesos::quota::QuotaStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetQuota::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetQuota::CopyFrom(const Response_GetQuota& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetQuota::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void Response_GetQuota::Swap(Response_GetQuota* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetQuota::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetQuota_descriptor_;
  metadata.reflection = Response_GetQuota_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response::kTypeFieldNumber;
const int Response::kGetHealthFieldNumber;
const int Response::kGetFlagsFieldNumber;
const int Response::kGetVersionFieldNumber;
const int Response::kGetMetricsFieldNumber;
const int Response::kGetLoggingLevelFieldNumber;
const int Response::kListFilesFieldNumber;
const int Response::kReadFileFieldNumber;
const int Response::kGetStateFieldNumber;
const int Response::kGetAgentsFieldNumber;
const int Response::kGetFrameworksFieldNumber;
const int Response::kGetExecutorsFieldNumber;
const int Response::kGetTasksFieldNumber;
const int Response::kGetRolesFieldNumber;
const int Response::kGetWeightsFieldNumber;
const int Response::kGetMasterFieldNumber;
const int Response::kGetMaintenanceStatusFieldNumber;
const int Response::kGetMaintenanceScheduleFieldNumber;
const int Response::kGetQuotaFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Response)
}

void Response::InitAsDefaultInstance() {
  get_health_ = const_cast< ::mesos::master_p::Response_GetHealth*>(&::mesos::master_p::Response_GetHealth::default_instance());
  get_flags_ = const_cast< ::mesos::master_p::Response_GetFlags*>(&::mesos::master_p::Response_GetFlags::default_instance());
  get_version_ = const_cast< ::mesos::master_p::Response_GetVersion*>(&::mesos::master_p::Response_GetVersion::default_instance());
  get_metrics_ = const_cast< ::mesos::master_p::Response_GetMetrics*>(&::mesos::master_p::Response_GetMetrics::default_instance());
  get_logging_level_ = const_cast< ::mesos::master_p::Response_GetLoggingLevel*>(&::mesos::master_p::Response_GetLoggingLevel::default_instance());
  list_files_ = const_cast< ::mesos::master_p::Response_ListFiles*>(&::mesos::master_p::Response_ListFiles::default_instance());
  read_file_ = const_cast< ::mesos::master_p::Response_ReadFile*>(&::mesos::master_p::Response_ReadFile::default_instance());
  get_state_ = const_cast< ::mesos::master_p::Response_GetState*>(&::mesos::master_p::Response_GetState::default_instance());
  get_agents_ = const_cast< ::mesos::master_p::Response_GetAgents*>(&::mesos::master_p::Response_GetAgents::default_instance());
  get_frameworks_ = const_cast< ::mesos::master_p::Response_GetFrameworks*>(&::mesos::master_p::Response_GetFrameworks::default_instance());
  get_executors_ = const_cast< ::mesos::master_p::Response_GetExecutors*>(&::mesos::master_p::Response_GetExecutors::default_instance());
  get_tasks_ = const_cast< ::mesos::master_p::Response_GetTasks*>(&::mesos::master_p::Response_GetTasks::default_instance());
  get_roles_ = const_cast< ::mesos::master_p::Response_GetRoles*>(&::mesos::master_p::Response_GetRoles::default_instance());
  get_weights_ = const_cast< ::mesos::master_p::Response_GetWeights*>(&::mesos::master_p::Response_GetWeights::default_instance());
  get_master_ = const_cast< ::mesos::master_p::Response_GetMaster*>(&::mesos::master_p::Response_GetMaster::default_instance());
  get_maintenance_status_ = const_cast< ::mesos::master_p::Response_GetMaintenanceStatus*>(&::mesos::master_p::Response_GetMaintenanceStatus::default_instance());
  get_maintenance_schedule_ = const_cast< ::mesos::master_p::Response_GetMaintenanceSchedule*>(&::mesos::master_p::Response_GetMaintenanceSchedule::default_instance());
  get_quota_ = const_cast< ::mesos::master_p::Response_GetQuota*>(&::mesos::master_p::Response_GetQuota::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  get_health_ = NULL;
  get_flags_ = NULL;
  get_version_ = NULL;
  get_metrics_ = NULL;
  get_logging_level_ = NULL;
  list_files_ = NULL;
  read_file_ = NULL;
  get_state_ = NULL;
  get_agents_ = NULL;
  get_frameworks_ = NULL;
  get_executors_ = NULL;
  get_tasks_ = NULL;
  get_roles_ = NULL;
  get_weights_ = NULL;
  get_master_ = NULL;
  get_maintenance_status_ = NULL;
  get_maintenance_schedule_ = NULL;
  get_quota_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete get_health_;
    delete get_flags_;
    delete get_version_;
    delete get_metrics_;
    delete get_logging_level_;
    delete list_files_;
    delete read_file_;
    delete get_state_;
    delete get_agents_;
    delete get_frameworks_;
    delete get_executors_;
    delete get_tasks_;
    delete get_roles_;
    delete get_weights_;
    delete get_master_;
    delete get_maintenance_status_;
    delete get_maintenance_schedule_;
    delete get_quota_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = 0;
    if (has_get_health()) {
      if (get_health_ != NULL) get_health_->::mesos::master_p::Response_GetHealth::Clear();
    }
    if (has_get_flags()) {
      if (get_flags_ != NULL) get_flags_->::mesos::master_p::Response_GetFlags::Clear();
    }
    if (has_get_version()) {
      if (get_version_ != NULL) get_version_->::mesos::master_p::Response_GetVersion::Clear();
    }
    if (has_get_metrics()) {
      if (get_metrics_ != NULL) get_metrics_->::mesos::master_p::Response_GetMetrics::Clear();
    }
    if (has_get_logging_level()) {
      if (get_logging_level_ != NULL) get_logging_level_->::mesos::master_p::Response_GetLoggingLevel::Clear();
    }
    if (has_list_files()) {
      if (list_files_ != NULL) list_files_->::mesos::master_p::Response_ListFiles::Clear();
    }
    if (has_read_file()) {
      if (read_file_ != NULL) read_file_->::mesos::master_p::Response_ReadFile::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_get_state()) {
      if (get_state_ != NULL) get_state_->::mesos::master_p::Response_GetState::Clear();
    }
    if (has_get_agents()) {
      if (get_agents_ != NULL) get_agents_->::mesos::master_p::Response_GetAgents::Clear();
    }
    if (has_get_frameworks()) {
      if (get_frameworks_ != NULL) get_frameworks_->::mesos::master_p::Response_GetFrameworks::Clear();
    }
    if (has_get_executors()) {
      if (get_executors_ != NULL) get_executors_->::mesos::master_p::Response_GetExecutors::Clear();
    }
    if (has_get_tasks()) {
      if (get_tasks_ != NULL) get_tasks_->::mesos::master_p::Response_GetTasks::Clear();
    }
    if (has_get_roles()) {
      if (get_roles_ != NULL) get_roles_->::mesos::master_p::Response_GetRoles::Clear();
    }
    if (has_get_weights()) {
      if (get_weights_ != NULL) get_weights_->::mesos::master_p::Response_GetWeights::Clear();
    }
    if (has_get_master()) {
      if (get_master_ != NULL) get_master_->::mesos::master_p::Response_GetMaster::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    if (has_get_maintenance_status()) {
      if (get_maintenance_status_ != NULL) get_maintenance_status_->::mesos::master_p::Response_GetMaintenanceStatus::Clear();
    }
    if (has_get_maintenance_schedule()) {
      if (get_maintenance_schedule_ != NULL) get_maintenance_schedule_->::mesos::master_p::Response_GetMaintenanceSchedule::Clear();
    }
    if (has_get_quota()) {
      if (get_quota_ != NULL) get_quota_->::mesos::master_p::Response_GetQuota::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.master_p.Response.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::master_p::Response_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::master_p::Response_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_get_health;
        break;
      }

      // optional .mesos.master_p.Response.GetHealth get_health = 2;
      case 2: {
        if (tag == 18) {
         parse_get_health:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_health()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_get_flags;
        break;
      }

      // optional .mesos.master_p.Response.GetFlags get_flags = 3;
      case 3: {
        if (tag == 26) {
         parse_get_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_flags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_get_version;
        break;
      }

      // optional .mesos.master_p.Response.GetVersion get_version = 4;
      case 4: {
        if (tag == 34) {
         parse_get_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_get_metrics;
        break;
      }

      // optional .mesos.master_p.Response.GetMetrics get_metrics = 5;
      case 5: {
        if (tag == 42) {
         parse_get_metrics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_metrics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_get_logging_level;
        break;
      }

      // optional .mesos.master_p.Response.GetLoggingLevel get_logging_level = 6;
      case 6: {
        if (tag == 50) {
         parse_get_logging_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_logging_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_list_files;
        break;
      }

      // optional .mesos.master_p.Response.ListFiles list_files = 7;
      case 7: {
        if (tag == 58) {
         parse_list_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_files()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_read_file;
        break;
      }

      // optional .mesos.master_p.Response.ReadFile read_file = 8;
      case 8: {
        if (tag == 66) {
         parse_read_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_get_state;
        break;
      }

      // optional .mesos.master_p.Response.GetState get_state = 9;
      case 9: {
        if (tag == 74) {
         parse_get_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_get_agents;
        break;
      }

      // optional .mesos.master_p.Response.GetAgents get_agents = 10;
      case 10: {
        if (tag == 82) {
         parse_get_agents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_agents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_get_frameworks;
        break;
      }

      // optional .mesos.master_p.Response.GetFrameworks get_frameworks = 11;
      case 11: {
        if (tag == 90) {
         parse_get_frameworks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_frameworks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_get_executors;
        break;
      }

      // optional .mesos.master_p.Response.GetExecutors get_executors = 12;
      case 12: {
        if (tag == 98) {
         parse_get_executors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_executors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_get_tasks;
        break;
      }

      // optional .mesos.master_p.Response.GetTasks get_tasks = 13;
      case 13: {
        if (tag == 106) {
         parse_get_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_tasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_get_roles;
        break;
      }

      // optional .mesos.master_p.Response.GetRoles get_roles = 14;
      case 14: {
        if (tag == 114) {
         parse_get_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_roles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_get_weights;
        break;
      }

      // optional .mesos.master_p.Response.GetWeights get_weights = 15;
      case 15: {
        if (tag == 122) {
         parse_get_weights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_weights()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_get_master;
        break;
      }

      // optional .mesos.master_p.Response.GetMaster get_master = 16;
      case 16: {
        if (tag == 130) {
         parse_get_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_master()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_get_maintenance_status;
        break;
      }

      // optional .mesos.master_p.Response.GetMaintenanceStatus get_maintenance_status = 17;
      case 17: {
        if (tag == 138) {
         parse_get_maintenance_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_maintenance_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_get_maintenance_schedule;
        break;
      }

      // optional .mesos.master_p.Response.GetMaintenanceSchedule get_maintenance_schedule = 18;
      case 18: {
        if (tag == 146) {
         parse_get_maintenance_schedule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_maintenance_schedule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_get_quota;
        break;
      }

      // optional .mesos.master_p.Response.GetQuota get_quota = 19;
      case 19: {
        if (tag == 154) {
         parse_get_quota:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_quota()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Response)
  // optional .mesos.master_p.Response.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .mesos.master_p.Response.GetHealth get_health = 2;
  if (has_get_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->get_health(), output);
  }

  // optional .mesos.master_p.Response.GetFlags get_flags = 3;
  if (has_get_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->get_flags(), output);
  }

  // optional .mesos.master_p.Response.GetVersion get_version = 4;
  if (has_get_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->get_version(), output);
  }

  // optional .mesos.master_p.Response.GetMetrics get_metrics = 5;
  if (has_get_metrics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->get_metrics(), output);
  }

  // optional .mesos.master_p.Response.GetLoggingLevel get_logging_level = 6;
  if (has_get_logging_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->get_logging_level(), output);
  }

  // optional .mesos.master_p.Response.ListFiles list_files = 7;
  if (has_list_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->list_files(), output);
  }

  // optional .mesos.master_p.Response.ReadFile read_file = 8;
  if (has_read_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->read_file(), output);
  }

  // optional .mesos.master_p.Response.GetState get_state = 9;
  if (has_get_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->get_state(), output);
  }

  // optional .mesos.master_p.Response.GetAgents get_agents = 10;
  if (has_get_agents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->get_agents(), output);
  }

  // optional .mesos.master_p.Response.GetFrameworks get_frameworks = 11;
  if (has_get_frameworks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->get_frameworks(), output);
  }

  // optional .mesos.master_p.Response.GetExecutors get_executors = 12;
  if (has_get_executors()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->get_executors(), output);
  }

  // optional .mesos.master_p.Response.GetTasks get_tasks = 13;
  if (has_get_tasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->get_tasks(), output);
  }

  // optional .mesos.master_p.Response.GetRoles get_roles = 14;
  if (has_get_roles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->get_roles(), output);
  }

  // optional .mesos.master_p.Response.GetWeights get_weights = 15;
  if (has_get_weights()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->get_weights(), output);
  }

  // optional .mesos.master_p.Response.GetMaster get_master = 16;
  if (has_get_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->get_master(), output);
  }

  // optional .mesos.master_p.Response.GetMaintenanceStatus get_maintenance_status = 17;
  if (has_get_maintenance_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->get_maintenance_status(), output);
  }

  // optional .mesos.master_p.Response.GetMaintenanceSchedule get_maintenance_schedule = 18;
  if (has_get_maintenance_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->get_maintenance_schedule(), output);
  }

  // optional .mesos.master_p.Response.GetQuota get_quota = 19;
  if (has_get_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->get_quota(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Response)
  // optional .mesos.master_p.Response.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .mesos.master_p.Response.GetHealth get_health = 2;
  if (has_get_health()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->get_health(), target);
  }

  // optional .mesos.master_p.Response.GetFlags get_flags = 3;
  if (has_get_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->get_flags(), target);
  }

  // optional .mesos.master_p.Response.GetVersion get_version = 4;
  if (has_get_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->get_version(), target);
  }

  // optional .mesos.master_p.Response.GetMetrics get_metrics = 5;
  if (has_get_metrics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->get_metrics(), target);
  }

  // optional .mesos.master_p.Response.GetLoggingLevel get_logging_level = 6;
  if (has_get_logging_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->get_logging_level(), target);
  }

  // optional .mesos.master_p.Response.ListFiles list_files = 7;
  if (has_list_files()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->list_files(), target);
  }

  // optional .mesos.master_p.Response.ReadFile read_file = 8;
  if (has_read_file()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->read_file(), target);
  }

  // optional .mesos.master_p.Response.GetState get_state = 9;
  if (has_get_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->get_state(), target);
  }

  // optional .mesos.master_p.Response.GetAgents get_agents = 10;
  if (has_get_agents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->get_agents(), target);
  }

  // optional .mesos.master_p.Response.GetFrameworks get_frameworks = 11;
  if (has_get_frameworks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->get_frameworks(), target);
  }

  // optional .mesos.master_p.Response.GetExecutors get_executors = 12;
  if (has_get_executors()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->get_executors(), target);
  }

  // optional .mesos.master_p.Response.GetTasks get_tasks = 13;
  if (has_get_tasks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->get_tasks(), target);
  }

  // optional .mesos.master_p.Response.GetRoles get_roles = 14;
  if (has_get_roles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->get_roles(), target);
  }

  // optional .mesos.master_p.Response.GetWeights get_weights = 15;
  if (has_get_weights()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->get_weights(), target);
  }

  // optional .mesos.master_p.Response.GetMaster get_master = 16;
  if (has_get_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->get_master(), target);
  }

  // optional .mesos.master_p.Response.GetMaintenanceStatus get_maintenance_status = 17;
  if (has_get_maintenance_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->get_maintenance_status(), target);
  }

  // optional .mesos.master_p.Response.GetMaintenanceSchedule get_maintenance_schedule = 18;
  if (has_get_maintenance_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->get_maintenance_schedule(), target);
  }

  // optional .mesos.master_p.Response.GetQuota get_quota = 19;
  if (has_get_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->get_quota(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.master_p.Response.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .mesos.master_p.Response.GetHealth get_health = 2;
    if (has_get_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_health());
    }

    // optional .mesos.master_p.Response.GetFlags get_flags = 3;
    if (has_get_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_flags());
    }

    // optional .mesos.master_p.Response.GetVersion get_version = 4;
    if (has_get_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_version());
    }

    // optional .mesos.master_p.Response.GetMetrics get_metrics = 5;
    if (has_get_metrics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_metrics());
    }

    // optional .mesos.master_p.Response.GetLoggingLevel get_logging_level = 6;
    if (has_get_logging_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_logging_level());
    }

    // optional .mesos.master_p.Response.ListFiles list_files = 7;
    if (has_list_files()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_files());
    }

    // optional .mesos.master_p.Response.ReadFile read_file = 8;
    if (has_read_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read_file());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .mesos.master_p.Response.GetState get_state = 9;
    if (has_get_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_state());
    }

    // optional .mesos.master_p.Response.GetAgents get_agents = 10;
    if (has_get_agents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_agents());
    }

    // optional .mesos.master_p.Response.GetFrameworks get_frameworks = 11;
    if (has_get_frameworks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_frameworks());
    }

    // optional .mesos.master_p.Response.GetExecutors get_executors = 12;
    if (has_get_executors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_executors());
    }

    // optional .mesos.master_p.Response.GetTasks get_tasks = 13;
    if (has_get_tasks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_tasks());
    }

    // optional .mesos.master_p.Response.GetRoles get_roles = 14;
    if (has_get_roles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_roles());
    }

    // optional .mesos.master_p.Response.GetWeights get_weights = 15;
    if (has_get_weights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_weights());
    }

    // optional .mesos.master_p.Response.GetMaster get_master = 16;
    if (has_get_master()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_master());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .mesos.master_p.Response.GetMaintenanceStatus get_maintenance_status = 17;
    if (has_get_maintenance_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_maintenance_status());
    }

    // optional .mesos.master_p.Response.GetMaintenanceSchedule get_maintenance_schedule = 18;
    if (has_get_maintenance_schedule()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_maintenance_schedule());
    }

    // optional .mesos.master_p.Response.GetQuota get_quota = 19;
    if (has_get_quota()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_quota());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_get_health()) {
      mutable_get_health()->::mesos::master_p::Response_GetHealth::MergeFrom(from.get_health());
    }
    if (from.has_get_flags()) {
      mutable_get_flags()->::mesos::master_p::Response_GetFlags::MergeFrom(from.get_flags());
    }
    if (from.has_get_version()) {
      mutable_get_version()->::mesos::master_p::Response_GetVersion::MergeFrom(from.get_version());
    }
    if (from.has_get_metrics()) {
      mutable_get_metrics()->::mesos::master_p::Response_GetMetrics::MergeFrom(from.get_metrics());
    }
    if (from.has_get_logging_level()) {
      mutable_get_logging_level()->::mesos::master_p::Response_GetLoggingLevel::MergeFrom(from.get_logging_level());
    }
    if (from.has_list_files()) {
      mutable_list_files()->::mesos::master_p::Response_ListFiles::MergeFrom(from.list_files());
    }
    if (from.has_read_file()) {
      mutable_read_file()->::mesos::master_p::Response_ReadFile::MergeFrom(from.read_file());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_get_state()) {
      mutable_get_state()->::mesos::master_p::Response_GetState::MergeFrom(from.get_state());
    }
    if (from.has_get_agents()) {
      mutable_get_agents()->::mesos::master_p::Response_GetAgents::MergeFrom(from.get_agents());
    }
    if (from.has_get_frameworks()) {
      mutable_get_frameworks()->::mesos::master_p::Response_GetFrameworks::MergeFrom(from.get_frameworks());
    }
    if (from.has_get_executors()) {
      mutable_get_executors()->::mesos::master_p::Response_GetExecutors::MergeFrom(from.get_executors());
    }
    if (from.has_get_tasks()) {
      mutable_get_tasks()->::mesos::master_p::Response_GetTasks::MergeFrom(from.get_tasks());
    }
    if (from.has_get_roles()) {
      mutable_get_roles()->::mesos::master_p::Response_GetRoles::MergeFrom(from.get_roles());
    }
    if (from.has_get_weights()) {
      mutable_get_weights()->::mesos::master_p::Response_GetWeights::MergeFrom(from.get_weights());
    }
    if (from.has_get_master()) {
      mutable_get_master()->::mesos::master_p::Response_GetMaster::MergeFrom(from.get_master());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_get_maintenance_status()) {
      mutable_get_maintenance_status()->::mesos::master_p::Response_GetMaintenanceStatus::MergeFrom(from.get_maintenance_status());
    }
    if (from.has_get_maintenance_schedule()) {
      mutable_get_maintenance_schedule()->::mesos::master_p::Response_GetMaintenanceSchedule::MergeFrom(from.get_maintenance_schedule());
    }
    if (from.has_get_quota()) {
      mutable_get_quota()->::mesos::master_p::Response_GetQuota::MergeFrom(from.get_quota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  if (has_get_health()) {
    if (!this->get_health().IsInitialized()) return false;
  }
  if (has_get_flags()) {
    if (!this->get_flags().IsInitialized()) return false;
  }
  if (has_get_version()) {
    if (!this->get_version().IsInitialized()) return false;
  }
  if (has_get_metrics()) {
    if (!this->get_metrics().IsInitialized()) return false;
  }
  if (has_get_logging_level()) {
    if (!this->get_logging_level().IsInitialized()) return false;
  }
  if (has_list_files()) {
    if (!this->list_files().IsInitialized()) return false;
  }
  if (has_read_file()) {
    if (!this->read_file().IsInitialized()) return false;
  }
  if (has_get_state()) {
    if (!this->get_state().IsInitialized()) return false;
  }
  if (has_get_agents()) {
    if (!this->get_agents().IsInitialized()) return false;
  }
  if (has_get_frameworks()) {
    if (!this->get_frameworks().IsInitialized()) return false;
  }
  if (has_get_executors()) {
    if (!this->get_executors().IsInitialized()) return false;
  }
  if (has_get_tasks()) {
    if (!this->get_tasks().IsInitialized()) return false;
  }
  if (has_get_roles()) {
    if (!this->get_roles().IsInitialized()) return false;
  }
  if (has_get_weights()) {
    if (!this->get_weights().IsInitialized()) return false;
  }
  if (has_get_master()) {
    if (!this->get_master().IsInitialized()) return false;
  }
  if (has_get_maintenance_status()) {
    if (!this->get_maintenance_status().IsInitialized()) return false;
  }
  if (has_get_maintenance_schedule()) {
    if (!this->get_maintenance_schedule().IsInitialized()) return false;
  }
  if (has_get_quota()) {
    if (!this->get_quota().IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(get_health_, other->get_health_);
    std::swap(get_flags_, other->get_flags_);
    std::swap(get_version_, other->get_version_);
    std::swap(get_metrics_, other->get_metrics_);
    std::swap(get_logging_level_, other->get_logging_level_);
    std::swap(list_files_, other->list_files_);
    std::swap(read_file_, other->read_file_);
    std::swap(get_state_, other->get_state_);
    std::swap(get_agents_, other->get_agents_);
    std::swap(get_frameworks_, other->get_frameworks_);
    std::swap(get_executors_, other->get_executors_);
    std::swap(get_tasks_, other->get_tasks_);
    std::swap(get_roles_, other->get_roles_);
    std::swap(get_weights_, other->get_weights_);
    std::swap(get_master_, other->get_master_);
    std::swap(get_maintenance_status_, other->get_maintenance_status_);
    std::swap(get_maintenance_schedule_, other->get_maintenance_schedule_);
    std::swap(get_quota_, other->get_quota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Event_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_Type_descriptor_;
}
bool Event_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Event_Type Event::UNKNOWN;
const Event_Type Event::SUBSCRIBED;
const Event_Type Event::TASK_ADDED;
const Event_Type Event::TASK_UPDATED;
const Event_Type Event::AGENT_ADDED;
const Event_Type Event::AGENT_REMOVED;
const Event_Type Event::Type_MIN;
const Event_Type Event::Type_MAX;
const int Event::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Event_Subscribed::kGetStateFieldNumber;
#endif  // !_MSC_VER

Event_Subscribed::Event_Subscribed()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Event.Subscribed)
}

void Event_Subscribed::InitAsDefaultInstance() {
  get_state_ = const_cast< ::mesos::master_p::Response_GetState*>(&::mesos::master_p::Response_GetState::default_instance());
}

Event_Subscribed::Event_Subscribed(const Event_Subscribed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Event.Subscribed)
}

void Event_Subscribed::SharedCtor() {
  _cached_size_ = 0;
  get_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_Subscribed::~Event_Subscribed() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Event.Subscribed)
  SharedDtor();
}

void Event_Subscribed::SharedDtor() {
  if (this != default_instance_) {
    delete get_state_;
  }
}

void Event_Subscribed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_Subscribed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_Subscribed_descriptor_;
}

const Event_Subscribed& Event_Subscribed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Event_Subscribed* Event_Subscribed::default_instance_ = NULL;

Event_Subscribed* Event_Subscribed::New() const {
  return new Event_Subscribed;
}

void Event_Subscribed::Clear() {
  if (has_get_state()) {
    if (get_state_ != NULL) get_state_->::mesos::master_p::Response_GetState::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_Subscribed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Event.Subscribed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.master_p.Response.GetState get_state = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Event.Subscribed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Event.Subscribed)
  return false;
#undef DO_
}

void Event_Subscribed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Event.Subscribed)
  // optional .mesos.master_p.Response.GetState get_state = 1;
  if (has_get_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->get_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Event.Subscribed)
}

::google::protobuf::uint8* Event_Subscribed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Event.Subscribed)
  // optional .mesos.master_p.Response.GetState get_state = 1;
  if (has_get_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->get_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Event.Subscribed)
  return target;
}

int Event_Subscribed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.master_p.Response.GetState get_state = 1;
    if (has_get_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->get_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_Subscribed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_Subscribed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_Subscribed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_Subscribed::MergeFrom(const Event_Subscribed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_get_state()) {
      mutable_get_state()->::mesos::master_p::Response_GetState::MergeFrom(from.get_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_Subscribed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_Subscribed::CopyFrom(const Event_Subscribed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_Subscribed::IsInitialized() const {

  if (has_get_state()) {
    if (!this->get_state().IsInitialized()) return false;
  }
  return true;
}

void Event_Subscribed::Swap(Event_Subscribed* other) {
  if (other != this) {
    std::swap(get_state_, other->get_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_Subscribed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_Subscribed_descriptor_;
  metadata.reflection = Event_Subscribed_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event_TaskAdded::kTaskFieldNumber;
#endif  // !_MSC_VER

Event_TaskAdded::Event_TaskAdded()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Event.TaskAdded)
}

void Event_TaskAdded::InitAsDefaultInstance() {
  task_ = const_cast< ::mesos::Task*>(&::mesos::Task::default_instance());
}

Event_TaskAdded::Event_TaskAdded(const Event_TaskAdded& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Event.TaskAdded)
}

void Event_TaskAdded::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_TaskAdded::~Event_TaskAdded() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Event.TaskAdded)
  SharedDtor();
}

void Event_TaskAdded::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void Event_TaskAdded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_TaskAdded::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_TaskAdded_descriptor_;
}

const Event_TaskAdded& Event_TaskAdded::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Event_TaskAdded* Event_TaskAdded::default_instance_ = NULL;

Event_TaskAdded* Event_TaskAdded::New() const {
  return new Event_TaskAdded;
}

void Event_TaskAdded::Clear() {
  if (has_task()) {
    if (task_ != NULL) task_->::mesos::Task::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_TaskAdded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Event.TaskAdded)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.Task task = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Event.TaskAdded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Event.TaskAdded)
  return false;
#undef DO_
}

void Event_TaskAdded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Event.TaskAdded)
  // required .mesos.Task task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Event.TaskAdded)
}

::google::protobuf::uint8* Event_TaskAdded::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Event.TaskAdded)
  // required .mesos.Task task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Event.TaskAdded)
  return target;
}

int Event_TaskAdded::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.Task task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_TaskAdded::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_TaskAdded* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_TaskAdded*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_TaskAdded::MergeFrom(const Event_TaskAdded& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::mesos::Task::MergeFrom(from.task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_TaskAdded::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_TaskAdded::CopyFrom(const Event_TaskAdded& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_TaskAdded::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_task()) {
    if (!this->task().IsInitialized()) return false;
  }
  return true;
}

void Event_TaskAdded::Swap(Event_TaskAdded* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_TaskAdded::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_TaskAdded_descriptor_;
  metadata.reflection = Event_TaskAdded_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event_TaskUpdated::kFrameworkIdFieldNumber;
const int Event_TaskUpdated::kStatusFieldNumber;
const int Event_TaskUpdated::kStateFieldNumber;
#endif  // !_MSC_VER

Event_TaskUpdated::Event_TaskUpdated()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Event.TaskUpdated)
}

void Event_TaskUpdated::InitAsDefaultInstance() {
  framework_id_ = const_cast< ::mesos::FrameworkID*>(&::mesos::FrameworkID::default_instance());
  status_ = const_cast< ::mesos::TaskStatus*>(&::mesos::TaskStatus::default_instance());
}

Event_TaskUpdated::Event_TaskUpdated(const Event_TaskUpdated& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Event.TaskUpdated)
}

void Event_TaskUpdated::SharedCtor() {
  _cached_size_ = 0;
  framework_id_ = NULL;
  status_ = NULL;
  state_ = 6;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_TaskUpdated::~Event_TaskUpdated() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Event.TaskUpdated)
  SharedDtor();
}

void Event_TaskUpdated::SharedDtor() {
  if (this != default_instance_) {
    delete framework_id_;
    delete status_;
  }
}

void Event_TaskUpdated::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_TaskUpdated::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_TaskUpdated_descriptor_;
}

const Event_TaskUpdated& Event_TaskUpdated::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Event_TaskUpdated* Event_TaskUpdated::default_instance_ = NULL;

Event_TaskUpdated* Event_TaskUpdated::New() const {
  return new Event_TaskUpdated;
}

void Event_TaskUpdated::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_framework_id()) {
      if (framework_id_ != NULL) framework_id_->::mesos::FrameworkID::Clear();
    }
    if (has_status()) {
      if (status_ != NULL) status_->::mesos::TaskStatus::Clear();
    }
    state_ = 6;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_TaskUpdated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Event.TaskUpdated)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.FrameworkID framework_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // required .mesos.TaskStatus status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required .mesos.TaskState state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::TaskState_IsValid(value)) {
            set_state(static_cast< ::mesos::TaskState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Event.TaskUpdated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Event.TaskUpdated)
  return false;
#undef DO_
}

void Event_TaskUpdated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Event.TaskUpdated)
  // required .mesos.FrameworkID framework_id = 1;
  if (has_framework_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_id(), output);
  }

  // required .mesos.TaskStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }

  // required .mesos.TaskState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Event.TaskUpdated)
}

::google::protobuf::uint8* Event_TaskUpdated::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Event.TaskUpdated)
  // required .mesos.FrameworkID framework_id = 1;
  if (has_framework_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_id(), target);
  }

  // required .mesos.TaskStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }

  // required .mesos.TaskState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Event.TaskUpdated)
  return target;
}

int Event_TaskUpdated::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.FrameworkID framework_id = 1;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_id());
    }

    // required .mesos.TaskStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

    // required .mesos.TaskState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_TaskUpdated::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_TaskUpdated* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_TaskUpdated*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_TaskUpdated::MergeFrom(const Event_TaskUpdated& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_id()) {
      mutable_framework_id()->::mesos::FrameworkID::MergeFrom(from.framework_id());
    }
    if (from.has_status()) {
      mutable_status()->::mesos::TaskStatus::MergeFrom(from.status());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_TaskUpdated::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_TaskUpdated::CopyFrom(const Event_TaskUpdated& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_TaskUpdated::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_framework_id()) {
    if (!this->framework_id().IsInitialized()) return false;
  }
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void Event_TaskUpdated::Swap(Event_TaskUpdated* other) {
  if (other != this) {
    std::swap(framework_id_, other->framework_id_);
    std::swap(status_, other->status_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_TaskUpdated::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_TaskUpdated_descriptor_;
  metadata.reflection = Event_TaskUpdated_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event_AgentAdded::kAgentFieldNumber;
#endif  // !_MSC_VER

Event_AgentAdded::Event_AgentAdded()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Event.AgentAdded)
}

void Event_AgentAdded::InitAsDefaultInstance() {
  agent_ = const_cast< ::mesos::master_p::Response_GetAgents_Agent*>(&::mesos::master_p::Response_GetAgents_Agent::default_instance());
}

Event_AgentAdded::Event_AgentAdded(const Event_AgentAdded& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Event.AgentAdded)
}

void Event_AgentAdded::SharedCtor() {
  _cached_size_ = 0;
  agent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_AgentAdded::~Event_AgentAdded() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Event.AgentAdded)
  SharedDtor();
}

void Event_AgentAdded::SharedDtor() {
  if (this != default_instance_) {
    delete agent_;
  }
}

void Event_AgentAdded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_AgentAdded::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_AgentAdded_descriptor_;
}

const Event_AgentAdded& Event_AgentAdded::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Event_AgentAdded* Event_AgentAdded::default_instance_ = NULL;

Event_AgentAdded* Event_AgentAdded::New() const {
  return new Event_AgentAdded;
}

void Event_AgentAdded::Clear() {
  if (has_agent()) {
    if (agent_ != NULL) agent_->::mesos::master_p::Response_GetAgents_Agent::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_AgentAdded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Event.AgentAdded)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.master_p.Response.GetAgents.Agent agent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Event.AgentAdded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Event.AgentAdded)
  return false;
#undef DO_
}

void Event_AgentAdded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Event.AgentAdded)
  // required .mesos.master_p.Response.GetAgents.Agent agent = 1;
  if (has_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Event.AgentAdded)
}

::google::protobuf::uint8* Event_AgentAdded::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Event.AgentAdded)
  // required .mesos.master_p.Response.GetAgents.Agent agent = 1;
  if (has_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Event.AgentAdded)
  return target;
}

int Event_AgentAdded::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.master_p.Response.GetAgents.Agent agent = 1;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_AgentAdded::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_AgentAdded* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_AgentAdded*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_AgentAdded::MergeFrom(const Event_AgentAdded& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent()) {
      mutable_agent()->::mesos::master_p::Response_GetAgents_Agent::MergeFrom(from.agent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_AgentAdded::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_AgentAdded::CopyFrom(const Event_AgentAdded& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_AgentAdded::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_agent()) {
    if (!this->agent().IsInitialized()) return false;
  }
  return true;
}

void Event_AgentAdded::Swap(Event_AgentAdded* other) {
  if (other != this) {
    std::swap(agent_, other->agent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_AgentAdded::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_AgentAdded_descriptor_;
  metadata.reflection = Event_AgentAdded_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event_AgentRemoved::kAgentIdFieldNumber;
#endif  // !_MSC_VER

Event_AgentRemoved::Event_AgentRemoved()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Event.AgentRemoved)
}

void Event_AgentRemoved::InitAsDefaultInstance() {
  agent_id_ = const_cast< ::mesos::SlaveID*>(&::mesos::SlaveID::default_instance());
}

Event_AgentRemoved::Event_AgentRemoved(const Event_AgentRemoved& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Event.AgentRemoved)
}

void Event_AgentRemoved::SharedCtor() {
  _cached_size_ = 0;
  agent_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event_AgentRemoved::~Event_AgentRemoved() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Event.AgentRemoved)
  SharedDtor();
}

void Event_AgentRemoved::SharedDtor() {
  if (this != default_instance_) {
    delete agent_id_;
  }
}

void Event_AgentRemoved::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event_AgentRemoved::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_AgentRemoved_descriptor_;
}

const Event_AgentRemoved& Event_AgentRemoved::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Event_AgentRemoved* Event_AgentRemoved::default_instance_ = NULL;

Event_AgentRemoved* Event_AgentRemoved::New() const {
  return new Event_AgentRemoved;
}

void Event_AgentRemoved::Clear() {
  if (has_agent_id()) {
    if (agent_id_ != NULL) agent_id_->::mesos::SlaveID::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event_AgentRemoved::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Event.AgentRemoved)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.SlaveID agent_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Event.AgentRemoved)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Event.AgentRemoved)
  return false;
#undef DO_
}

void Event_AgentRemoved::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Event.AgentRemoved)
  // required .mesos.SlaveID agent_id = 1;
  if (has_agent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->agent_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Event.AgentRemoved)
}

::google::protobuf::uint8* Event_AgentRemoved::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Event.AgentRemoved)
  // required .mesos.SlaveID agent_id = 1;
  if (has_agent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Event.AgentRemoved)
  return target;
}

int Event_AgentRemoved::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.SlaveID agent_id = 1;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event_AgentRemoved::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event_AgentRemoved* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event_AgentRemoved*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event_AgentRemoved::MergeFrom(const Event_AgentRemoved& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agent_id()) {
      mutable_agent_id()->::mesos::SlaveID::MergeFrom(from.agent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event_AgentRemoved::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_AgentRemoved::CopyFrom(const Event_AgentRemoved& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_AgentRemoved::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_agent_id()) {
    if (!this->agent_id().IsInitialized()) return false;
  }
  return true;
}

void Event_AgentRemoved::Swap(Event_AgentRemoved* other) {
  if (other != this) {
    std::swap(agent_id_, other->agent_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event_AgentRemoved::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_AgentRemoved_descriptor_;
  metadata.reflection = Event_AgentRemoved_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Event::kTypeFieldNumber;
const int Event::kSubscribedFieldNumber;
const int Event::kTaskAddedFieldNumber;
const int Event::kTaskUpdatedFieldNumber;
const int Event::kAgentAddedFieldNumber;
const int Event::kAgentRemovedFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mesos.master_p.Event)
}

void Event::InitAsDefaultInstance() {
  subscribed_ = const_cast< ::mesos::master_p::Event_Subscribed*>(&::mesos::master_p::Event_Subscribed::default_instance());
  task_added_ = const_cast< ::mesos::master_p::Event_TaskAdded*>(&::mesos::master_p::Event_TaskAdded::default_instance());
  task_updated_ = const_cast< ::mesos::master_p::Event_TaskUpdated*>(&::mesos::master_p::Event_TaskUpdated::default_instance());
  agent_added_ = const_cast< ::mesos::master_p::Event_AgentAdded*>(&::mesos::master_p::Event_AgentAdded::default_instance());
  agent_removed_ = const_cast< ::mesos::master_p::Event_AgentRemoved*>(&::mesos::master_p::Event_AgentRemoved::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mesos.master_p.Event)
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  subscribed_ = NULL;
  task_added_ = NULL;
  task_updated_ = NULL;
  agent_added_ = NULL;
  agent_removed_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:mesos.master_p.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
    delete subscribed_;
    delete task_added_;
    delete task_updated_;
    delete agent_added_;
    delete agent_removed_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_master_5fp_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    type_ = 0;
    if (has_subscribed()) {
      if (subscribed_ != NULL) subscribed_->::mesos::master_p::Event_Subscribed::Clear();
    }
    if (has_task_added()) {
      if (task_added_ != NULL) task_added_->::mesos::master_p::Event_TaskAdded::Clear();
    }
    if (has_task_updated()) {
      if (task_updated_ != NULL) task_updated_->::mesos::master_p::Event_TaskUpdated::Clear();
    }
    if (has_agent_added()) {
      if (agent_added_ != NULL) agent_added_->::mesos::master_p::Event_AgentAdded::Clear();
    }
    if (has_agent_removed()) {
      if (agent_removed_ != NULL) agent_removed_->::mesos::master_p::Event_AgentRemoved::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mesos.master_p.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mesos.master_p.Event.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::master_p::Event_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::master_p::Event_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subscribed;
        break;
      }

      // optional .mesos.master_p.Event.Subscribed subscribed = 2;
      case 2: {
        if (tag == 18) {
         parse_subscribed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscribed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_task_added;
        break;
      }

      // optional .mesos.master_p.Event.TaskAdded task_added = 3;
      case 3: {
        if (tag == 26) {
         parse_task_added:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_added()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_task_updated;
        break;
      }

      // optional .mesos.master_p.Event.TaskUpdated task_updated = 4;
      case 4: {
        if (tag == 34) {
         parse_task_updated:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_updated()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_agent_added;
        break;
      }

      // optional .mesos.master_p.Event.AgentAdded agent_added = 5;
      case 5: {
        if (tag == 42) {
         parse_agent_added:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_added()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_agent_removed;
        break;
      }

      // optional .mesos.master_p.Event.AgentRemoved agent_removed = 6;
      case 6: {
        if (tag == 50) {
         parse_agent_removed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent_removed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mesos.master_p.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mesos.master_p.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mesos.master_p.Event)
  // optional .mesos.master_p.Event.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .mesos.master_p.Event.Subscribed subscribed = 2;
  if (has_subscribed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subscribed(), output);
  }

  // optional .mesos.master_p.Event.TaskAdded task_added = 3;
  if (has_task_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->task_added(), output);
  }

  // optional .mesos.master_p.Event.TaskUpdated task_updated = 4;
  if (has_task_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->task_updated(), output);
  }

  // optional .mesos.master_p.Event.AgentAdded agent_added = 5;
  if (has_agent_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->agent_added(), output);
  }

  // optional .mesos.master_p.Event.AgentRemoved agent_removed = 6;
  if (has_agent_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->agent_removed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mesos.master_p.Event)
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mesos.master_p.Event)
  // optional .mesos.master_p.Event.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .mesos.master_p.Event.Subscribed subscribed = 2;
  if (has_subscribed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subscribed(), target);
  }

  // optional .mesos.master_p.Event.TaskAdded task_added = 3;
  if (has_task_added()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->task_added(), target);
  }

  // optional .mesos.master_p.Event.TaskUpdated task_updated = 4;
  if (has_task_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->task_updated(), target);
  }

  // optional .mesos.master_p.Event.AgentAdded agent_added = 5;
  if (has_agent_added()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->agent_added(), target);
  }

  // optional .mesos.master_p.Event.AgentRemoved agent_removed = 6;
  if (has_agent_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->agent_removed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mesos.master_p.Event)
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .mesos.master_p.Event.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .mesos.master_p.Event.Subscribed subscribed = 2;
    if (has_subscribed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subscribed());
    }

    // optional .mesos.master_p.Event.TaskAdded task_added = 3;
    if (has_task_added()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_added());
    }

    // optional .mesos.master_p.Event.TaskUpdated task_updated = 4;
    if (has_task_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_updated());
    }

    // optional .mesos.master_p.Event.AgentAdded agent_added = 5;
    if (has_agent_added()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_added());
    }

    // optional .mesos.master_p.Event.AgentRemoved agent_removed = 6;
    if (has_agent_removed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent_removed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_subscribed()) {
      mutable_subscribed()->::mesos::master_p::Event_Subscribed::MergeFrom(from.subscribed());
    }
    if (from.has_task_added()) {
      mutable_task_added()->::mesos::master_p::Event_TaskAdded::MergeFrom(from.task_added());
    }
    if (from.has_task_updated()) {
      mutable_task_updated()->::mesos::master_p::Event_TaskUpdated::MergeFrom(from.task_updated());
    }
    if (from.has_agent_added()) {
      mutable_agent_added()->::mesos::master_p::Event_AgentAdded::MergeFrom(from.agent_added());
    }
    if (from.has_agent_removed()) {
      mutable_agent_removed()->::mesos::master_p::Event_AgentRemoved::MergeFrom(from.agent_removed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  if (has_subscribed()) {
    if (!this->subscribed().IsInitialized()) return false;
  }
  if (has_task_added()) {
    if (!this->task_added().IsInitialized()) return false;
  }
  if (has_task_updated()) {
    if (!this->task_updated().IsInitialized()) return false;
  }
  if (has_agent_added()) {
    if (!this->agent_added().IsInitialized()) return false;
  }
  if (has_agent_removed()) {
    if (!this->agent_removed().IsInitialized()) return false;
  }
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(subscribed_, other->subscribed_);
    std::swap(task_added_, other->task_added_);
    std::swap(task_updated_, other->task_updated_);
    std::swap(agent_added_, other->agent_added_);
    std::swap(agent_removed_, other->agent_removed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace master_p
}  // namespace mesos

// @@protoc_insertion_point(global_scope)
