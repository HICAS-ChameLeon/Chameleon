// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master_p.proto

#ifndef PROTOBUF_master_5fp_2eproto__INCLUDED
#define PROTOBUF_master_5fp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mesos.pb.h"
#include "maintenance.pb.h"
#include "quota.pb.h"
// @@protoc_insertion_point(includes)

namespace mesos {
namespace master_p {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_master_5fp_2eproto();
void protobuf_AssignDesc_master_5fp_2eproto();
void protobuf_ShutdownFile_master_5fp_2eproto();

class Call;
class Call_GetMetrics;
class Call_SetLoggingLevel;
class Call_ListFiles;
class Call_ReadFile;
class Call_UpdateWeights;
class Call_ReserveResources;
class Call_UnreserveResources;
class Call_CreateVolumes;
class Call_DestroyVolumes;
class Call_UpdateMaintenanceSchedule;
class Call_StartMaintenance;
class Call_StopMaintenance;
class Call_SetQuota;
class Call_RemoveQuota;
class Response;
class Response_GetHealth;
class Response_GetFlags;
class Response_GetVersion;
class Response_GetMetrics;
class Response_GetLoggingLevel;
class Response_ListFiles;
class Response_ReadFile;
class Response_GetState;
class Response_GetAgents;
class Response_GetAgents_Agent;
class Response_GetFrameworks;
class Response_GetFrameworks_Framework;
class Response_GetExecutors;
class Response_GetExecutors_Executor;
class Response_GetTasks;
class Response_GetRoles;
class Response_GetWeights;
class Response_GetMaster;
class Response_GetMaintenanceStatus;
class Response_GetMaintenanceSchedule;
class Response_GetQuota;
class Event;
class Event_Subscribed;
class Event_TaskAdded;
class Event_TaskUpdated;
class Event_AgentAdded;
class Event_AgentRemoved;

enum Call_Type {
  Call_Type_UNKNOWN = 0,
  Call_Type_GET_HEALTH = 1,
  Call_Type_GET_FLAGS = 2,
  Call_Type_GET_VERSION = 3,
  Call_Type_GET_METRICS = 4,
  Call_Type_GET_LOGGING_LEVEL = 5,
  Call_Type_SET_LOGGING_LEVEL = 6,
  Call_Type_LIST_FILES = 7,
  Call_Type_READ_FILE = 8,
  Call_Type_GET_STATE = 9,
  Call_Type_GET_AGENTS = 10,
  Call_Type_GET_FRAMEWORKS = 11,
  Call_Type_GET_EXECUTORS = 12,
  Call_Type_GET_TASKS = 13,
  Call_Type_GET_ROLES = 14,
  Call_Type_GET_WEIGHTS = 15,
  Call_Type_UPDATE_WEIGHTS = 16,
  Call_Type_GET_MASTER = 17,
  Call_Type_SUBSCRIBE = 18,
  Call_Type_RESERVE_RESOURCES = 19,
  Call_Type_UNRESERVE_RESOURCES = 20,
  Call_Type_CREATE_VOLUMES = 21,
  Call_Type_DESTROY_VOLUMES = 22,
  Call_Type_GET_MAINTENANCE_STATUS = 23,
  Call_Type_GET_MAINTENANCE_SCHEDULE = 24,
  Call_Type_UPDATE_MAINTENANCE_SCHEDULE = 25,
  Call_Type_START_MAINTENANCE = 26,
  Call_Type_STOP_MAINTENANCE = 27,
  Call_Type_GET_QUOTA = 28,
  Call_Type_SET_QUOTA = 29,
  Call_Type_REMOVE_QUOTA = 30
};
bool Call_Type_IsValid(int value);
const Call_Type Call_Type_Type_MIN = Call_Type_UNKNOWN;
const Call_Type Call_Type_Type_MAX = Call_Type_REMOVE_QUOTA;
const int Call_Type_Type_ARRAYSIZE = Call_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Call_Type_descriptor();
inline const ::std::string& Call_Type_Name(Call_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Call_Type_descriptor(), value);
}
inline bool Call_Type_Parse(
    const ::std::string& name, Call_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Call_Type>(
    Call_Type_descriptor(), name, value);
}
enum Response_Type {
  Response_Type_UNKNOWN = 0,
  Response_Type_GET_HEALTH = 1,
  Response_Type_GET_FLAGS = 2,
  Response_Type_GET_VERSION = 3,
  Response_Type_GET_METRICS = 4,
  Response_Type_GET_LOGGING_LEVEL = 5,
  Response_Type_LIST_FILES = 6,
  Response_Type_READ_FILE = 7,
  Response_Type_GET_STATE = 8,
  Response_Type_GET_AGENTS = 9,
  Response_Type_GET_FRAMEWORKS = 10,
  Response_Type_GET_EXECUTORS = 11,
  Response_Type_GET_TASKS = 12,
  Response_Type_GET_ROLES = 13,
  Response_Type_GET_WEIGHTS = 14,
  Response_Type_GET_MASTER = 15,
  Response_Type_GET_MAINTENANCE_STATUS = 16,
  Response_Type_GET_MAINTENANCE_SCHEDULE = 17,
  Response_Type_GET_QUOTA = 18
};
bool Response_Type_IsValid(int value);
const Response_Type Response_Type_Type_MIN = Response_Type_UNKNOWN;
const Response_Type Response_Type_Type_MAX = Response_Type_GET_QUOTA;
const int Response_Type_Type_ARRAYSIZE = Response_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_Type_descriptor();
inline const ::std::string& Response_Type_Name(Response_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_Type_descriptor(), value);
}
inline bool Response_Type_Parse(
    const ::std::string& name, Response_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_Type>(
    Response_Type_descriptor(), name, value);
}
enum Event_Type {
  Event_Type_UNKNOWN = 0,
  Event_Type_SUBSCRIBED = 1,
  Event_Type_TASK_ADDED = 2,
  Event_Type_TASK_UPDATED = 3,
  Event_Type_AGENT_ADDED = 4,
  Event_Type_AGENT_REMOVED = 5
};
bool Event_Type_IsValid(int value);
const Event_Type Event_Type_Type_MIN = Event_Type_UNKNOWN;
const Event_Type Event_Type_Type_MAX = Event_Type_AGENT_REMOVED;
const int Event_Type_Type_ARRAYSIZE = Event_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Event_Type_descriptor();
inline const ::std::string& Event_Type_Name(Event_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Event_Type_descriptor(), value);
}
inline bool Event_Type_Parse(
    const ::std::string& name, Event_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_Type>(
    Event_Type_descriptor(), name, value);
}
// ===================================================================

class Call_GetMetrics : public ::google::protobuf::Message {
 public:
  Call_GetMetrics();
  virtual ~Call_GetMetrics();

  Call_GetMetrics(const Call_GetMetrics& from);

  inline Call_GetMetrics& operator=(const Call_GetMetrics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_GetMetrics& default_instance();

  void Swap(Call_GetMetrics* other);

  // implements Message ----------------------------------------------

  Call_GetMetrics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_GetMetrics& from);
  void MergeFrom(const Call_GetMetrics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mesos.DurationInfo timeout = 1;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 1;
  inline const ::mesos::DurationInfo& timeout() const;
  inline ::mesos::DurationInfo* mutable_timeout();
  inline ::mesos::DurationInfo* release_timeout();
  inline void set_allocated_timeout(::mesos::DurationInfo* timeout);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call.GetMetrics)
 private:
  inline void set_has_timeout();
  inline void clear_has_timeout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::DurationInfo* timeout_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call_GetMetrics* default_instance_;
};
// -------------------------------------------------------------------

class Call_SetLoggingLevel : public ::google::protobuf::Message {
 public:
  Call_SetLoggingLevel();
  virtual ~Call_SetLoggingLevel();

  Call_SetLoggingLevel(const Call_SetLoggingLevel& from);

  inline Call_SetLoggingLevel& operator=(const Call_SetLoggingLevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_SetLoggingLevel& default_instance();

  void Swap(Call_SetLoggingLevel* other);

  // implements Message ----------------------------------------------

  Call_SetLoggingLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_SetLoggingLevel& from);
  void MergeFrom(const Call_SetLoggingLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required .mesos.DurationInfo duration = 2;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 2;
  inline const ::mesos::DurationInfo& duration() const;
  inline ::mesos::DurationInfo* mutable_duration();
  inline ::mesos::DurationInfo* release_duration();
  inline void set_allocated_duration(::mesos::DurationInfo* duration);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call.SetLoggingLevel)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_duration();
  inline void clear_has_duration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::DurationInfo* duration_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call_SetLoggingLevel* default_instance_;
};
// -------------------------------------------------------------------

class Call_ListFiles : public ::google::protobuf::Message {
 public:
  Call_ListFiles();
  virtual ~Call_ListFiles();

  Call_ListFiles(const Call_ListFiles& from);

  inline Call_ListFiles& operator=(const Call_ListFiles& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_ListFiles& default_instance();

  void Swap(Call_ListFiles* other);

  // implements Message ----------------------------------------------

  Call_ListFiles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_ListFiles& from);
  void MergeFrom(const Call_ListFiles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call.ListFiles)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call_ListFiles* default_instance_;
};
// -------------------------------------------------------------------

class Call_ReadFile : public ::google::protobuf::Message {
 public:
  Call_ReadFile();
  virtual ~Call_ReadFile();

  Call_ReadFile(const Call_ReadFile& from);

  inline Call_ReadFile& operator=(const Call_ReadFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_ReadFile& default_instance();

  void Swap(Call_ReadFile* other);

  // implements Message ----------------------------------------------

  Call_ReadFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_ReadFile& from);
  void MergeFrom(const Call_ReadFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // required uint64 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::uint64 offset() const;
  inline void set_offset(::google::protobuf::uint64 value);

  // optional uint64 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::uint64 length() const;
  inline void set_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call.ReadFile)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint64 length_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call_ReadFile* default_instance_;
};
// -------------------------------------------------------------------

class Call_UpdateWeights : public ::google::protobuf::Message {
 public:
  Call_UpdateWeights();
  virtual ~Call_UpdateWeights();

  Call_UpdateWeights(const Call_UpdateWeights& from);

  inline Call_UpdateWeights& operator=(const Call_UpdateWeights& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_UpdateWeights& default_instance();

  void Swap(Call_UpdateWeights* other);

  // implements Message ----------------------------------------------

  Call_UpdateWeights* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_UpdateWeights& from);
  void MergeFrom(const Call_UpdateWeights& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.WeightInfo weight_infos = 1;
  inline int weight_infos_size() const;
  inline void clear_weight_infos();
  static const int kWeightInfosFieldNumber = 1;
  inline const ::mesos::WeightInfo& weight_infos(int index) const;
  inline ::mesos::WeightInfo* mutable_weight_infos(int index);
  inline ::mesos::WeightInfo* add_weight_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::WeightInfo >&
      weight_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::WeightInfo >*
      mutable_weight_infos();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call.UpdateWeights)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::WeightInfo > weight_infos_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call_UpdateWeights* default_instance_;
};
// -------------------------------------------------------------------

class Call_ReserveResources : public ::google::protobuf::Message {
 public:
  Call_ReserveResources();
  virtual ~Call_ReserveResources();

  Call_ReserveResources(const Call_ReserveResources& from);

  inline Call_ReserveResources& operator=(const Call_ReserveResources& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_ReserveResources& default_instance();

  void Swap(Call_ReserveResources* other);

  // implements Message ----------------------------------------------

  Call_ReserveResources* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_ReserveResources& from);
  void MergeFrom(const Call_ReserveResources& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.SlaveID slave_id = 1;
  inline bool has_slave_id() const;
  inline void clear_slave_id();
  static const int kSlaveIdFieldNumber = 1;
  inline const ::mesos::SlaveID& slave_id() const;
  inline ::mesos::SlaveID* mutable_slave_id();
  inline ::mesos::SlaveID* release_slave_id();
  inline void set_allocated_slave_id(::mesos::SlaveID* slave_id);

  // repeated .mesos.Resource resources = 2;
  inline int resources_size() const;
  inline void clear_resources();
  static const int kResourcesFieldNumber = 2;
  inline const ::mesos::Resource& resources(int index) const;
  inline ::mesos::Resource* mutable_resources(int index);
  inline ::mesos::Resource* add_resources();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
      resources() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
      mutable_resources();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call.ReserveResources)
 private:
  inline void set_has_slave_id();
  inline void clear_has_slave_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::SlaveID* slave_id_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Resource > resources_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call_ReserveResources* default_instance_;
};
// -------------------------------------------------------------------

class Call_UnreserveResources : public ::google::protobuf::Message {
 public:
  Call_UnreserveResources();
  virtual ~Call_UnreserveResources();

  Call_UnreserveResources(const Call_UnreserveResources& from);

  inline Call_UnreserveResources& operator=(const Call_UnreserveResources& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_UnreserveResources& default_instance();

  void Swap(Call_UnreserveResources* other);

  // implements Message ----------------------------------------------

  Call_UnreserveResources* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_UnreserveResources& from);
  void MergeFrom(const Call_UnreserveResources& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.SlaveID slave_id = 1;
  inline bool has_slave_id() const;
  inline void clear_slave_id();
  static const int kSlaveIdFieldNumber = 1;
  inline const ::mesos::SlaveID& slave_id() const;
  inline ::mesos::SlaveID* mutable_slave_id();
  inline ::mesos::SlaveID* release_slave_id();
  inline void set_allocated_slave_id(::mesos::SlaveID* slave_id);

  // repeated .mesos.Resource resources = 2;
  inline int resources_size() const;
  inline void clear_resources();
  static const int kResourcesFieldNumber = 2;
  inline const ::mesos::Resource& resources(int index) const;
  inline ::mesos::Resource* mutable_resources(int index);
  inline ::mesos::Resource* add_resources();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
      resources() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
      mutable_resources();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call.UnreserveResources)
 private:
  inline void set_has_slave_id();
  inline void clear_has_slave_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::SlaveID* slave_id_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Resource > resources_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call_UnreserveResources* default_instance_;
};
// -------------------------------------------------------------------

class Call_CreateVolumes : public ::google::protobuf::Message {
 public:
  Call_CreateVolumes();
  virtual ~Call_CreateVolumes();

  Call_CreateVolumes(const Call_CreateVolumes& from);

  inline Call_CreateVolumes& operator=(const Call_CreateVolumes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_CreateVolumes& default_instance();

  void Swap(Call_CreateVolumes* other);

  // implements Message ----------------------------------------------

  Call_CreateVolumes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_CreateVolumes& from);
  void MergeFrom(const Call_CreateVolumes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.SlaveID slave_id = 1;
  inline bool has_slave_id() const;
  inline void clear_slave_id();
  static const int kSlaveIdFieldNumber = 1;
  inline const ::mesos::SlaveID& slave_id() const;
  inline ::mesos::SlaveID* mutable_slave_id();
  inline ::mesos::SlaveID* release_slave_id();
  inline void set_allocated_slave_id(::mesos::SlaveID* slave_id);

  // repeated .mesos.Resource volumes = 2;
  inline int volumes_size() const;
  inline void clear_volumes();
  static const int kVolumesFieldNumber = 2;
  inline const ::mesos::Resource& volumes(int index) const;
  inline ::mesos::Resource* mutable_volumes(int index);
  inline ::mesos::Resource* add_volumes();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
      volumes() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
      mutable_volumes();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call.CreateVolumes)
 private:
  inline void set_has_slave_id();
  inline void clear_has_slave_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::SlaveID* slave_id_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Resource > volumes_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call_CreateVolumes* default_instance_;
};
// -------------------------------------------------------------------

class Call_DestroyVolumes : public ::google::protobuf::Message {
 public:
  Call_DestroyVolumes();
  virtual ~Call_DestroyVolumes();

  Call_DestroyVolumes(const Call_DestroyVolumes& from);

  inline Call_DestroyVolumes& operator=(const Call_DestroyVolumes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_DestroyVolumes& default_instance();

  void Swap(Call_DestroyVolumes* other);

  // implements Message ----------------------------------------------

  Call_DestroyVolumes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_DestroyVolumes& from);
  void MergeFrom(const Call_DestroyVolumes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.SlaveID slave_id = 1;
  inline bool has_slave_id() const;
  inline void clear_slave_id();
  static const int kSlaveIdFieldNumber = 1;
  inline const ::mesos::SlaveID& slave_id() const;
  inline ::mesos::SlaveID* mutable_slave_id();
  inline ::mesos::SlaveID* release_slave_id();
  inline void set_allocated_slave_id(::mesos::SlaveID* slave_id);

  // repeated .mesos.Resource volumes = 2;
  inline int volumes_size() const;
  inline void clear_volumes();
  static const int kVolumesFieldNumber = 2;
  inline const ::mesos::Resource& volumes(int index) const;
  inline ::mesos::Resource* mutable_volumes(int index);
  inline ::mesos::Resource* add_volumes();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
      volumes() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
      mutable_volumes();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call.DestroyVolumes)
 private:
  inline void set_has_slave_id();
  inline void clear_has_slave_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::SlaveID* slave_id_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Resource > volumes_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call_DestroyVolumes* default_instance_;
};
// -------------------------------------------------------------------

class Call_UpdateMaintenanceSchedule : public ::google::protobuf::Message {
 public:
  Call_UpdateMaintenanceSchedule();
  virtual ~Call_UpdateMaintenanceSchedule();

  Call_UpdateMaintenanceSchedule(const Call_UpdateMaintenanceSchedule& from);

  inline Call_UpdateMaintenanceSchedule& operator=(const Call_UpdateMaintenanceSchedule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_UpdateMaintenanceSchedule& default_instance();

  void Swap(Call_UpdateMaintenanceSchedule* other);

  // implements Message ----------------------------------------------

  Call_UpdateMaintenanceSchedule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_UpdateMaintenanceSchedule& from);
  void MergeFrom(const Call_UpdateMaintenanceSchedule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.maintenance.Schedule schedule = 1;
  inline bool has_schedule() const;
  inline void clear_schedule();
  static const int kScheduleFieldNumber = 1;
  inline const ::mesos::maintenance::Schedule& schedule() const;
  inline ::mesos::maintenance::Schedule* mutable_schedule();
  inline ::mesos::maintenance::Schedule* release_schedule();
  inline void set_allocated_schedule(::mesos::maintenance::Schedule* schedule);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call.UpdateMaintenanceSchedule)
 private:
  inline void set_has_schedule();
  inline void clear_has_schedule();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::maintenance::Schedule* schedule_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call_UpdateMaintenanceSchedule* default_instance_;
};
// -------------------------------------------------------------------

class Call_StartMaintenance : public ::google::protobuf::Message {
 public:
  Call_StartMaintenance();
  virtual ~Call_StartMaintenance();

  Call_StartMaintenance(const Call_StartMaintenance& from);

  inline Call_StartMaintenance& operator=(const Call_StartMaintenance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_StartMaintenance& default_instance();

  void Swap(Call_StartMaintenance* other);

  // implements Message ----------------------------------------------

  Call_StartMaintenance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_StartMaintenance& from);
  void MergeFrom(const Call_StartMaintenance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.MachineID machines = 1;
  inline int machines_size() const;
  inline void clear_machines();
  static const int kMachinesFieldNumber = 1;
  inline const ::mesos::MachineID& machines(int index) const;
  inline ::mesos::MachineID* mutable_machines(int index);
  inline ::mesos::MachineID* add_machines();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >&
      machines() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >*
      mutable_machines();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call.StartMaintenance)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::MachineID > machines_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call_StartMaintenance* default_instance_;
};
// -------------------------------------------------------------------

class Call_StopMaintenance : public ::google::protobuf::Message {
 public:
  Call_StopMaintenance();
  virtual ~Call_StopMaintenance();

  Call_StopMaintenance(const Call_StopMaintenance& from);

  inline Call_StopMaintenance& operator=(const Call_StopMaintenance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_StopMaintenance& default_instance();

  void Swap(Call_StopMaintenance* other);

  // implements Message ----------------------------------------------

  Call_StopMaintenance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_StopMaintenance& from);
  void MergeFrom(const Call_StopMaintenance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.MachineID machines = 1;
  inline int machines_size() const;
  inline void clear_machines();
  static const int kMachinesFieldNumber = 1;
  inline const ::mesos::MachineID& machines(int index) const;
  inline ::mesos::MachineID* mutable_machines(int index);
  inline ::mesos::MachineID* add_machines();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >&
      machines() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >*
      mutable_machines();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call.StopMaintenance)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::MachineID > machines_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call_StopMaintenance* default_instance_;
};
// -------------------------------------------------------------------

class Call_SetQuota : public ::google::protobuf::Message {
 public:
  Call_SetQuota();
  virtual ~Call_SetQuota();

  Call_SetQuota(const Call_SetQuota& from);

  inline Call_SetQuota& operator=(const Call_SetQuota& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_SetQuota& default_instance();

  void Swap(Call_SetQuota* other);

  // implements Message ----------------------------------------------

  Call_SetQuota* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_SetQuota& from);
  void MergeFrom(const Call_SetQuota& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.quota.QuotaRequest quota_request = 1;
  inline bool has_quota_request() const;
  inline void clear_quota_request();
  static const int kQuotaRequestFieldNumber = 1;
  inline const ::mesos::quota::QuotaRequest& quota_request() const;
  inline ::mesos::quota::QuotaRequest* mutable_quota_request();
  inline ::mesos::quota::QuotaRequest* release_quota_request();
  inline void set_allocated_quota_request(::mesos::quota::QuotaRequest* quota_request);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call.SetQuota)
 private:
  inline void set_has_quota_request();
  inline void clear_has_quota_request();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::quota::QuotaRequest* quota_request_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call_SetQuota* default_instance_;
};
// -------------------------------------------------------------------

class Call_RemoveQuota : public ::google::protobuf::Message {
 public:
  Call_RemoveQuota();
  virtual ~Call_RemoveQuota();

  Call_RemoveQuota(const Call_RemoveQuota& from);

  inline Call_RemoveQuota& operator=(const Call_RemoveQuota& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call_RemoveQuota& default_instance();

  void Swap(Call_RemoveQuota* other);

  // implements Message ----------------------------------------------

  Call_RemoveQuota* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call_RemoveQuota& from);
  void MergeFrom(const Call_RemoveQuota& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string role = 1;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 1;
  inline const ::std::string& role() const;
  inline void set_role(const ::std::string& value);
  inline void set_role(const char* value);
  inline void set_role(const char* value, size_t size);
  inline ::std::string* mutable_role();
  inline ::std::string* release_role();
  inline void set_allocated_role(::std::string* role);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call.RemoveQuota)
 private:
  inline void set_has_role();
  inline void clear_has_role();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* role_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call_RemoveQuota* default_instance_;
};
// -------------------------------------------------------------------

class Call : public ::google::protobuf::Message {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call& default_instance();

  void Swap(Call* other);

  // implements Message ----------------------------------------------

  Call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Call_GetMetrics GetMetrics;
  typedef Call_SetLoggingLevel SetLoggingLevel;
  typedef Call_ListFiles ListFiles;
  typedef Call_ReadFile ReadFile;
  typedef Call_UpdateWeights UpdateWeights;
  typedef Call_ReserveResources ReserveResources;
  typedef Call_UnreserveResources UnreserveResources;
  typedef Call_CreateVolumes CreateVolumes;
  typedef Call_DestroyVolumes DestroyVolumes;
  typedef Call_UpdateMaintenanceSchedule UpdateMaintenanceSchedule;
  typedef Call_StartMaintenance StartMaintenance;
  typedef Call_StopMaintenance StopMaintenance;
  typedef Call_SetQuota SetQuota;
  typedef Call_RemoveQuota RemoveQuota;

  typedef Call_Type Type;
  static const Type UNKNOWN = Call_Type_UNKNOWN;
  static const Type GET_HEALTH = Call_Type_GET_HEALTH;
  static const Type GET_FLAGS = Call_Type_GET_FLAGS;
  static const Type GET_VERSION = Call_Type_GET_VERSION;
  static const Type GET_METRICS = Call_Type_GET_METRICS;
  static const Type GET_LOGGING_LEVEL = Call_Type_GET_LOGGING_LEVEL;
  static const Type SET_LOGGING_LEVEL = Call_Type_SET_LOGGING_LEVEL;
  static const Type LIST_FILES = Call_Type_LIST_FILES;
  static const Type READ_FILE = Call_Type_READ_FILE;
  static const Type GET_STATE = Call_Type_GET_STATE;
  static const Type GET_AGENTS = Call_Type_GET_AGENTS;
  static const Type GET_FRAMEWORKS = Call_Type_GET_FRAMEWORKS;
  static const Type GET_EXECUTORS = Call_Type_GET_EXECUTORS;
  static const Type GET_TASKS = Call_Type_GET_TASKS;
  static const Type GET_ROLES = Call_Type_GET_ROLES;
  static const Type GET_WEIGHTS = Call_Type_GET_WEIGHTS;
  static const Type UPDATE_WEIGHTS = Call_Type_UPDATE_WEIGHTS;
  static const Type GET_MASTER = Call_Type_GET_MASTER;
  static const Type SUBSCRIBE = Call_Type_SUBSCRIBE;
  static const Type RESERVE_RESOURCES = Call_Type_RESERVE_RESOURCES;
  static const Type UNRESERVE_RESOURCES = Call_Type_UNRESERVE_RESOURCES;
  static const Type CREATE_VOLUMES = Call_Type_CREATE_VOLUMES;
  static const Type DESTROY_VOLUMES = Call_Type_DESTROY_VOLUMES;
  static const Type GET_MAINTENANCE_STATUS = Call_Type_GET_MAINTENANCE_STATUS;
  static const Type GET_MAINTENANCE_SCHEDULE = Call_Type_GET_MAINTENANCE_SCHEDULE;
  static const Type UPDATE_MAINTENANCE_SCHEDULE = Call_Type_UPDATE_MAINTENANCE_SCHEDULE;
  static const Type START_MAINTENANCE = Call_Type_START_MAINTENANCE;
  static const Type STOP_MAINTENANCE = Call_Type_STOP_MAINTENANCE;
  static const Type GET_QUOTA = Call_Type_GET_QUOTA;
  static const Type SET_QUOTA = Call_Type_SET_QUOTA;
  static const Type REMOVE_QUOTA = Call_Type_REMOVE_QUOTA;
  static inline bool Type_IsValid(int value) {
    return Call_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Call_Type_Type_MIN;
  static const Type Type_MAX =
    Call_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Call_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Call_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Call_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Call_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .mesos.master_p.Call.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mesos::master_p::Call_Type type() const;
  inline void set_type(::mesos::master_p::Call_Type value);

  // optional .mesos.master_p.Call.GetMetrics get_metrics = 2;
  inline bool has_get_metrics() const;
  inline void clear_get_metrics();
  static const int kGetMetricsFieldNumber = 2;
  inline const ::mesos::master_p::Call_GetMetrics& get_metrics() const;
  inline ::mesos::master_p::Call_GetMetrics* mutable_get_metrics();
  inline ::mesos::master_p::Call_GetMetrics* release_get_metrics();
  inline void set_allocated_get_metrics(::mesos::master_p::Call_GetMetrics* get_metrics);

  // optional .mesos.master_p.Call.SetLoggingLevel set_logging_level = 3;
  inline bool has_set_logging_level() const;
  inline void clear_set_logging_level();
  static const int kSetLoggingLevelFieldNumber = 3;
  inline const ::mesos::master_p::Call_SetLoggingLevel& set_logging_level() const;
  inline ::mesos::master_p::Call_SetLoggingLevel* mutable_set_logging_level();
  inline ::mesos::master_p::Call_SetLoggingLevel* release_set_logging_level();
  inline void set_allocated_set_logging_level(::mesos::master_p::Call_SetLoggingLevel* set_logging_level);

  // optional .mesos.master_p.Call.ListFiles list_files = 4;
  inline bool has_list_files() const;
  inline void clear_list_files();
  static const int kListFilesFieldNumber = 4;
  inline const ::mesos::master_p::Call_ListFiles& list_files() const;
  inline ::mesos::master_p::Call_ListFiles* mutable_list_files();
  inline ::mesos::master_p::Call_ListFiles* release_list_files();
  inline void set_allocated_list_files(::mesos::master_p::Call_ListFiles* list_files);

  // optional .mesos.master_p.Call.ReadFile read_file = 5;
  inline bool has_read_file() const;
  inline void clear_read_file();
  static const int kReadFileFieldNumber = 5;
  inline const ::mesos::master_p::Call_ReadFile& read_file() const;
  inline ::mesos::master_p::Call_ReadFile* mutable_read_file();
  inline ::mesos::master_p::Call_ReadFile* release_read_file();
  inline void set_allocated_read_file(::mesos::master_p::Call_ReadFile* read_file);

  // optional .mesos.master_p.Call.UpdateWeights update_weights = 6;
  inline bool has_update_weights() const;
  inline void clear_update_weights();
  static const int kUpdateWeightsFieldNumber = 6;
  inline const ::mesos::master_p::Call_UpdateWeights& update_weights() const;
  inline ::mesos::master_p::Call_UpdateWeights* mutable_update_weights();
  inline ::mesos::master_p::Call_UpdateWeights* release_update_weights();
  inline void set_allocated_update_weights(::mesos::master_p::Call_UpdateWeights* update_weights);

  // optional .mesos.master_p.Call.ReserveResources reserve_resources = 7;
  inline bool has_reserve_resources() const;
  inline void clear_reserve_resources();
  static const int kReserveResourcesFieldNumber = 7;
  inline const ::mesos::master_p::Call_ReserveResources& reserve_resources() const;
  inline ::mesos::master_p::Call_ReserveResources* mutable_reserve_resources();
  inline ::mesos::master_p::Call_ReserveResources* release_reserve_resources();
  inline void set_allocated_reserve_resources(::mesos::master_p::Call_ReserveResources* reserve_resources);

  // optional .mesos.master_p.Call.UnreserveResources unreserve_resources = 8;
  inline bool has_unreserve_resources() const;
  inline void clear_unreserve_resources();
  static const int kUnreserveResourcesFieldNumber = 8;
  inline const ::mesos::master_p::Call_UnreserveResources& unreserve_resources() const;
  inline ::mesos::master_p::Call_UnreserveResources* mutable_unreserve_resources();
  inline ::mesos::master_p::Call_UnreserveResources* release_unreserve_resources();
  inline void set_allocated_unreserve_resources(::mesos::master_p::Call_UnreserveResources* unreserve_resources);

  // optional .mesos.master_p.Call.CreateVolumes create_volumes = 9;
  inline bool has_create_volumes() const;
  inline void clear_create_volumes();
  static const int kCreateVolumesFieldNumber = 9;
  inline const ::mesos::master_p::Call_CreateVolumes& create_volumes() const;
  inline ::mesos::master_p::Call_CreateVolumes* mutable_create_volumes();
  inline ::mesos::master_p::Call_CreateVolumes* release_create_volumes();
  inline void set_allocated_create_volumes(::mesos::master_p::Call_CreateVolumes* create_volumes);

  // optional .mesos.master_p.Call.DestroyVolumes destroy_volumes = 10;
  inline bool has_destroy_volumes() const;
  inline void clear_destroy_volumes();
  static const int kDestroyVolumesFieldNumber = 10;
  inline const ::mesos::master_p::Call_DestroyVolumes& destroy_volumes() const;
  inline ::mesos::master_p::Call_DestroyVolumes* mutable_destroy_volumes();
  inline ::mesos::master_p::Call_DestroyVolumes* release_destroy_volumes();
  inline void set_allocated_destroy_volumes(::mesos::master_p::Call_DestroyVolumes* destroy_volumes);

  // optional .mesos.master_p.Call.UpdateMaintenanceSchedule update_maintenance_schedule = 11;
  inline bool has_update_maintenance_schedule() const;
  inline void clear_update_maintenance_schedule();
  static const int kUpdateMaintenanceScheduleFieldNumber = 11;
  inline const ::mesos::master_p::Call_UpdateMaintenanceSchedule& update_maintenance_schedule() const;
  inline ::mesos::master_p::Call_UpdateMaintenanceSchedule* mutable_update_maintenance_schedule();
  inline ::mesos::master_p::Call_UpdateMaintenanceSchedule* release_update_maintenance_schedule();
  inline void set_allocated_update_maintenance_schedule(::mesos::master_p::Call_UpdateMaintenanceSchedule* update_maintenance_schedule);

  // optional .mesos.master_p.Call.StartMaintenance start_maintenance = 12;
  inline bool has_start_maintenance() const;
  inline void clear_start_maintenance();
  static const int kStartMaintenanceFieldNumber = 12;
  inline const ::mesos::master_p::Call_StartMaintenance& start_maintenance() const;
  inline ::mesos::master_p::Call_StartMaintenance* mutable_start_maintenance();
  inline ::mesos::master_p::Call_StartMaintenance* release_start_maintenance();
  inline void set_allocated_start_maintenance(::mesos::master_p::Call_StartMaintenance* start_maintenance);

  // optional .mesos.master_p.Call.StopMaintenance stop_maintenance = 13;
  inline bool has_stop_maintenance() const;
  inline void clear_stop_maintenance();
  static const int kStopMaintenanceFieldNumber = 13;
  inline const ::mesos::master_p::Call_StopMaintenance& stop_maintenance() const;
  inline ::mesos::master_p::Call_StopMaintenance* mutable_stop_maintenance();
  inline ::mesos::master_p::Call_StopMaintenance* release_stop_maintenance();
  inline void set_allocated_stop_maintenance(::mesos::master_p::Call_StopMaintenance* stop_maintenance);

  // optional .mesos.master_p.Call.SetQuota set_quota = 14;
  inline bool has_set_quota() const;
  inline void clear_set_quota();
  static const int kSetQuotaFieldNumber = 14;
  inline const ::mesos::master_p::Call_SetQuota& set_quota() const;
  inline ::mesos::master_p::Call_SetQuota* mutable_set_quota();
  inline ::mesos::master_p::Call_SetQuota* release_set_quota();
  inline void set_allocated_set_quota(::mesos::master_p::Call_SetQuota* set_quota);

  // optional .mesos.master_p.Call.RemoveQuota remove_quota = 15;
  inline bool has_remove_quota() const;
  inline void clear_remove_quota();
  static const int kRemoveQuotaFieldNumber = 15;
  inline const ::mesos::master_p::Call_RemoveQuota& remove_quota() const;
  inline ::mesos::master_p::Call_RemoveQuota* mutable_remove_quota();
  inline ::mesos::master_p::Call_RemoveQuota* release_remove_quota();
  inline void set_allocated_remove_quota(::mesos::master_p::Call_RemoveQuota* remove_quota);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Call)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_get_metrics();
  inline void clear_has_get_metrics();
  inline void set_has_set_logging_level();
  inline void clear_has_set_logging_level();
  inline void set_has_list_files();
  inline void clear_has_list_files();
  inline void set_has_read_file();
  inline void clear_has_read_file();
  inline void set_has_update_weights();
  inline void clear_has_update_weights();
  inline void set_has_reserve_resources();
  inline void clear_has_reserve_resources();
  inline void set_has_unreserve_resources();
  inline void clear_has_unreserve_resources();
  inline void set_has_create_volumes();
  inline void clear_has_create_volumes();
  inline void set_has_destroy_volumes();
  inline void clear_has_destroy_volumes();
  inline void set_has_update_maintenance_schedule();
  inline void clear_has_update_maintenance_schedule();
  inline void set_has_start_maintenance();
  inline void clear_has_start_maintenance();
  inline void set_has_stop_maintenance();
  inline void clear_has_stop_maintenance();
  inline void set_has_set_quota();
  inline void clear_has_set_quota();
  inline void set_has_remove_quota();
  inline void clear_has_remove_quota();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::master_p::Call_GetMetrics* get_metrics_;
  ::mesos::master_p::Call_SetLoggingLevel* set_logging_level_;
  ::mesos::master_p::Call_ListFiles* list_files_;
  ::mesos::master_p::Call_ReadFile* read_file_;
  ::mesos::master_p::Call_UpdateWeights* update_weights_;
  ::mesos::master_p::Call_ReserveResources* reserve_resources_;
  ::mesos::master_p::Call_UnreserveResources* unreserve_resources_;
  ::mesos::master_p::Call_CreateVolumes* create_volumes_;
  ::mesos::master_p::Call_DestroyVolumes* destroy_volumes_;
  ::mesos::master_p::Call_UpdateMaintenanceSchedule* update_maintenance_schedule_;
  ::mesos::master_p::Call_StartMaintenance* start_maintenance_;
  ::mesos::master_p::Call_StopMaintenance* stop_maintenance_;
  ::mesos::master_p::Call_SetQuota* set_quota_;
  ::mesos::master_p::Call_RemoveQuota* remove_quota_;
  int type_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Call* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetHealth : public ::google::protobuf::Message {
 public:
  Response_GetHealth();
  virtual ~Response_GetHealth();

  Response_GetHealth(const Response_GetHealth& from);

  inline Response_GetHealth& operator=(const Response_GetHealth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetHealth& default_instance();

  void Swap(Response_GetHealth* other);

  // implements Message ----------------------------------------------

  Response_GetHealth* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetHealth& from);
  void MergeFrom(const Response_GetHealth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool healthy = 1;
  inline bool has_healthy() const;
  inline void clear_healthy();
  static const int kHealthyFieldNumber = 1;
  inline bool healthy() const;
  inline void set_healthy(bool value);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetHealth)
 private:
  inline void set_has_healthy();
  inline void clear_has_healthy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool healthy_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetHealth* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetFlags : public ::google::protobuf::Message {
 public:
  Response_GetFlags();
  virtual ~Response_GetFlags();

  Response_GetFlags(const Response_GetFlags& from);

  inline Response_GetFlags& operator=(const Response_GetFlags& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetFlags& default_instance();

  void Swap(Response_GetFlags* other);

  // implements Message ----------------------------------------------

  Response_GetFlags* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetFlags& from);
  void MergeFrom(const Response_GetFlags& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.Flag flags = 1;
  inline int flags_size() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 1;
  inline const ::mesos::Flag& flags(int index) const;
  inline ::mesos::Flag* mutable_flags(int index);
  inline ::mesos::Flag* add_flags();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Flag >&
      flags() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Flag >*
      mutable_flags();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetFlags)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Flag > flags_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetFlags* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetVersion : public ::google::protobuf::Message {
 public:
  Response_GetVersion();
  virtual ~Response_GetVersion();

  Response_GetVersion(const Response_GetVersion& from);

  inline Response_GetVersion& operator=(const Response_GetVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetVersion& default_instance();

  void Swap(Response_GetVersion* other);

  // implements Message ----------------------------------------------

  Response_GetVersion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetVersion& from);
  void MergeFrom(const Response_GetVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.VersionInfo version_info = 1;
  inline bool has_version_info() const;
  inline void clear_version_info();
  static const int kVersionInfoFieldNumber = 1;
  inline const ::mesos::VersionInfo& version_info() const;
  inline ::mesos::VersionInfo* mutable_version_info();
  inline ::mesos::VersionInfo* release_version_info();
  inline void set_allocated_version_info(::mesos::VersionInfo* version_info);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetVersion)
 private:
  inline void set_has_version_info();
  inline void clear_has_version_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::VersionInfo* version_info_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetVersion* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetMetrics : public ::google::protobuf::Message {
 public:
  Response_GetMetrics();
  virtual ~Response_GetMetrics();

  Response_GetMetrics(const Response_GetMetrics& from);

  inline Response_GetMetrics& operator=(const Response_GetMetrics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetMetrics& default_instance();

  void Swap(Response_GetMetrics* other);

  // implements Message ----------------------------------------------

  Response_GetMetrics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetMetrics& from);
  void MergeFrom(const Response_GetMetrics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.Metric metrics = 1;
  inline int metrics_size() const;
  inline void clear_metrics();
  static const int kMetricsFieldNumber = 1;
  inline const ::mesos::Metric& metrics(int index) const;
  inline ::mesos::Metric* mutable_metrics(int index);
  inline ::mesos::Metric* add_metrics();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Metric >&
      metrics() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Metric >*
      mutable_metrics();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetMetrics)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Metric > metrics_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetMetrics* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetLoggingLevel : public ::google::protobuf::Message {
 public:
  Response_GetLoggingLevel();
  virtual ~Response_GetLoggingLevel();

  Response_GetLoggingLevel(const Response_GetLoggingLevel& from);

  inline Response_GetLoggingLevel& operator=(const Response_GetLoggingLevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetLoggingLevel& default_instance();

  void Swap(Response_GetLoggingLevel* other);

  // implements Message ----------------------------------------------

  Response_GetLoggingLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetLoggingLevel& from);
  void MergeFrom(const Response_GetLoggingLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetLoggingLevel)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetLoggingLevel* default_instance_;
};
// -------------------------------------------------------------------

class Response_ListFiles : public ::google::protobuf::Message {
 public:
  Response_ListFiles();
  virtual ~Response_ListFiles();

  Response_ListFiles(const Response_ListFiles& from);

  inline Response_ListFiles& operator=(const Response_ListFiles& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_ListFiles& default_instance();

  void Swap(Response_ListFiles* other);

  // implements Message ----------------------------------------------

  Response_ListFiles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_ListFiles& from);
  void MergeFrom(const Response_ListFiles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.FileInfo file_infos = 1;
  inline int file_infos_size() const;
  inline void clear_file_infos();
  static const int kFileInfosFieldNumber = 1;
  inline const ::mesos::FileInfo& file_infos(int index) const;
  inline ::mesos::FileInfo* mutable_file_infos(int index);
  inline ::mesos::FileInfo* add_file_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::FileInfo >&
      file_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::FileInfo >*
      mutable_file_infos();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.ListFiles)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::FileInfo > file_infos_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_ListFiles* default_instance_;
};
// -------------------------------------------------------------------

class Response_ReadFile : public ::google::protobuf::Message {
 public:
  Response_ReadFile();
  virtual ~Response_ReadFile();

  Response_ReadFile(const Response_ReadFile& from);

  inline Response_ReadFile& operator=(const Response_ReadFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_ReadFile& default_instance();

  void Swap(Response_ReadFile* other);

  // implements Message ----------------------------------------------

  Response_ReadFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_ReadFile& from);
  void MergeFrom(const Response_ReadFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.ReadFile)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 size_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_ReadFile* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetState : public ::google::protobuf::Message {
 public:
  Response_GetState();
  virtual ~Response_GetState();

  Response_GetState(const Response_GetState& from);

  inline Response_GetState& operator=(const Response_GetState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetState& default_instance();

  void Swap(Response_GetState* other);

  // implements Message ----------------------------------------------

  Response_GetState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetState& from);
  void MergeFrom(const Response_GetState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mesos.master_p.Response.GetTasks get_tasks = 1;
  inline bool has_get_tasks() const;
  inline void clear_get_tasks();
  static const int kGetTasksFieldNumber = 1;
  inline const ::mesos::master_p::Response_GetTasks& get_tasks() const;
  inline ::mesos::master_p::Response_GetTasks* mutable_get_tasks();
  inline ::mesos::master_p::Response_GetTasks* release_get_tasks();
  inline void set_allocated_get_tasks(::mesos::master_p::Response_GetTasks* get_tasks);

  // optional .mesos.master_p.Response.GetExecutors get_executors = 2;
  inline bool has_get_executors() const;
  inline void clear_get_executors();
  static const int kGetExecutorsFieldNumber = 2;
  inline const ::mesos::master_p::Response_GetExecutors& get_executors() const;
  inline ::mesos::master_p::Response_GetExecutors* mutable_get_executors();
  inline ::mesos::master_p::Response_GetExecutors* release_get_executors();
  inline void set_allocated_get_executors(::mesos::master_p::Response_GetExecutors* get_executors);

  // optional .mesos.master_p.Response.GetFrameworks get_frameworks = 3;
  inline bool has_get_frameworks() const;
  inline void clear_get_frameworks();
  static const int kGetFrameworksFieldNumber = 3;
  inline const ::mesos::master_p::Response_GetFrameworks& get_frameworks() const;
  inline ::mesos::master_p::Response_GetFrameworks* mutable_get_frameworks();
  inline ::mesos::master_p::Response_GetFrameworks* release_get_frameworks();
  inline void set_allocated_get_frameworks(::mesos::master_p::Response_GetFrameworks* get_frameworks);

  // optional .mesos.master_p.Response.GetAgents get_agents = 4;
  inline bool has_get_agents() const;
  inline void clear_get_agents();
  static const int kGetAgentsFieldNumber = 4;
  inline const ::mesos::master_p::Response_GetAgents& get_agents() const;
  inline ::mesos::master_p::Response_GetAgents* mutable_get_agents();
  inline ::mesos::master_p::Response_GetAgents* release_get_agents();
  inline void set_allocated_get_agents(::mesos::master_p::Response_GetAgents* get_agents);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetState)
 private:
  inline void set_has_get_tasks();
  inline void clear_has_get_tasks();
  inline void set_has_get_executors();
  inline void clear_has_get_executors();
  inline void set_has_get_frameworks();
  inline void clear_has_get_frameworks();
  inline void set_has_get_agents();
  inline void clear_has_get_agents();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::master_p::Response_GetTasks* get_tasks_;
  ::mesos::master_p::Response_GetExecutors* get_executors_;
  ::mesos::master_p::Response_GetFrameworks* get_frameworks_;
  ::mesos::master_p::Response_GetAgents* get_agents_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetState* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetAgents_Agent : public ::google::protobuf::Message {
 public:
  Response_GetAgents_Agent();
  virtual ~Response_GetAgents_Agent();

  Response_GetAgents_Agent(const Response_GetAgents_Agent& from);

  inline Response_GetAgents_Agent& operator=(const Response_GetAgents_Agent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetAgents_Agent& default_instance();

  void Swap(Response_GetAgents_Agent* other);

  // implements Message ----------------------------------------------

  Response_GetAgents_Agent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetAgents_Agent& from);
  void MergeFrom(const Response_GetAgents_Agent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.SlaveInfo agent_info = 1;
  inline bool has_agent_info() const;
  inline void clear_agent_info();
  static const int kAgentInfoFieldNumber = 1;
  inline const ::mesos::SlaveInfo& agent_info() const;
  inline ::mesos::SlaveInfo* mutable_agent_info();
  inline ::mesos::SlaveInfo* release_agent_info();
  inline void set_allocated_agent_info(::mesos::SlaveInfo* agent_info);

  // required bool active = 2;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 2;
  inline bool active() const;
  inline void set_active(bool value);

  // required string version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional string pid = 4;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 4;
  inline const ::std::string& pid() const;
  inline void set_pid(const ::std::string& value);
  inline void set_pid(const char* value);
  inline void set_pid(const char* value, size_t size);
  inline ::std::string* mutable_pid();
  inline ::std::string* release_pid();
  inline void set_allocated_pid(::std::string* pid);

  // optional .mesos.TimeInfo registered_time = 5;
  inline bool has_registered_time() const;
  inline void clear_registered_time();
  static const int kRegisteredTimeFieldNumber = 5;
  inline const ::mesos::TimeInfo& registered_time() const;
  inline ::mesos::TimeInfo* mutable_registered_time();
  inline ::mesos::TimeInfo* release_registered_time();
  inline void set_allocated_registered_time(::mesos::TimeInfo* registered_time);

  // optional .mesos.TimeInfo reregistered_time = 6;
  inline bool has_reregistered_time() const;
  inline void clear_reregistered_time();
  static const int kReregisteredTimeFieldNumber = 6;
  inline const ::mesos::TimeInfo& reregistered_time() const;
  inline ::mesos::TimeInfo* mutable_reregistered_time();
  inline ::mesos::TimeInfo* release_reregistered_time();
  inline void set_allocated_reregistered_time(::mesos::TimeInfo* reregistered_time);

  // repeated .mesos.Resource total_resources = 7;
  inline int total_resources_size() const;
  inline void clear_total_resources();
  static const int kTotalResourcesFieldNumber = 7;
  inline const ::mesos::Resource& total_resources(int index) const;
  inline ::mesos::Resource* mutable_total_resources(int index);
  inline ::mesos::Resource* add_total_resources();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
      total_resources() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
      mutable_total_resources();

  // repeated .mesos.Resource allocated_resources = 8;
  inline int allocated_resources_size() const;
  inline void clear_allocated_resources();
  static const int kAllocatedResourcesFieldNumber = 8;
  inline const ::mesos::Resource& allocated_resources(int index) const;
  inline ::mesos::Resource* mutable_allocated_resources(int index);
  inline ::mesos::Resource* add_allocated_resources();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
      allocated_resources() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
      mutable_allocated_resources();

  // repeated .mesos.Resource offered_resources = 9;
  inline int offered_resources_size() const;
  inline void clear_offered_resources();
  static const int kOfferedResourcesFieldNumber = 9;
  inline const ::mesos::Resource& offered_resources(int index) const;
  inline ::mesos::Resource* mutable_offered_resources(int index);
  inline ::mesos::Resource* add_offered_resources();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
      offered_resources() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
      mutable_offered_resources();

  // repeated .mesos.SlaveInfo.Capability capabilities = 10;
  inline int capabilities_size() const;
  inline void clear_capabilities();
  static const int kCapabilitiesFieldNumber = 10;
  inline const ::mesos::SlaveInfo_Capability& capabilities(int index) const;
  inline ::mesos::SlaveInfo_Capability* mutable_capabilities(int index);
  inline ::mesos::SlaveInfo_Capability* add_capabilities();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::SlaveInfo_Capability >&
      capabilities() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::SlaveInfo_Capability >*
      mutable_capabilities();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetAgents.Agent)
 private:
  inline void set_has_agent_info();
  inline void clear_has_agent_info();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_registered_time();
  inline void clear_has_registered_time();
  inline void set_has_reregistered_time();
  inline void clear_has_reregistered_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::SlaveInfo* agent_info_;
  ::std::string* version_;
  ::std::string* pid_;
  ::mesos::TimeInfo* registered_time_;
  ::mesos::TimeInfo* reregistered_time_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Resource > total_resources_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Resource > allocated_resources_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Resource > offered_resources_;
  ::google::protobuf::RepeatedPtrField< ::mesos::SlaveInfo_Capability > capabilities_;
  bool active_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetAgents_Agent* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetAgents : public ::google::protobuf::Message {
 public:
  Response_GetAgents();
  virtual ~Response_GetAgents();

  Response_GetAgents(const Response_GetAgents& from);

  inline Response_GetAgents& operator=(const Response_GetAgents& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetAgents& default_instance();

  void Swap(Response_GetAgents* other);

  // implements Message ----------------------------------------------

  Response_GetAgents* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetAgents& from);
  void MergeFrom(const Response_GetAgents& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_GetAgents_Agent Agent;

  // accessors -------------------------------------------------------

  // repeated .mesos.master_p.Response.GetAgents.Agent agents = 1;
  inline int agents_size() const;
  inline void clear_agents();
  static const int kAgentsFieldNumber = 1;
  inline const ::mesos::master_p::Response_GetAgents_Agent& agents(int index) const;
  inline ::mesos::master_p::Response_GetAgents_Agent* mutable_agents(int index);
  inline ::mesos::master_p::Response_GetAgents_Agent* add_agents();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetAgents_Agent >&
      agents() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetAgents_Agent >*
      mutable_agents();

  // repeated .mesos.SlaveInfo recovered_agents = 2;
  inline int recovered_agents_size() const;
  inline void clear_recovered_agents();
  static const int kRecoveredAgentsFieldNumber = 2;
  inline const ::mesos::SlaveInfo& recovered_agents(int index) const;
  inline ::mesos::SlaveInfo* mutable_recovered_agents(int index);
  inline ::mesos::SlaveInfo* add_recovered_agents();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::SlaveInfo >&
      recovered_agents() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::SlaveInfo >*
      mutable_recovered_agents();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetAgents)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetAgents_Agent > agents_;
  ::google::protobuf::RepeatedPtrField< ::mesos::SlaveInfo > recovered_agents_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetAgents* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetFrameworks_Framework : public ::google::protobuf::Message {
 public:
  Response_GetFrameworks_Framework();
  virtual ~Response_GetFrameworks_Framework();

  Response_GetFrameworks_Framework(const Response_GetFrameworks_Framework& from);

  inline Response_GetFrameworks_Framework& operator=(const Response_GetFrameworks_Framework& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetFrameworks_Framework& default_instance();

  void Swap(Response_GetFrameworks_Framework* other);

  // implements Message ----------------------------------------------

  Response_GetFrameworks_Framework* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetFrameworks_Framework& from);
  void MergeFrom(const Response_GetFrameworks_Framework& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.FrameworkInfo framework_info = 1;
  inline bool has_framework_info() const;
  inline void clear_framework_info();
  static const int kFrameworkInfoFieldNumber = 1;
  inline const ::mesos::FrameworkInfo& framework_info() const;
  inline ::mesos::FrameworkInfo* mutable_framework_info();
  inline ::mesos::FrameworkInfo* release_framework_info();
  inline void set_allocated_framework_info(::mesos::FrameworkInfo* framework_info);

  // required bool active = 2;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 2;
  inline bool active() const;
  inline void set_active(bool value);

  // required bool connected = 3;
  inline bool has_connected() const;
  inline void clear_connected();
  static const int kConnectedFieldNumber = 3;
  inline bool connected() const;
  inline void set_connected(bool value);

  // required bool recovered = 11;
  inline bool has_recovered() const;
  inline void clear_recovered();
  static const int kRecoveredFieldNumber = 11;
  inline bool recovered() const;
  inline void set_recovered(bool value);

  // optional .mesos.TimeInfo registered_time = 4;
  inline bool has_registered_time() const;
  inline void clear_registered_time();
  static const int kRegisteredTimeFieldNumber = 4;
  inline const ::mesos::TimeInfo& registered_time() const;
  inline ::mesos::TimeInfo* mutable_registered_time();
  inline ::mesos::TimeInfo* release_registered_time();
  inline void set_allocated_registered_time(::mesos::TimeInfo* registered_time);

  // optional .mesos.TimeInfo reregistered_time = 5;
  inline bool has_reregistered_time() const;
  inline void clear_reregistered_time();
  static const int kReregisteredTimeFieldNumber = 5;
  inline const ::mesos::TimeInfo& reregistered_time() const;
  inline ::mesos::TimeInfo* mutable_reregistered_time();
  inline ::mesos::TimeInfo* release_reregistered_time();
  inline void set_allocated_reregistered_time(::mesos::TimeInfo* reregistered_time);

  // optional .mesos.TimeInfo unregistered_time = 6;
  inline bool has_unregistered_time() const;
  inline void clear_unregistered_time();
  static const int kUnregisteredTimeFieldNumber = 6;
  inline const ::mesos::TimeInfo& unregistered_time() const;
  inline ::mesos::TimeInfo* mutable_unregistered_time();
  inline ::mesos::TimeInfo* release_unregistered_time();
  inline void set_allocated_unregistered_time(::mesos::TimeInfo* unregistered_time);

  // repeated .mesos.Offer offers = 7;
  inline int offers_size() const;
  inline void clear_offers();
  static const int kOffersFieldNumber = 7;
  inline const ::mesos::Offer& offers(int index) const;
  inline ::mesos::Offer* mutable_offers(int index);
  inline ::mesos::Offer* add_offers();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Offer >&
      offers() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Offer >*
      mutable_offers();

  // repeated .mesos.InverseOffer inverse_offers = 8;
  inline int inverse_offers_size() const;
  inline void clear_inverse_offers();
  static const int kInverseOffersFieldNumber = 8;
  inline const ::mesos::InverseOffer& inverse_offers(int index) const;
  inline ::mesos::InverseOffer* mutable_inverse_offers(int index);
  inline ::mesos::InverseOffer* add_inverse_offers();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::InverseOffer >&
      inverse_offers() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::InverseOffer >*
      mutable_inverse_offers();

  // repeated .mesos.Resource allocated_resources = 9;
  inline int allocated_resources_size() const;
  inline void clear_allocated_resources();
  static const int kAllocatedResourcesFieldNumber = 9;
  inline const ::mesos::Resource& allocated_resources(int index) const;
  inline ::mesos::Resource* mutable_allocated_resources(int index);
  inline ::mesos::Resource* add_allocated_resources();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
      allocated_resources() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
      mutable_allocated_resources();

  // repeated .mesos.Resource offered_resources = 10;
  inline int offered_resources_size() const;
  inline void clear_offered_resources();
  static const int kOfferedResourcesFieldNumber = 10;
  inline const ::mesos::Resource& offered_resources(int index) const;
  inline ::mesos::Resource* mutable_offered_resources(int index);
  inline ::mesos::Resource* add_offered_resources();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
      offered_resources() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
      mutable_offered_resources();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetFrameworks.Framework)
 private:
  inline void set_has_framework_info();
  inline void clear_has_framework_info();
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_connected();
  inline void clear_has_connected();
  inline void set_has_recovered();
  inline void clear_has_recovered();
  inline void set_has_registered_time();
  inline void clear_has_registered_time();
  inline void set_has_reregistered_time();
  inline void clear_has_reregistered_time();
  inline void set_has_unregistered_time();
  inline void clear_has_unregistered_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::FrameworkInfo* framework_info_;
  ::mesos::TimeInfo* registered_time_;
  ::mesos::TimeInfo* reregistered_time_;
  ::mesos::TimeInfo* unregistered_time_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Offer > offers_;
  ::google::protobuf::RepeatedPtrField< ::mesos::InverseOffer > inverse_offers_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Resource > allocated_resources_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Resource > offered_resources_;
  bool active_;
  bool connected_;
  bool recovered_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetFrameworks_Framework* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetFrameworks : public ::google::protobuf::Message {
 public:
  Response_GetFrameworks();
  virtual ~Response_GetFrameworks();

  Response_GetFrameworks(const Response_GetFrameworks& from);

  inline Response_GetFrameworks& operator=(const Response_GetFrameworks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetFrameworks& default_instance();

  void Swap(Response_GetFrameworks* other);

  // implements Message ----------------------------------------------

  Response_GetFrameworks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetFrameworks& from);
  void MergeFrom(const Response_GetFrameworks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_GetFrameworks_Framework Framework;

  // accessors -------------------------------------------------------

  // repeated .mesos.master_p.Response.GetFrameworks.Framework frameworks = 1;
  inline int frameworks_size() const;
  inline void clear_frameworks();
  static const int kFrameworksFieldNumber = 1;
  inline const ::mesos::master_p::Response_GetFrameworks_Framework& frameworks(int index) const;
  inline ::mesos::master_p::Response_GetFrameworks_Framework* mutable_frameworks(int index);
  inline ::mesos::master_p::Response_GetFrameworks_Framework* add_frameworks();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetFrameworks_Framework >&
      frameworks() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetFrameworks_Framework >*
      mutable_frameworks();

  // repeated .mesos.master_p.Response.GetFrameworks.Framework completed_frameworks = 2;
  inline int completed_frameworks_size() const;
  inline void clear_completed_frameworks();
  static const int kCompletedFrameworksFieldNumber = 2;
  inline const ::mesos::master_p::Response_GetFrameworks_Framework& completed_frameworks(int index) const;
  inline ::mesos::master_p::Response_GetFrameworks_Framework* mutable_completed_frameworks(int index);
  inline ::mesos::master_p::Response_GetFrameworks_Framework* add_completed_frameworks();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetFrameworks_Framework >&
      completed_frameworks() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetFrameworks_Framework >*
      mutable_completed_frameworks();

  // repeated .mesos.FrameworkInfo recovered_frameworks = 3;
  inline int recovered_frameworks_size() const;
  inline void clear_recovered_frameworks();
  static const int kRecoveredFrameworksFieldNumber = 3;
  inline const ::mesos::FrameworkInfo& recovered_frameworks(int index) const;
  inline ::mesos::FrameworkInfo* mutable_recovered_frameworks(int index);
  inline ::mesos::FrameworkInfo* add_recovered_frameworks();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::FrameworkInfo >&
      recovered_frameworks() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::FrameworkInfo >*
      mutable_recovered_frameworks();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetFrameworks)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetFrameworks_Framework > frameworks_;
  ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetFrameworks_Framework > completed_frameworks_;
  ::google::protobuf::RepeatedPtrField< ::mesos::FrameworkInfo > recovered_frameworks_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetFrameworks* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetExecutors_Executor : public ::google::protobuf::Message {
 public:
  Response_GetExecutors_Executor();
  virtual ~Response_GetExecutors_Executor();

  Response_GetExecutors_Executor(const Response_GetExecutors_Executor& from);

  inline Response_GetExecutors_Executor& operator=(const Response_GetExecutors_Executor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetExecutors_Executor& default_instance();

  void Swap(Response_GetExecutors_Executor* other);

  // implements Message ----------------------------------------------

  Response_GetExecutors_Executor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetExecutors_Executor& from);
  void MergeFrom(const Response_GetExecutors_Executor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.ExecutorInfo executor_info = 1;
  inline bool has_executor_info() const;
  inline void clear_executor_info();
  static const int kExecutorInfoFieldNumber = 1;
  inline const ::mesos::ExecutorInfo& executor_info() const;
  inline ::mesos::ExecutorInfo* mutable_executor_info();
  inline ::mesos::ExecutorInfo* release_executor_info();
  inline void set_allocated_executor_info(::mesos::ExecutorInfo* executor_info);

  // required .mesos.SlaveID slave_id = 2;
  inline bool has_slave_id() const;
  inline void clear_slave_id();
  static const int kSlaveIdFieldNumber = 2;
  inline const ::mesos::SlaveID& slave_id() const;
  inline ::mesos::SlaveID* mutable_slave_id();
  inline ::mesos::SlaveID* release_slave_id();
  inline void set_allocated_slave_id(::mesos::SlaveID* slave_id);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetExecutors.Executor)
 private:
  inline void set_has_executor_info();
  inline void clear_has_executor_info();
  inline void set_has_slave_id();
  inline void clear_has_slave_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::ExecutorInfo* executor_info_;
  ::mesos::SlaveID* slave_id_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetExecutors_Executor* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetExecutors : public ::google::protobuf::Message {
 public:
  Response_GetExecutors();
  virtual ~Response_GetExecutors();

  Response_GetExecutors(const Response_GetExecutors& from);

  inline Response_GetExecutors& operator=(const Response_GetExecutors& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetExecutors& default_instance();

  void Swap(Response_GetExecutors* other);

  // implements Message ----------------------------------------------

  Response_GetExecutors* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetExecutors& from);
  void MergeFrom(const Response_GetExecutors& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_GetExecutors_Executor Executor;

  // accessors -------------------------------------------------------

  // repeated .mesos.master_p.Response.GetExecutors.Executor executors = 1;
  inline int executors_size() const;
  inline void clear_executors();
  static const int kExecutorsFieldNumber = 1;
  inline const ::mesos::master_p::Response_GetExecutors_Executor& executors(int index) const;
  inline ::mesos::master_p::Response_GetExecutors_Executor* mutable_executors(int index);
  inline ::mesos::master_p::Response_GetExecutors_Executor* add_executors();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetExecutors_Executor >&
      executors() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetExecutors_Executor >*
      mutable_executors();

  // repeated .mesos.master_p.Response.GetExecutors.Executor orphan_executors = 2;
  inline int orphan_executors_size() const;
  inline void clear_orphan_executors();
  static const int kOrphanExecutorsFieldNumber = 2;
  inline const ::mesos::master_p::Response_GetExecutors_Executor& orphan_executors(int index) const;
  inline ::mesos::master_p::Response_GetExecutors_Executor* mutable_orphan_executors(int index);
  inline ::mesos::master_p::Response_GetExecutors_Executor* add_orphan_executors();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetExecutors_Executor >&
      orphan_executors() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetExecutors_Executor >*
      mutable_orphan_executors();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetExecutors)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetExecutors_Executor > executors_;
  ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetExecutors_Executor > orphan_executors_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetExecutors* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetTasks : public ::google::protobuf::Message {
 public:
  Response_GetTasks();
  virtual ~Response_GetTasks();

  Response_GetTasks(const Response_GetTasks& from);

  inline Response_GetTasks& operator=(const Response_GetTasks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetTasks& default_instance();

  void Swap(Response_GetTasks* other);

  // implements Message ----------------------------------------------

  Response_GetTasks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetTasks& from);
  void MergeFrom(const Response_GetTasks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.Task pending_tasks = 1;
  inline int pending_tasks_size() const;
  inline void clear_pending_tasks();
  static const int kPendingTasksFieldNumber = 1;
  inline const ::mesos::Task& pending_tasks(int index) const;
  inline ::mesos::Task* mutable_pending_tasks(int index);
  inline ::mesos::Task* add_pending_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Task >&
      pending_tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Task >*
      mutable_pending_tasks();

  // repeated .mesos.Task tasks = 2;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 2;
  inline const ::mesos::Task& tasks(int index) const;
  inline ::mesos::Task* mutable_tasks(int index);
  inline ::mesos::Task* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Task >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Task >*
      mutable_tasks();

  // repeated .mesos.Task unreachable_tasks = 5;
  inline int unreachable_tasks_size() const;
  inline void clear_unreachable_tasks();
  static const int kUnreachableTasksFieldNumber = 5;
  inline const ::mesos::Task& unreachable_tasks(int index) const;
  inline ::mesos::Task* mutable_unreachable_tasks(int index);
  inline ::mesos::Task* add_unreachable_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Task >&
      unreachable_tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Task >*
      mutable_unreachable_tasks();

  // repeated .mesos.Task completed_tasks = 3;
  inline int completed_tasks_size() const;
  inline void clear_completed_tasks();
  static const int kCompletedTasksFieldNumber = 3;
  inline const ::mesos::Task& completed_tasks(int index) const;
  inline ::mesos::Task* mutable_completed_tasks(int index);
  inline ::mesos::Task* add_completed_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Task >&
      completed_tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Task >*
      mutable_completed_tasks();

  // repeated .mesos.Task orphan_tasks = 4;
  inline int orphan_tasks_size() const;
  inline void clear_orphan_tasks();
  static const int kOrphanTasksFieldNumber = 4;
  inline const ::mesos::Task& orphan_tasks(int index) const;
  inline ::mesos::Task* mutable_orphan_tasks(int index);
  inline ::mesos::Task* add_orphan_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Task >&
      orphan_tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Task >*
      mutable_orphan_tasks();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetTasks)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Task > pending_tasks_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Task > tasks_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Task > unreachable_tasks_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Task > completed_tasks_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Task > orphan_tasks_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetTasks* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetRoles : public ::google::protobuf::Message {
 public:
  Response_GetRoles();
  virtual ~Response_GetRoles();

  Response_GetRoles(const Response_GetRoles& from);

  inline Response_GetRoles& operator=(const Response_GetRoles& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetRoles& default_instance();

  void Swap(Response_GetRoles* other);

  // implements Message ----------------------------------------------

  Response_GetRoles* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetRoles& from);
  void MergeFrom(const Response_GetRoles& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.Role roles = 1;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 1;
  inline const ::mesos::Role& roles(int index) const;
  inline ::mesos::Role* mutable_roles(int index);
  inline ::mesos::Role* add_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::Role >&
      roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::Role >*
      mutable_roles();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetRoles)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::Role > roles_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetRoles* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetWeights : public ::google::protobuf::Message {
 public:
  Response_GetWeights();
  virtual ~Response_GetWeights();

  Response_GetWeights(const Response_GetWeights& from);

  inline Response_GetWeights& operator=(const Response_GetWeights& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetWeights& default_instance();

  void Swap(Response_GetWeights* other);

  // implements Message ----------------------------------------------

  Response_GetWeights* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetWeights& from);
  void MergeFrom(const Response_GetWeights& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mesos.WeightInfo weight_infos = 1;
  inline int weight_infos_size() const;
  inline void clear_weight_infos();
  static const int kWeightInfosFieldNumber = 1;
  inline const ::mesos::WeightInfo& weight_infos(int index) const;
  inline ::mesos::WeightInfo* mutable_weight_infos(int index);
  inline ::mesos::WeightInfo* add_weight_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::mesos::WeightInfo >&
      weight_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::mesos::WeightInfo >*
      mutable_weight_infos();

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetWeights)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mesos::WeightInfo > weight_infos_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetWeights* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetMaster : public ::google::protobuf::Message {
 public:
  Response_GetMaster();
  virtual ~Response_GetMaster();

  Response_GetMaster(const Response_GetMaster& from);

  inline Response_GetMaster& operator=(const Response_GetMaster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetMaster& default_instance();

  void Swap(Response_GetMaster* other);

  // implements Message ----------------------------------------------

  Response_GetMaster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetMaster& from);
  void MergeFrom(const Response_GetMaster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mesos.MasterInfo master_info = 1;
  inline bool has_master_info() const;
  inline void clear_master_info();
  static const int kMasterInfoFieldNumber = 1;
  inline const ::mesos::MasterInfo& master_info() const;
  inline ::mesos::MasterInfo* mutable_master_info();
  inline ::mesos::MasterInfo* release_master_info();
  inline void set_allocated_master_info(::mesos::MasterInfo* master_info);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetMaster)
 private:
  inline void set_has_master_info();
  inline void clear_has_master_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::MasterInfo* master_info_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetMaster* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetMaintenanceStatus : public ::google::protobuf::Message {
 public:
  Response_GetMaintenanceStatus();
  virtual ~Response_GetMaintenanceStatus();

  Response_GetMaintenanceStatus(const Response_GetMaintenanceStatus& from);

  inline Response_GetMaintenanceStatus& operator=(const Response_GetMaintenanceStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetMaintenanceStatus& default_instance();

  void Swap(Response_GetMaintenanceStatus* other);

  // implements Message ----------------------------------------------

  Response_GetMaintenanceStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetMaintenanceStatus& from);
  void MergeFrom(const Response_GetMaintenanceStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.maintenance.ClusterStatus status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::mesos::maintenance::ClusterStatus& status() const;
  inline ::mesos::maintenance::ClusterStatus* mutable_status();
  inline ::mesos::maintenance::ClusterStatus* release_status();
  inline void set_allocated_status(::mesos::maintenance::ClusterStatus* status);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetMaintenanceStatus)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::maintenance::ClusterStatus* status_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetMaintenanceStatus* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetMaintenanceSchedule : public ::google::protobuf::Message {
 public:
  Response_GetMaintenanceSchedule();
  virtual ~Response_GetMaintenanceSchedule();

  Response_GetMaintenanceSchedule(const Response_GetMaintenanceSchedule& from);

  inline Response_GetMaintenanceSchedule& operator=(const Response_GetMaintenanceSchedule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetMaintenanceSchedule& default_instance();

  void Swap(Response_GetMaintenanceSchedule* other);

  // implements Message ----------------------------------------------

  Response_GetMaintenanceSchedule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetMaintenanceSchedule& from);
  void MergeFrom(const Response_GetMaintenanceSchedule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.maintenance.Schedule schedule = 1;
  inline bool has_schedule() const;
  inline void clear_schedule();
  static const int kScheduleFieldNumber = 1;
  inline const ::mesos::maintenance::Schedule& schedule() const;
  inline ::mesos::maintenance::Schedule* mutable_schedule();
  inline ::mesos::maintenance::Schedule* release_schedule();
  inline void set_allocated_schedule(::mesos::maintenance::Schedule* schedule);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetMaintenanceSchedule)
 private:
  inline void set_has_schedule();
  inline void clear_has_schedule();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::maintenance::Schedule* schedule_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetMaintenanceSchedule* default_instance_;
};
// -------------------------------------------------------------------

class Response_GetQuota : public ::google::protobuf::Message {
 public:
  Response_GetQuota();
  virtual ~Response_GetQuota();

  Response_GetQuota(const Response_GetQuota& from);

  inline Response_GetQuota& operator=(const Response_GetQuota& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_GetQuota& default_instance();

  void Swap(Response_GetQuota* other);

  // implements Message ----------------------------------------------

  Response_GetQuota* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_GetQuota& from);
  void MergeFrom(const Response_GetQuota& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.quota.QuotaStatus status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::mesos::quota::QuotaStatus& status() const;
  inline ::mesos::quota::QuotaStatus* mutable_status();
  inline ::mesos::quota::QuotaStatus* release_status();
  inline void set_allocated_status(::mesos::quota::QuotaStatus* status);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response.GetQuota)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::quota::QuotaStatus* status_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response_GetQuota* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_GetHealth GetHealth;
  typedef Response_GetFlags GetFlags;
  typedef Response_GetVersion GetVersion;
  typedef Response_GetMetrics GetMetrics;
  typedef Response_GetLoggingLevel GetLoggingLevel;
  typedef Response_ListFiles ListFiles;
  typedef Response_ReadFile ReadFile;
  typedef Response_GetState GetState;
  typedef Response_GetAgents GetAgents;
  typedef Response_GetFrameworks GetFrameworks;
  typedef Response_GetExecutors GetExecutors;
  typedef Response_GetTasks GetTasks;
  typedef Response_GetRoles GetRoles;
  typedef Response_GetWeights GetWeights;
  typedef Response_GetMaster GetMaster;
  typedef Response_GetMaintenanceStatus GetMaintenanceStatus;
  typedef Response_GetMaintenanceSchedule GetMaintenanceSchedule;
  typedef Response_GetQuota GetQuota;

  typedef Response_Type Type;
  static const Type UNKNOWN = Response_Type_UNKNOWN;
  static const Type GET_HEALTH = Response_Type_GET_HEALTH;
  static const Type GET_FLAGS = Response_Type_GET_FLAGS;
  static const Type GET_VERSION = Response_Type_GET_VERSION;
  static const Type GET_METRICS = Response_Type_GET_METRICS;
  static const Type GET_LOGGING_LEVEL = Response_Type_GET_LOGGING_LEVEL;
  static const Type LIST_FILES = Response_Type_LIST_FILES;
  static const Type READ_FILE = Response_Type_READ_FILE;
  static const Type GET_STATE = Response_Type_GET_STATE;
  static const Type GET_AGENTS = Response_Type_GET_AGENTS;
  static const Type GET_FRAMEWORKS = Response_Type_GET_FRAMEWORKS;
  static const Type GET_EXECUTORS = Response_Type_GET_EXECUTORS;
  static const Type GET_TASKS = Response_Type_GET_TASKS;
  static const Type GET_ROLES = Response_Type_GET_ROLES;
  static const Type GET_WEIGHTS = Response_Type_GET_WEIGHTS;
  static const Type GET_MASTER = Response_Type_GET_MASTER;
  static const Type GET_MAINTENANCE_STATUS = Response_Type_GET_MAINTENANCE_STATUS;
  static const Type GET_MAINTENANCE_SCHEDULE = Response_Type_GET_MAINTENANCE_SCHEDULE;
  static const Type GET_QUOTA = Response_Type_GET_QUOTA;
  static inline bool Type_IsValid(int value) {
    return Response_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Response_Type_Type_MIN;
  static const Type Type_MAX =
    Response_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Response_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Response_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Response_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Response_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .mesos.master_p.Response.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mesos::master_p::Response_Type type() const;
  inline void set_type(::mesos::master_p::Response_Type value);

  // optional .mesos.master_p.Response.GetHealth get_health = 2;
  inline bool has_get_health() const;
  inline void clear_get_health();
  static const int kGetHealthFieldNumber = 2;
  inline const ::mesos::master_p::Response_GetHealth& get_health() const;
  inline ::mesos::master_p::Response_GetHealth* mutable_get_health();
  inline ::mesos::master_p::Response_GetHealth* release_get_health();
  inline void set_allocated_get_health(::mesos::master_p::Response_GetHealth* get_health);

  // optional .mesos.master_p.Response.GetFlags get_flags = 3;
  inline bool has_get_flags() const;
  inline void clear_get_flags();
  static const int kGetFlagsFieldNumber = 3;
  inline const ::mesos::master_p::Response_GetFlags& get_flags() const;
  inline ::mesos::master_p::Response_GetFlags* mutable_get_flags();
  inline ::mesos::master_p::Response_GetFlags* release_get_flags();
  inline void set_allocated_get_flags(::mesos::master_p::Response_GetFlags* get_flags);

  // optional .mesos.master_p.Response.GetVersion get_version = 4;
  inline bool has_get_version() const;
  inline void clear_get_version();
  static const int kGetVersionFieldNumber = 4;
  inline const ::mesos::master_p::Response_GetVersion& get_version() const;
  inline ::mesos::master_p::Response_GetVersion* mutable_get_version();
  inline ::mesos::master_p::Response_GetVersion* release_get_version();
  inline void set_allocated_get_version(::mesos::master_p::Response_GetVersion* get_version);

  // optional .mesos.master_p.Response.GetMetrics get_metrics = 5;
  inline bool has_get_metrics() const;
  inline void clear_get_metrics();
  static const int kGetMetricsFieldNumber = 5;
  inline const ::mesos::master_p::Response_GetMetrics& get_metrics() const;
  inline ::mesos::master_p::Response_GetMetrics* mutable_get_metrics();
  inline ::mesos::master_p::Response_GetMetrics* release_get_metrics();
  inline void set_allocated_get_metrics(::mesos::master_p::Response_GetMetrics* get_metrics);

  // optional .mesos.master_p.Response.GetLoggingLevel get_logging_level = 6;
  inline bool has_get_logging_level() const;
  inline void clear_get_logging_level();
  static const int kGetLoggingLevelFieldNumber = 6;
  inline const ::mesos::master_p::Response_GetLoggingLevel& get_logging_level() const;
  inline ::mesos::master_p::Response_GetLoggingLevel* mutable_get_logging_level();
  inline ::mesos::master_p::Response_GetLoggingLevel* release_get_logging_level();
  inline void set_allocated_get_logging_level(::mesos::master_p::Response_GetLoggingLevel* get_logging_level);

  // optional .mesos.master_p.Response.ListFiles list_files = 7;
  inline bool has_list_files() const;
  inline void clear_list_files();
  static const int kListFilesFieldNumber = 7;
  inline const ::mesos::master_p::Response_ListFiles& list_files() const;
  inline ::mesos::master_p::Response_ListFiles* mutable_list_files();
  inline ::mesos::master_p::Response_ListFiles* release_list_files();
  inline void set_allocated_list_files(::mesos::master_p::Response_ListFiles* list_files);

  // optional .mesos.master_p.Response.ReadFile read_file = 8;
  inline bool has_read_file() const;
  inline void clear_read_file();
  static const int kReadFileFieldNumber = 8;
  inline const ::mesos::master_p::Response_ReadFile& read_file() const;
  inline ::mesos::master_p::Response_ReadFile* mutable_read_file();
  inline ::mesos::master_p::Response_ReadFile* release_read_file();
  inline void set_allocated_read_file(::mesos::master_p::Response_ReadFile* read_file);

  // optional .mesos.master_p.Response.GetState get_state = 9;
  inline bool has_get_state() const;
  inline void clear_get_state();
  static const int kGetStateFieldNumber = 9;
  inline const ::mesos::master_p::Response_GetState& get_state() const;
  inline ::mesos::master_p::Response_GetState* mutable_get_state();
  inline ::mesos::master_p::Response_GetState* release_get_state();
  inline void set_allocated_get_state(::mesos::master_p::Response_GetState* get_state);

  // optional .mesos.master_p.Response.GetAgents get_agents = 10;
  inline bool has_get_agents() const;
  inline void clear_get_agents();
  static const int kGetAgentsFieldNumber = 10;
  inline const ::mesos::master_p::Response_GetAgents& get_agents() const;
  inline ::mesos::master_p::Response_GetAgents* mutable_get_agents();
  inline ::mesos::master_p::Response_GetAgents* release_get_agents();
  inline void set_allocated_get_agents(::mesos::master_p::Response_GetAgents* get_agents);

  // optional .mesos.master_p.Response.GetFrameworks get_frameworks = 11;
  inline bool has_get_frameworks() const;
  inline void clear_get_frameworks();
  static const int kGetFrameworksFieldNumber = 11;
  inline const ::mesos::master_p::Response_GetFrameworks& get_frameworks() const;
  inline ::mesos::master_p::Response_GetFrameworks* mutable_get_frameworks();
  inline ::mesos::master_p::Response_GetFrameworks* release_get_frameworks();
  inline void set_allocated_get_frameworks(::mesos::master_p::Response_GetFrameworks* get_frameworks);

  // optional .mesos.master_p.Response.GetExecutors get_executors = 12;
  inline bool has_get_executors() const;
  inline void clear_get_executors();
  static const int kGetExecutorsFieldNumber = 12;
  inline const ::mesos::master_p::Response_GetExecutors& get_executors() const;
  inline ::mesos::master_p::Response_GetExecutors* mutable_get_executors();
  inline ::mesos::master_p::Response_GetExecutors* release_get_executors();
  inline void set_allocated_get_executors(::mesos::master_p::Response_GetExecutors* get_executors);

  // optional .mesos.master_p.Response.GetTasks get_tasks = 13;
  inline bool has_get_tasks() const;
  inline void clear_get_tasks();
  static const int kGetTasksFieldNumber = 13;
  inline const ::mesos::master_p::Response_GetTasks& get_tasks() const;
  inline ::mesos::master_p::Response_GetTasks* mutable_get_tasks();
  inline ::mesos::master_p::Response_GetTasks* release_get_tasks();
  inline void set_allocated_get_tasks(::mesos::master_p::Response_GetTasks* get_tasks);

  // optional .mesos.master_p.Response.GetRoles get_roles = 14;
  inline bool has_get_roles() const;
  inline void clear_get_roles();
  static const int kGetRolesFieldNumber = 14;
  inline const ::mesos::master_p::Response_GetRoles& get_roles() const;
  inline ::mesos::master_p::Response_GetRoles* mutable_get_roles();
  inline ::mesos::master_p::Response_GetRoles* release_get_roles();
  inline void set_allocated_get_roles(::mesos::master_p::Response_GetRoles* get_roles);

  // optional .mesos.master_p.Response.GetWeights get_weights = 15;
  inline bool has_get_weights() const;
  inline void clear_get_weights();
  static const int kGetWeightsFieldNumber = 15;
  inline const ::mesos::master_p::Response_GetWeights& get_weights() const;
  inline ::mesos::master_p::Response_GetWeights* mutable_get_weights();
  inline ::mesos::master_p::Response_GetWeights* release_get_weights();
  inline void set_allocated_get_weights(::mesos::master_p::Response_GetWeights* get_weights);

  // optional .mesos.master_p.Response.GetMaster get_master = 16;
  inline bool has_get_master() const;
  inline void clear_get_master();
  static const int kGetMasterFieldNumber = 16;
  inline const ::mesos::master_p::Response_GetMaster& get_master() const;
  inline ::mesos::master_p::Response_GetMaster* mutable_get_master();
  inline ::mesos::master_p::Response_GetMaster* release_get_master();
  inline void set_allocated_get_master(::mesos::master_p::Response_GetMaster* get_master);

  // optional .mesos.master_p.Response.GetMaintenanceStatus get_maintenance_status = 17;
  inline bool has_get_maintenance_status() const;
  inline void clear_get_maintenance_status();
  static const int kGetMaintenanceStatusFieldNumber = 17;
  inline const ::mesos::master_p::Response_GetMaintenanceStatus& get_maintenance_status() const;
  inline ::mesos::master_p::Response_GetMaintenanceStatus* mutable_get_maintenance_status();
  inline ::mesos::master_p::Response_GetMaintenanceStatus* release_get_maintenance_status();
  inline void set_allocated_get_maintenance_status(::mesos::master_p::Response_GetMaintenanceStatus* get_maintenance_status);

  // optional .mesos.master_p.Response.GetMaintenanceSchedule get_maintenance_schedule = 18;
  inline bool has_get_maintenance_schedule() const;
  inline void clear_get_maintenance_schedule();
  static const int kGetMaintenanceScheduleFieldNumber = 18;
  inline const ::mesos::master_p::Response_GetMaintenanceSchedule& get_maintenance_schedule() const;
  inline ::mesos::master_p::Response_GetMaintenanceSchedule* mutable_get_maintenance_schedule();
  inline ::mesos::master_p::Response_GetMaintenanceSchedule* release_get_maintenance_schedule();
  inline void set_allocated_get_maintenance_schedule(::mesos::master_p::Response_GetMaintenanceSchedule* get_maintenance_schedule);

  // optional .mesos.master_p.Response.GetQuota get_quota = 19;
  inline bool has_get_quota() const;
  inline void clear_get_quota();
  static const int kGetQuotaFieldNumber = 19;
  inline const ::mesos::master_p::Response_GetQuota& get_quota() const;
  inline ::mesos::master_p::Response_GetQuota* mutable_get_quota();
  inline ::mesos::master_p::Response_GetQuota* release_get_quota();
  inline void set_allocated_get_quota(::mesos::master_p::Response_GetQuota* get_quota);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Response)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_get_health();
  inline void clear_has_get_health();
  inline void set_has_get_flags();
  inline void clear_has_get_flags();
  inline void set_has_get_version();
  inline void clear_has_get_version();
  inline void set_has_get_metrics();
  inline void clear_has_get_metrics();
  inline void set_has_get_logging_level();
  inline void clear_has_get_logging_level();
  inline void set_has_list_files();
  inline void clear_has_list_files();
  inline void set_has_read_file();
  inline void clear_has_read_file();
  inline void set_has_get_state();
  inline void clear_has_get_state();
  inline void set_has_get_agents();
  inline void clear_has_get_agents();
  inline void set_has_get_frameworks();
  inline void clear_has_get_frameworks();
  inline void set_has_get_executors();
  inline void clear_has_get_executors();
  inline void set_has_get_tasks();
  inline void clear_has_get_tasks();
  inline void set_has_get_roles();
  inline void clear_has_get_roles();
  inline void set_has_get_weights();
  inline void clear_has_get_weights();
  inline void set_has_get_master();
  inline void clear_has_get_master();
  inline void set_has_get_maintenance_status();
  inline void clear_has_get_maintenance_status();
  inline void set_has_get_maintenance_schedule();
  inline void clear_has_get_maintenance_schedule();
  inline void set_has_get_quota();
  inline void clear_has_get_quota();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::master_p::Response_GetHealth* get_health_;
  ::mesos::master_p::Response_GetFlags* get_flags_;
  ::mesos::master_p::Response_GetVersion* get_version_;
  ::mesos::master_p::Response_GetMetrics* get_metrics_;
  ::mesos::master_p::Response_GetLoggingLevel* get_logging_level_;
  ::mesos::master_p::Response_ListFiles* list_files_;
  ::mesos::master_p::Response_ReadFile* read_file_;
  ::mesos::master_p::Response_GetState* get_state_;
  ::mesos::master_p::Response_GetAgents* get_agents_;
  ::mesos::master_p::Response_GetFrameworks* get_frameworks_;
  ::mesos::master_p::Response_GetExecutors* get_executors_;
  ::mesos::master_p::Response_GetTasks* get_tasks_;
  ::mesos::master_p::Response_GetRoles* get_roles_;
  ::mesos::master_p::Response_GetWeights* get_weights_;
  ::mesos::master_p::Response_GetMaster* get_master_;
  ::mesos::master_p::Response_GetMaintenanceStatus* get_maintenance_status_;
  ::mesos::master_p::Response_GetMaintenanceSchedule* get_maintenance_schedule_;
  ::mesos::master_p::Response_GetQuota* get_quota_;
  int type_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class Event_Subscribed : public ::google::protobuf::Message {
 public:
  Event_Subscribed();
  virtual ~Event_Subscribed();

  Event_Subscribed(const Event_Subscribed& from);

  inline Event_Subscribed& operator=(const Event_Subscribed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_Subscribed& default_instance();

  void Swap(Event_Subscribed* other);

  // implements Message ----------------------------------------------

  Event_Subscribed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_Subscribed& from);
  void MergeFrom(const Event_Subscribed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mesos.master_p.Response.GetState get_state = 1;
  inline bool has_get_state() const;
  inline void clear_get_state();
  static const int kGetStateFieldNumber = 1;
  inline const ::mesos::master_p::Response_GetState& get_state() const;
  inline ::mesos::master_p::Response_GetState* mutable_get_state();
  inline ::mesos::master_p::Response_GetState* release_get_state();
  inline void set_allocated_get_state(::mesos::master_p::Response_GetState* get_state);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Event.Subscribed)
 private:
  inline void set_has_get_state();
  inline void clear_has_get_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::master_p::Response_GetState* get_state_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Event_Subscribed* default_instance_;
};
// -------------------------------------------------------------------

class Event_TaskAdded : public ::google::protobuf::Message {
 public:
  Event_TaskAdded();
  virtual ~Event_TaskAdded();

  Event_TaskAdded(const Event_TaskAdded& from);

  inline Event_TaskAdded& operator=(const Event_TaskAdded& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_TaskAdded& default_instance();

  void Swap(Event_TaskAdded* other);

  // implements Message ----------------------------------------------

  Event_TaskAdded* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_TaskAdded& from);
  void MergeFrom(const Event_TaskAdded& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.Task task = 1;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::mesos::Task& task() const;
  inline ::mesos::Task* mutable_task();
  inline ::mesos::Task* release_task();
  inline void set_allocated_task(::mesos::Task* task);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Event.TaskAdded)
 private:
  inline void set_has_task();
  inline void clear_has_task();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::Task* task_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Event_TaskAdded* default_instance_;
};
// -------------------------------------------------------------------

class Event_TaskUpdated : public ::google::protobuf::Message {
 public:
  Event_TaskUpdated();
  virtual ~Event_TaskUpdated();

  Event_TaskUpdated(const Event_TaskUpdated& from);

  inline Event_TaskUpdated& operator=(const Event_TaskUpdated& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_TaskUpdated& default_instance();

  void Swap(Event_TaskUpdated* other);

  // implements Message ----------------------------------------------

  Event_TaskUpdated* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_TaskUpdated& from);
  void MergeFrom(const Event_TaskUpdated& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.FrameworkID framework_id = 1;
  inline bool has_framework_id() const;
  inline void clear_framework_id();
  static const int kFrameworkIdFieldNumber = 1;
  inline const ::mesos::FrameworkID& framework_id() const;
  inline ::mesos::FrameworkID* mutable_framework_id();
  inline ::mesos::FrameworkID* release_framework_id();
  inline void set_allocated_framework_id(::mesos::FrameworkID* framework_id);

  // required .mesos.TaskStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::mesos::TaskStatus& status() const;
  inline ::mesos::TaskStatus* mutable_status();
  inline ::mesos::TaskStatus* release_status();
  inline void set_allocated_status(::mesos::TaskStatus* status);

  // required .mesos.TaskState state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::mesos::TaskState state() const;
  inline void set_state(::mesos::TaskState value);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Event.TaskUpdated)
 private:
  inline void set_has_framework_id();
  inline void clear_has_framework_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::FrameworkID* framework_id_;
  ::mesos::TaskStatus* status_;
  int state_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Event_TaskUpdated* default_instance_;
};
// -------------------------------------------------------------------

class Event_AgentAdded : public ::google::protobuf::Message {
 public:
  Event_AgentAdded();
  virtual ~Event_AgentAdded();

  Event_AgentAdded(const Event_AgentAdded& from);

  inline Event_AgentAdded& operator=(const Event_AgentAdded& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_AgentAdded& default_instance();

  void Swap(Event_AgentAdded* other);

  // implements Message ----------------------------------------------

  Event_AgentAdded* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_AgentAdded& from);
  void MergeFrom(const Event_AgentAdded& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.master_p.Response.GetAgents.Agent agent = 1;
  inline bool has_agent() const;
  inline void clear_agent();
  static const int kAgentFieldNumber = 1;
  inline const ::mesos::master_p::Response_GetAgents_Agent& agent() const;
  inline ::mesos::master_p::Response_GetAgents_Agent* mutable_agent();
  inline ::mesos::master_p::Response_GetAgents_Agent* release_agent();
  inline void set_allocated_agent(::mesos::master_p::Response_GetAgents_Agent* agent);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Event.AgentAdded)
 private:
  inline void set_has_agent();
  inline void clear_has_agent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::master_p::Response_GetAgents_Agent* agent_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Event_AgentAdded* default_instance_;
};
// -------------------------------------------------------------------

class Event_AgentRemoved : public ::google::protobuf::Message {
 public:
  Event_AgentRemoved();
  virtual ~Event_AgentRemoved();

  Event_AgentRemoved(const Event_AgentRemoved& from);

  inline Event_AgentRemoved& operator=(const Event_AgentRemoved& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event_AgentRemoved& default_instance();

  void Swap(Event_AgentRemoved* other);

  // implements Message ----------------------------------------------

  Event_AgentRemoved* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event_AgentRemoved& from);
  void MergeFrom(const Event_AgentRemoved& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.SlaveID agent_id = 1;
  inline bool has_agent_id() const;
  inline void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  inline const ::mesos::SlaveID& agent_id() const;
  inline ::mesos::SlaveID* mutable_agent_id();
  inline ::mesos::SlaveID* release_agent_id();
  inline void set_allocated_agent_id(::mesos::SlaveID* agent_id);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Event.AgentRemoved)
 private:
  inline void set_has_agent_id();
  inline void clear_has_agent_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::SlaveID* agent_id_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Event_AgentRemoved* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Event_Subscribed Subscribed;
  typedef Event_TaskAdded TaskAdded;
  typedef Event_TaskUpdated TaskUpdated;
  typedef Event_AgentAdded AgentAdded;
  typedef Event_AgentRemoved AgentRemoved;

  typedef Event_Type Type;
  static const Type UNKNOWN = Event_Type_UNKNOWN;
  static const Type SUBSCRIBED = Event_Type_SUBSCRIBED;
  static const Type TASK_ADDED = Event_Type_TASK_ADDED;
  static const Type TASK_UPDATED = Event_Type_TASK_UPDATED;
  static const Type AGENT_ADDED = Event_Type_AGENT_ADDED;
  static const Type AGENT_REMOVED = Event_Type_AGENT_REMOVED;
  static inline bool Type_IsValid(int value) {
    return Event_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Event_Type_Type_MIN;
  static const Type Type_MAX =
    Event_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Event_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Event_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Event_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Event_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .mesos.master_p.Event.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mesos::master_p::Event_Type type() const;
  inline void set_type(::mesos::master_p::Event_Type value);

  // optional .mesos.master_p.Event.Subscribed subscribed = 2;
  inline bool has_subscribed() const;
  inline void clear_subscribed();
  static const int kSubscribedFieldNumber = 2;
  inline const ::mesos::master_p::Event_Subscribed& subscribed() const;
  inline ::mesos::master_p::Event_Subscribed* mutable_subscribed();
  inline ::mesos::master_p::Event_Subscribed* release_subscribed();
  inline void set_allocated_subscribed(::mesos::master_p::Event_Subscribed* subscribed);

  // optional .mesos.master_p.Event.TaskAdded task_added = 3;
  inline bool has_task_added() const;
  inline void clear_task_added();
  static const int kTaskAddedFieldNumber = 3;
  inline const ::mesos::master_p::Event_TaskAdded& task_added() const;
  inline ::mesos::master_p::Event_TaskAdded* mutable_task_added();
  inline ::mesos::master_p::Event_TaskAdded* release_task_added();
  inline void set_allocated_task_added(::mesos::master_p::Event_TaskAdded* task_added);

  // optional .mesos.master_p.Event.TaskUpdated task_updated = 4;
  inline bool has_task_updated() const;
  inline void clear_task_updated();
  static const int kTaskUpdatedFieldNumber = 4;
  inline const ::mesos::master_p::Event_TaskUpdated& task_updated() const;
  inline ::mesos::master_p::Event_TaskUpdated* mutable_task_updated();
  inline ::mesos::master_p::Event_TaskUpdated* release_task_updated();
  inline void set_allocated_task_updated(::mesos::master_p::Event_TaskUpdated* task_updated);

  // optional .mesos.master_p.Event.AgentAdded agent_added = 5;
  inline bool has_agent_added() const;
  inline void clear_agent_added();
  static const int kAgentAddedFieldNumber = 5;
  inline const ::mesos::master_p::Event_AgentAdded& agent_added() const;
  inline ::mesos::master_p::Event_AgentAdded* mutable_agent_added();
  inline ::mesos::master_p::Event_AgentAdded* release_agent_added();
  inline void set_allocated_agent_added(::mesos::master_p::Event_AgentAdded* agent_added);

  // optional .mesos.master_p.Event.AgentRemoved agent_removed = 6;
  inline bool has_agent_removed() const;
  inline void clear_agent_removed();
  static const int kAgentRemovedFieldNumber = 6;
  inline const ::mesos::master_p::Event_AgentRemoved& agent_removed() const;
  inline ::mesos::master_p::Event_AgentRemoved* mutable_agent_removed();
  inline ::mesos::master_p::Event_AgentRemoved* release_agent_removed();
  inline void set_allocated_agent_removed(::mesos::master_p::Event_AgentRemoved* agent_removed);

  // @@protoc_insertion_point(class_scope:mesos.master_p.Event)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_subscribed();
  inline void clear_has_subscribed();
  inline void set_has_task_added();
  inline void clear_has_task_added();
  inline void set_has_task_updated();
  inline void clear_has_task_updated();
  inline void set_has_agent_added();
  inline void clear_has_agent_added();
  inline void set_has_agent_removed();
  inline void clear_has_agent_removed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mesos::master_p::Event_Subscribed* subscribed_;
  ::mesos::master_p::Event_TaskAdded* task_added_;
  ::mesos::master_p::Event_TaskUpdated* task_updated_;
  ::mesos::master_p::Event_AgentAdded* agent_added_;
  ::mesos::master_p::Event_AgentRemoved* agent_removed_;
  int type_;
  friend void  protobuf_AddDesc_master_5fp_2eproto();
  friend void protobuf_AssignDesc_master_5fp_2eproto();
  friend void protobuf_ShutdownFile_master_5fp_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// ===================================================================


// ===================================================================

// Call_GetMetrics

// optional .mesos.DurationInfo timeout = 1;
inline bool Call_GetMetrics::has_timeout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_GetMetrics::set_has_timeout() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_GetMetrics::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call_GetMetrics::clear_timeout() {
  if (timeout_ != NULL) timeout_->::mesos::DurationInfo::Clear();
  clear_has_timeout();
}
inline const ::mesos::DurationInfo& Call_GetMetrics::timeout() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.GetMetrics.timeout)
  return timeout_ != NULL ? *timeout_ : *default_instance_->timeout_;
}
inline ::mesos::DurationInfo* Call_GetMetrics::mutable_timeout() {
  set_has_timeout();
  if (timeout_ == NULL) timeout_ = new ::mesos::DurationInfo;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.GetMetrics.timeout)
  return timeout_;
}
inline ::mesos::DurationInfo* Call_GetMetrics::release_timeout() {
  clear_has_timeout();
  ::mesos::DurationInfo* temp = timeout_;
  timeout_ = NULL;
  return temp;
}
inline void Call_GetMetrics::set_allocated_timeout(::mesos::DurationInfo* timeout) {
  delete timeout_;
  timeout_ = timeout;
  if (timeout) {
    set_has_timeout();
  } else {
    clear_has_timeout();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.GetMetrics.timeout)
}

// -------------------------------------------------------------------

// Call_SetLoggingLevel

// required uint32 level = 1;
inline bool Call_SetLoggingLevel::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_SetLoggingLevel::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_SetLoggingLevel::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call_SetLoggingLevel::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Call_SetLoggingLevel::level() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.SetLoggingLevel.level)
  return level_;
}
inline void Call_SetLoggingLevel::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:mesos.master_p.Call.SetLoggingLevel.level)
}

// required .mesos.DurationInfo duration = 2;
inline bool Call_SetLoggingLevel::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Call_SetLoggingLevel::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Call_SetLoggingLevel::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Call_SetLoggingLevel::clear_duration() {
  if (duration_ != NULL) duration_->::mesos::DurationInfo::Clear();
  clear_has_duration();
}
inline const ::mesos::DurationInfo& Call_SetLoggingLevel::duration() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.SetLoggingLevel.duration)
  return duration_ != NULL ? *duration_ : *default_instance_->duration_;
}
inline ::mesos::DurationInfo* Call_SetLoggingLevel::mutable_duration() {
  set_has_duration();
  if (duration_ == NULL) duration_ = new ::mesos::DurationInfo;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.SetLoggingLevel.duration)
  return duration_;
}
inline ::mesos::DurationInfo* Call_SetLoggingLevel::release_duration() {
  clear_has_duration();
  ::mesos::DurationInfo* temp = duration_;
  duration_ = NULL;
  return temp;
}
inline void Call_SetLoggingLevel::set_allocated_duration(::mesos::DurationInfo* duration) {
  delete duration_;
  duration_ = duration;
  if (duration) {
    set_has_duration();
  } else {
    clear_has_duration();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.SetLoggingLevel.duration)
}

// -------------------------------------------------------------------

// Call_ListFiles

// required string path = 1;
inline bool Call_ListFiles::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_ListFiles::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_ListFiles::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call_ListFiles::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& Call_ListFiles::path() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.ListFiles.path)
  return *path_;
}
inline void Call_ListFiles::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:mesos.master_p.Call.ListFiles.path)
}
inline void Call_ListFiles::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:mesos.master_p.Call.ListFiles.path)
}
inline void Call_ListFiles::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mesos.master_p.Call.ListFiles.path)
}
inline ::std::string* Call_ListFiles::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.ListFiles.path)
  return path_;
}
inline ::std::string* Call_ListFiles::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Call_ListFiles::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.ListFiles.path)
}

// -------------------------------------------------------------------

// Call_ReadFile

// required string path = 1;
inline bool Call_ReadFile::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_ReadFile::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_ReadFile::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call_ReadFile::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& Call_ReadFile::path() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.ReadFile.path)
  return *path_;
}
inline void Call_ReadFile::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:mesos.master_p.Call.ReadFile.path)
}
inline void Call_ReadFile::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:mesos.master_p.Call.ReadFile.path)
}
inline void Call_ReadFile::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mesos.master_p.Call.ReadFile.path)
}
inline ::std::string* Call_ReadFile::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.ReadFile.path)
  return path_;
}
inline ::std::string* Call_ReadFile::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Call_ReadFile::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.ReadFile.path)
}

// required uint64 offset = 2;
inline bool Call_ReadFile::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Call_ReadFile::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Call_ReadFile::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Call_ReadFile::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 Call_ReadFile::offset() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.ReadFile.offset)
  return offset_;
}
inline void Call_ReadFile::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:mesos.master_p.Call.ReadFile.offset)
}

// optional uint64 length = 3;
inline bool Call_ReadFile::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Call_ReadFile::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Call_ReadFile::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Call_ReadFile::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::uint64 Call_ReadFile::length() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.ReadFile.length)
  return length_;
}
inline void Call_ReadFile::set_length(::google::protobuf::uint64 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:mesos.master_p.Call.ReadFile.length)
}

// -------------------------------------------------------------------

// Call_UpdateWeights

// repeated .mesos.WeightInfo weight_infos = 1;
inline int Call_UpdateWeights::weight_infos_size() const {
  return weight_infos_.size();
}
inline void Call_UpdateWeights::clear_weight_infos() {
  weight_infos_.Clear();
}
inline const ::mesos::WeightInfo& Call_UpdateWeights::weight_infos(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.UpdateWeights.weight_infos)
  return weight_infos_.Get(index);
}
inline ::mesos::WeightInfo* Call_UpdateWeights::mutable_weight_infos(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.UpdateWeights.weight_infos)
  return weight_infos_.Mutable(index);
}
inline ::mesos::WeightInfo* Call_UpdateWeights::add_weight_infos() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Call.UpdateWeights.weight_infos)
  return weight_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::WeightInfo >&
Call_UpdateWeights::weight_infos() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Call.UpdateWeights.weight_infos)
  return weight_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::WeightInfo >*
Call_UpdateWeights::mutable_weight_infos() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Call.UpdateWeights.weight_infos)
  return &weight_infos_;
}

// -------------------------------------------------------------------

// Call_ReserveResources

// required .mesos.SlaveID slave_id = 1;
inline bool Call_ReserveResources::has_slave_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_ReserveResources::set_has_slave_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_ReserveResources::clear_has_slave_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call_ReserveResources::clear_slave_id() {
  if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
  clear_has_slave_id();
}
inline const ::mesos::SlaveID& Call_ReserveResources::slave_id() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.ReserveResources.slave_id)
  return slave_id_ != NULL ? *slave_id_ : *default_instance_->slave_id_;
}
inline ::mesos::SlaveID* Call_ReserveResources::mutable_slave_id() {
  set_has_slave_id();
  if (slave_id_ == NULL) slave_id_ = new ::mesos::SlaveID;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.ReserveResources.slave_id)
  return slave_id_;
}
inline ::mesos::SlaveID* Call_ReserveResources::release_slave_id() {
  clear_has_slave_id();
  ::mesos::SlaveID* temp = slave_id_;
  slave_id_ = NULL;
  return temp;
}
inline void Call_ReserveResources::set_allocated_slave_id(::mesos::SlaveID* slave_id) {
  delete slave_id_;
  slave_id_ = slave_id;
  if (slave_id) {
    set_has_slave_id();
  } else {
    clear_has_slave_id();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.ReserveResources.slave_id)
}

// repeated .mesos.Resource resources = 2;
inline int Call_ReserveResources::resources_size() const {
  return resources_.size();
}
inline void Call_ReserveResources::clear_resources() {
  resources_.Clear();
}
inline const ::mesos::Resource& Call_ReserveResources::resources(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.ReserveResources.resources)
  return resources_.Get(index);
}
inline ::mesos::Resource* Call_ReserveResources::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.ReserveResources.resources)
  return resources_.Mutable(index);
}
inline ::mesos::Resource* Call_ReserveResources::add_resources() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Call.ReserveResources.resources)
  return resources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
Call_ReserveResources::resources() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Call.ReserveResources.resources)
  return resources_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
Call_ReserveResources::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Call.ReserveResources.resources)
  return &resources_;
}

// -------------------------------------------------------------------

// Call_UnreserveResources

// required .mesos.SlaveID slave_id = 1;
inline bool Call_UnreserveResources::has_slave_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_UnreserveResources::set_has_slave_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_UnreserveResources::clear_has_slave_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call_UnreserveResources::clear_slave_id() {
  if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
  clear_has_slave_id();
}
inline const ::mesos::SlaveID& Call_UnreserveResources::slave_id() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.UnreserveResources.slave_id)
  return slave_id_ != NULL ? *slave_id_ : *default_instance_->slave_id_;
}
inline ::mesos::SlaveID* Call_UnreserveResources::mutable_slave_id() {
  set_has_slave_id();
  if (slave_id_ == NULL) slave_id_ = new ::mesos::SlaveID;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.UnreserveResources.slave_id)
  return slave_id_;
}
inline ::mesos::SlaveID* Call_UnreserveResources::release_slave_id() {
  clear_has_slave_id();
  ::mesos::SlaveID* temp = slave_id_;
  slave_id_ = NULL;
  return temp;
}
inline void Call_UnreserveResources::set_allocated_slave_id(::mesos::SlaveID* slave_id) {
  delete slave_id_;
  slave_id_ = slave_id;
  if (slave_id) {
    set_has_slave_id();
  } else {
    clear_has_slave_id();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.UnreserveResources.slave_id)
}

// repeated .mesos.Resource resources = 2;
inline int Call_UnreserveResources::resources_size() const {
  return resources_.size();
}
inline void Call_UnreserveResources::clear_resources() {
  resources_.Clear();
}
inline const ::mesos::Resource& Call_UnreserveResources::resources(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.UnreserveResources.resources)
  return resources_.Get(index);
}
inline ::mesos::Resource* Call_UnreserveResources::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.UnreserveResources.resources)
  return resources_.Mutable(index);
}
inline ::mesos::Resource* Call_UnreserveResources::add_resources() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Call.UnreserveResources.resources)
  return resources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
Call_UnreserveResources::resources() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Call.UnreserveResources.resources)
  return resources_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
Call_UnreserveResources::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Call.UnreserveResources.resources)
  return &resources_;
}

// -------------------------------------------------------------------

// Call_CreateVolumes

// required .mesos.SlaveID slave_id = 1;
inline bool Call_CreateVolumes::has_slave_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_CreateVolumes::set_has_slave_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_CreateVolumes::clear_has_slave_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call_CreateVolumes::clear_slave_id() {
  if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
  clear_has_slave_id();
}
inline const ::mesos::SlaveID& Call_CreateVolumes::slave_id() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.CreateVolumes.slave_id)
  return slave_id_ != NULL ? *slave_id_ : *default_instance_->slave_id_;
}
inline ::mesos::SlaveID* Call_CreateVolumes::mutable_slave_id() {
  set_has_slave_id();
  if (slave_id_ == NULL) slave_id_ = new ::mesos::SlaveID;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.CreateVolumes.slave_id)
  return slave_id_;
}
inline ::mesos::SlaveID* Call_CreateVolumes::release_slave_id() {
  clear_has_slave_id();
  ::mesos::SlaveID* temp = slave_id_;
  slave_id_ = NULL;
  return temp;
}
inline void Call_CreateVolumes::set_allocated_slave_id(::mesos::SlaveID* slave_id) {
  delete slave_id_;
  slave_id_ = slave_id;
  if (slave_id) {
    set_has_slave_id();
  } else {
    clear_has_slave_id();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.CreateVolumes.slave_id)
}

// repeated .mesos.Resource volumes = 2;
inline int Call_CreateVolumes::volumes_size() const {
  return volumes_.size();
}
inline void Call_CreateVolumes::clear_volumes() {
  volumes_.Clear();
}
inline const ::mesos::Resource& Call_CreateVolumes::volumes(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.CreateVolumes.volumes)
  return volumes_.Get(index);
}
inline ::mesos::Resource* Call_CreateVolumes::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.CreateVolumes.volumes)
  return volumes_.Mutable(index);
}
inline ::mesos::Resource* Call_CreateVolumes::add_volumes() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Call.CreateVolumes.volumes)
  return volumes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
Call_CreateVolumes::volumes() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Call.CreateVolumes.volumes)
  return volumes_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
Call_CreateVolumes::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Call.CreateVolumes.volumes)
  return &volumes_;
}

// -------------------------------------------------------------------

// Call_DestroyVolumes

// required .mesos.SlaveID slave_id = 1;
inline bool Call_DestroyVolumes::has_slave_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_DestroyVolumes::set_has_slave_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_DestroyVolumes::clear_has_slave_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call_DestroyVolumes::clear_slave_id() {
  if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
  clear_has_slave_id();
}
inline const ::mesos::SlaveID& Call_DestroyVolumes::slave_id() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.DestroyVolumes.slave_id)
  return slave_id_ != NULL ? *slave_id_ : *default_instance_->slave_id_;
}
inline ::mesos::SlaveID* Call_DestroyVolumes::mutable_slave_id() {
  set_has_slave_id();
  if (slave_id_ == NULL) slave_id_ = new ::mesos::SlaveID;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.DestroyVolumes.slave_id)
  return slave_id_;
}
inline ::mesos::SlaveID* Call_DestroyVolumes::release_slave_id() {
  clear_has_slave_id();
  ::mesos::SlaveID* temp = slave_id_;
  slave_id_ = NULL;
  return temp;
}
inline void Call_DestroyVolumes::set_allocated_slave_id(::mesos::SlaveID* slave_id) {
  delete slave_id_;
  slave_id_ = slave_id;
  if (slave_id) {
    set_has_slave_id();
  } else {
    clear_has_slave_id();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.DestroyVolumes.slave_id)
}

// repeated .mesos.Resource volumes = 2;
inline int Call_DestroyVolumes::volumes_size() const {
  return volumes_.size();
}
inline void Call_DestroyVolumes::clear_volumes() {
  volumes_.Clear();
}
inline const ::mesos::Resource& Call_DestroyVolumes::volumes(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.DestroyVolumes.volumes)
  return volumes_.Get(index);
}
inline ::mesos::Resource* Call_DestroyVolumes::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.DestroyVolumes.volumes)
  return volumes_.Mutable(index);
}
inline ::mesos::Resource* Call_DestroyVolumes::add_volumes() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Call.DestroyVolumes.volumes)
  return volumes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
Call_DestroyVolumes::volumes() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Call.DestroyVolumes.volumes)
  return volumes_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
Call_DestroyVolumes::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Call.DestroyVolumes.volumes)
  return &volumes_;
}

// -------------------------------------------------------------------

// Call_UpdateMaintenanceSchedule

// required .mesos.maintenance.Schedule schedule = 1;
inline bool Call_UpdateMaintenanceSchedule::has_schedule() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_UpdateMaintenanceSchedule::set_has_schedule() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_UpdateMaintenanceSchedule::clear_has_schedule() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call_UpdateMaintenanceSchedule::clear_schedule() {
  if (schedule_ != NULL) schedule_->::mesos::maintenance::Schedule::Clear();
  clear_has_schedule();
}
inline const ::mesos::maintenance::Schedule& Call_UpdateMaintenanceSchedule::schedule() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.UpdateMaintenanceSchedule.schedule)
  return schedule_ != NULL ? *schedule_ : *default_instance_->schedule_;
}
inline ::mesos::maintenance::Schedule* Call_UpdateMaintenanceSchedule::mutable_schedule() {
  set_has_schedule();
  if (schedule_ == NULL) schedule_ = new ::mesos::maintenance::Schedule;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.UpdateMaintenanceSchedule.schedule)
  return schedule_;
}
inline ::mesos::maintenance::Schedule* Call_UpdateMaintenanceSchedule::release_schedule() {
  clear_has_schedule();
  ::mesos::maintenance::Schedule* temp = schedule_;
  schedule_ = NULL;
  return temp;
}
inline void Call_UpdateMaintenanceSchedule::set_allocated_schedule(::mesos::maintenance::Schedule* schedule) {
  delete schedule_;
  schedule_ = schedule;
  if (schedule) {
    set_has_schedule();
  } else {
    clear_has_schedule();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.UpdateMaintenanceSchedule.schedule)
}

// -------------------------------------------------------------------

// Call_StartMaintenance

// repeated .mesos.MachineID machines = 1;
inline int Call_StartMaintenance::machines_size() const {
  return machines_.size();
}
inline void Call_StartMaintenance::clear_machines() {
  machines_.Clear();
}
inline const ::mesos::MachineID& Call_StartMaintenance::machines(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.StartMaintenance.machines)
  return machines_.Get(index);
}
inline ::mesos::MachineID* Call_StartMaintenance::mutable_machines(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.StartMaintenance.machines)
  return machines_.Mutable(index);
}
inline ::mesos::MachineID* Call_StartMaintenance::add_machines() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Call.StartMaintenance.machines)
  return machines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >&
Call_StartMaintenance::machines() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Call.StartMaintenance.machines)
  return machines_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >*
Call_StartMaintenance::mutable_machines() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Call.StartMaintenance.machines)
  return &machines_;
}

// -------------------------------------------------------------------

// Call_StopMaintenance

// repeated .mesos.MachineID machines = 1;
inline int Call_StopMaintenance::machines_size() const {
  return machines_.size();
}
inline void Call_StopMaintenance::clear_machines() {
  machines_.Clear();
}
inline const ::mesos::MachineID& Call_StopMaintenance::machines(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.StopMaintenance.machines)
  return machines_.Get(index);
}
inline ::mesos::MachineID* Call_StopMaintenance::mutable_machines(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.StopMaintenance.machines)
  return machines_.Mutable(index);
}
inline ::mesos::MachineID* Call_StopMaintenance::add_machines() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Call.StopMaintenance.machines)
  return machines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >&
Call_StopMaintenance::machines() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Call.StopMaintenance.machines)
  return machines_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::MachineID >*
Call_StopMaintenance::mutable_machines() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Call.StopMaintenance.machines)
  return &machines_;
}

// -------------------------------------------------------------------

// Call_SetQuota

// required .mesos.quota.QuotaRequest quota_request = 1;
inline bool Call_SetQuota::has_quota_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_SetQuota::set_has_quota_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_SetQuota::clear_has_quota_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call_SetQuota::clear_quota_request() {
  if (quota_request_ != NULL) quota_request_->::mesos::quota::QuotaRequest::Clear();
  clear_has_quota_request();
}
inline const ::mesos::quota::QuotaRequest& Call_SetQuota::quota_request() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.SetQuota.quota_request)
  return quota_request_ != NULL ? *quota_request_ : *default_instance_->quota_request_;
}
inline ::mesos::quota::QuotaRequest* Call_SetQuota::mutable_quota_request() {
  set_has_quota_request();
  if (quota_request_ == NULL) quota_request_ = new ::mesos::quota::QuotaRequest;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.SetQuota.quota_request)
  return quota_request_;
}
inline ::mesos::quota::QuotaRequest* Call_SetQuota::release_quota_request() {
  clear_has_quota_request();
  ::mesos::quota::QuotaRequest* temp = quota_request_;
  quota_request_ = NULL;
  return temp;
}
inline void Call_SetQuota::set_allocated_quota_request(::mesos::quota::QuotaRequest* quota_request) {
  delete quota_request_;
  quota_request_ = quota_request;
  if (quota_request) {
    set_has_quota_request();
  } else {
    clear_has_quota_request();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.SetQuota.quota_request)
}

// -------------------------------------------------------------------

// Call_RemoveQuota

// required string role = 1;
inline bool Call_RemoveQuota::has_role() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call_RemoveQuota::set_has_role() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call_RemoveQuota::clear_has_role() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call_RemoveQuota::clear_role() {
  if (role_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_->clear();
  }
  clear_has_role();
}
inline const ::std::string& Call_RemoveQuota::role() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.RemoveQuota.role)
  return *role_;
}
inline void Call_RemoveQuota::set_role(const ::std::string& value) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_ = new ::std::string;
  }
  role_->assign(value);
  // @@protoc_insertion_point(field_set:mesos.master_p.Call.RemoveQuota.role)
}
inline void Call_RemoveQuota::set_role(const char* value) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_ = new ::std::string;
  }
  role_->assign(value);
  // @@protoc_insertion_point(field_set_char:mesos.master_p.Call.RemoveQuota.role)
}
inline void Call_RemoveQuota::set_role(const char* value, size_t size) {
  set_has_role();
  if (role_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_ = new ::std::string;
  }
  role_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mesos.master_p.Call.RemoveQuota.role)
}
inline ::std::string* Call_RemoveQuota::mutable_role() {
  set_has_role();
  if (role_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    role_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.RemoveQuota.role)
  return role_;
}
inline ::std::string* Call_RemoveQuota::release_role() {
  clear_has_role();
  if (role_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = role_;
    role_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Call_RemoveQuota::set_allocated_role(::std::string* role) {
  if (role_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete role_;
  }
  if (role) {
    set_has_role();
    role_ = role;
  } else {
    clear_has_role();
    role_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.RemoveQuota.role)
}

// -------------------------------------------------------------------

// Call

// optional .mesos.master_p.Call.Type type = 1;
inline bool Call::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::mesos::master_p::Call_Type Call::type() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.type)
  return static_cast< ::mesos::master_p::Call_Type >(type_);
}
inline void Call::set_type(::mesos::master_p::Call_Type value) {
  assert(::mesos::master_p::Call_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mesos.master_p.Call.type)
}

// optional .mesos.master_p.Call.GetMetrics get_metrics = 2;
inline bool Call::has_get_metrics() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Call::set_has_get_metrics() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Call::clear_has_get_metrics() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Call::clear_get_metrics() {
  if (get_metrics_ != NULL) get_metrics_->::mesos::master_p::Call_GetMetrics::Clear();
  clear_has_get_metrics();
}
inline const ::mesos::master_p::Call_GetMetrics& Call::get_metrics() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.get_metrics)
  return get_metrics_ != NULL ? *get_metrics_ : *default_instance_->get_metrics_;
}
inline ::mesos::master_p::Call_GetMetrics* Call::mutable_get_metrics() {
  set_has_get_metrics();
  if (get_metrics_ == NULL) get_metrics_ = new ::mesos::master_p::Call_GetMetrics;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.get_metrics)
  return get_metrics_;
}
inline ::mesos::master_p::Call_GetMetrics* Call::release_get_metrics() {
  clear_has_get_metrics();
  ::mesos::master_p::Call_GetMetrics* temp = get_metrics_;
  get_metrics_ = NULL;
  return temp;
}
inline void Call::set_allocated_get_metrics(::mesos::master_p::Call_GetMetrics* get_metrics) {
  delete get_metrics_;
  get_metrics_ = get_metrics;
  if (get_metrics) {
    set_has_get_metrics();
  } else {
    clear_has_get_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.get_metrics)
}

// optional .mesos.master_p.Call.SetLoggingLevel set_logging_level = 3;
inline bool Call::has_set_logging_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Call::set_has_set_logging_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Call::clear_has_set_logging_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Call::clear_set_logging_level() {
  if (set_logging_level_ != NULL) set_logging_level_->::mesos::master_p::Call_SetLoggingLevel::Clear();
  clear_has_set_logging_level();
}
inline const ::mesos::master_p::Call_SetLoggingLevel& Call::set_logging_level() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.set_logging_level)
  return set_logging_level_ != NULL ? *set_logging_level_ : *default_instance_->set_logging_level_;
}
inline ::mesos::master_p::Call_SetLoggingLevel* Call::mutable_set_logging_level() {
  set_has_set_logging_level();
  if (set_logging_level_ == NULL) set_logging_level_ = new ::mesos::master_p::Call_SetLoggingLevel;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.set_logging_level)
  return set_logging_level_;
}
inline ::mesos::master_p::Call_SetLoggingLevel* Call::release_set_logging_level() {
  clear_has_set_logging_level();
  ::mesos::master_p::Call_SetLoggingLevel* temp = set_logging_level_;
  set_logging_level_ = NULL;
  return temp;
}
inline void Call::set_allocated_set_logging_level(::mesos::master_p::Call_SetLoggingLevel* set_logging_level) {
  delete set_logging_level_;
  set_logging_level_ = set_logging_level;
  if (set_logging_level) {
    set_has_set_logging_level();
  } else {
    clear_has_set_logging_level();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.set_logging_level)
}

// optional .mesos.master_p.Call.ListFiles list_files = 4;
inline bool Call::has_list_files() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Call::set_has_list_files() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Call::clear_has_list_files() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Call::clear_list_files() {
  if (list_files_ != NULL) list_files_->::mesos::master_p::Call_ListFiles::Clear();
  clear_has_list_files();
}
inline const ::mesos::master_p::Call_ListFiles& Call::list_files() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.list_files)
  return list_files_ != NULL ? *list_files_ : *default_instance_->list_files_;
}
inline ::mesos::master_p::Call_ListFiles* Call::mutable_list_files() {
  set_has_list_files();
  if (list_files_ == NULL) list_files_ = new ::mesos::master_p::Call_ListFiles;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.list_files)
  return list_files_;
}
inline ::mesos::master_p::Call_ListFiles* Call::release_list_files() {
  clear_has_list_files();
  ::mesos::master_p::Call_ListFiles* temp = list_files_;
  list_files_ = NULL;
  return temp;
}
inline void Call::set_allocated_list_files(::mesos::master_p::Call_ListFiles* list_files) {
  delete list_files_;
  list_files_ = list_files;
  if (list_files) {
    set_has_list_files();
  } else {
    clear_has_list_files();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.list_files)
}

// optional .mesos.master_p.Call.ReadFile read_file = 5;
inline bool Call::has_read_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Call::set_has_read_file() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Call::clear_has_read_file() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Call::clear_read_file() {
  if (read_file_ != NULL) read_file_->::mesos::master_p::Call_ReadFile::Clear();
  clear_has_read_file();
}
inline const ::mesos::master_p::Call_ReadFile& Call::read_file() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.read_file)
  return read_file_ != NULL ? *read_file_ : *default_instance_->read_file_;
}
inline ::mesos::master_p::Call_ReadFile* Call::mutable_read_file() {
  set_has_read_file();
  if (read_file_ == NULL) read_file_ = new ::mesos::master_p::Call_ReadFile;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.read_file)
  return read_file_;
}
inline ::mesos::master_p::Call_ReadFile* Call::release_read_file() {
  clear_has_read_file();
  ::mesos::master_p::Call_ReadFile* temp = read_file_;
  read_file_ = NULL;
  return temp;
}
inline void Call::set_allocated_read_file(::mesos::master_p::Call_ReadFile* read_file) {
  delete read_file_;
  read_file_ = read_file;
  if (read_file) {
    set_has_read_file();
  } else {
    clear_has_read_file();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.read_file)
}

// optional .mesos.master_p.Call.UpdateWeights update_weights = 6;
inline bool Call::has_update_weights() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Call::set_has_update_weights() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Call::clear_has_update_weights() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Call::clear_update_weights() {
  if (update_weights_ != NULL) update_weights_->::mesos::master_p::Call_UpdateWeights::Clear();
  clear_has_update_weights();
}
inline const ::mesos::master_p::Call_UpdateWeights& Call::update_weights() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.update_weights)
  return update_weights_ != NULL ? *update_weights_ : *default_instance_->update_weights_;
}
inline ::mesos::master_p::Call_UpdateWeights* Call::mutable_update_weights() {
  set_has_update_weights();
  if (update_weights_ == NULL) update_weights_ = new ::mesos::master_p::Call_UpdateWeights;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.update_weights)
  return update_weights_;
}
inline ::mesos::master_p::Call_UpdateWeights* Call::release_update_weights() {
  clear_has_update_weights();
  ::mesos::master_p::Call_UpdateWeights* temp = update_weights_;
  update_weights_ = NULL;
  return temp;
}
inline void Call::set_allocated_update_weights(::mesos::master_p::Call_UpdateWeights* update_weights) {
  delete update_weights_;
  update_weights_ = update_weights;
  if (update_weights) {
    set_has_update_weights();
  } else {
    clear_has_update_weights();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.update_weights)
}

// optional .mesos.master_p.Call.ReserveResources reserve_resources = 7;
inline bool Call::has_reserve_resources() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Call::set_has_reserve_resources() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Call::clear_has_reserve_resources() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Call::clear_reserve_resources() {
  if (reserve_resources_ != NULL) reserve_resources_->::mesos::master_p::Call_ReserveResources::Clear();
  clear_has_reserve_resources();
}
inline const ::mesos::master_p::Call_ReserveResources& Call::reserve_resources() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.reserve_resources)
  return reserve_resources_ != NULL ? *reserve_resources_ : *default_instance_->reserve_resources_;
}
inline ::mesos::master_p::Call_ReserveResources* Call::mutable_reserve_resources() {
  set_has_reserve_resources();
  if (reserve_resources_ == NULL) reserve_resources_ = new ::mesos::master_p::Call_ReserveResources;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.reserve_resources)
  return reserve_resources_;
}
inline ::mesos::master_p::Call_ReserveResources* Call::release_reserve_resources() {
  clear_has_reserve_resources();
  ::mesos::master_p::Call_ReserveResources* temp = reserve_resources_;
  reserve_resources_ = NULL;
  return temp;
}
inline void Call::set_allocated_reserve_resources(::mesos::master_p::Call_ReserveResources* reserve_resources) {
  delete reserve_resources_;
  reserve_resources_ = reserve_resources;
  if (reserve_resources) {
    set_has_reserve_resources();
  } else {
    clear_has_reserve_resources();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.reserve_resources)
}

// optional .mesos.master_p.Call.UnreserveResources unreserve_resources = 8;
inline bool Call::has_unreserve_resources() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Call::set_has_unreserve_resources() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Call::clear_has_unreserve_resources() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Call::clear_unreserve_resources() {
  if (unreserve_resources_ != NULL) unreserve_resources_->::mesos::master_p::Call_UnreserveResources::Clear();
  clear_has_unreserve_resources();
}
inline const ::mesos::master_p::Call_UnreserveResources& Call::unreserve_resources() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.unreserve_resources)
  return unreserve_resources_ != NULL ? *unreserve_resources_ : *default_instance_->unreserve_resources_;
}
inline ::mesos::master_p::Call_UnreserveResources* Call::mutable_unreserve_resources() {
  set_has_unreserve_resources();
  if (unreserve_resources_ == NULL) unreserve_resources_ = new ::mesos::master_p::Call_UnreserveResources;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.unreserve_resources)
  return unreserve_resources_;
}
inline ::mesos::master_p::Call_UnreserveResources* Call::release_unreserve_resources() {
  clear_has_unreserve_resources();
  ::mesos::master_p::Call_UnreserveResources* temp = unreserve_resources_;
  unreserve_resources_ = NULL;
  return temp;
}
inline void Call::set_allocated_unreserve_resources(::mesos::master_p::Call_UnreserveResources* unreserve_resources) {
  delete unreserve_resources_;
  unreserve_resources_ = unreserve_resources;
  if (unreserve_resources) {
    set_has_unreserve_resources();
  } else {
    clear_has_unreserve_resources();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.unreserve_resources)
}

// optional .mesos.master_p.Call.CreateVolumes create_volumes = 9;
inline bool Call::has_create_volumes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Call::set_has_create_volumes() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Call::clear_has_create_volumes() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Call::clear_create_volumes() {
  if (create_volumes_ != NULL) create_volumes_->::mesos::master_p::Call_CreateVolumes::Clear();
  clear_has_create_volumes();
}
inline const ::mesos::master_p::Call_CreateVolumes& Call::create_volumes() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.create_volumes)
  return create_volumes_ != NULL ? *create_volumes_ : *default_instance_->create_volumes_;
}
inline ::mesos::master_p::Call_CreateVolumes* Call::mutable_create_volumes() {
  set_has_create_volumes();
  if (create_volumes_ == NULL) create_volumes_ = new ::mesos::master_p::Call_CreateVolumes;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.create_volumes)
  return create_volumes_;
}
inline ::mesos::master_p::Call_CreateVolumes* Call::release_create_volumes() {
  clear_has_create_volumes();
  ::mesos::master_p::Call_CreateVolumes* temp = create_volumes_;
  create_volumes_ = NULL;
  return temp;
}
inline void Call::set_allocated_create_volumes(::mesos::master_p::Call_CreateVolumes* create_volumes) {
  delete create_volumes_;
  create_volumes_ = create_volumes;
  if (create_volumes) {
    set_has_create_volumes();
  } else {
    clear_has_create_volumes();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.create_volumes)
}

// optional .mesos.master_p.Call.DestroyVolumes destroy_volumes = 10;
inline bool Call::has_destroy_volumes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Call::set_has_destroy_volumes() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Call::clear_has_destroy_volumes() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Call::clear_destroy_volumes() {
  if (destroy_volumes_ != NULL) destroy_volumes_->::mesos::master_p::Call_DestroyVolumes::Clear();
  clear_has_destroy_volumes();
}
inline const ::mesos::master_p::Call_DestroyVolumes& Call::destroy_volumes() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.destroy_volumes)
  return destroy_volumes_ != NULL ? *destroy_volumes_ : *default_instance_->destroy_volumes_;
}
inline ::mesos::master_p::Call_DestroyVolumes* Call::mutable_destroy_volumes() {
  set_has_destroy_volumes();
  if (destroy_volumes_ == NULL) destroy_volumes_ = new ::mesos::master_p::Call_DestroyVolumes;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.destroy_volumes)
  return destroy_volumes_;
}
inline ::mesos::master_p::Call_DestroyVolumes* Call::release_destroy_volumes() {
  clear_has_destroy_volumes();
  ::mesos::master_p::Call_DestroyVolumes* temp = destroy_volumes_;
  destroy_volumes_ = NULL;
  return temp;
}
inline void Call::set_allocated_destroy_volumes(::mesos::master_p::Call_DestroyVolumes* destroy_volumes) {
  delete destroy_volumes_;
  destroy_volumes_ = destroy_volumes;
  if (destroy_volumes) {
    set_has_destroy_volumes();
  } else {
    clear_has_destroy_volumes();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.destroy_volumes)
}

// optional .mesos.master_p.Call.UpdateMaintenanceSchedule update_maintenance_schedule = 11;
inline bool Call::has_update_maintenance_schedule() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Call::set_has_update_maintenance_schedule() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Call::clear_has_update_maintenance_schedule() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Call::clear_update_maintenance_schedule() {
  if (update_maintenance_schedule_ != NULL) update_maintenance_schedule_->::mesos::master_p::Call_UpdateMaintenanceSchedule::Clear();
  clear_has_update_maintenance_schedule();
}
inline const ::mesos::master_p::Call_UpdateMaintenanceSchedule& Call::update_maintenance_schedule() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.update_maintenance_schedule)
  return update_maintenance_schedule_ != NULL ? *update_maintenance_schedule_ : *default_instance_->update_maintenance_schedule_;
}
inline ::mesos::master_p::Call_UpdateMaintenanceSchedule* Call::mutable_update_maintenance_schedule() {
  set_has_update_maintenance_schedule();
  if (update_maintenance_schedule_ == NULL) update_maintenance_schedule_ = new ::mesos::master_p::Call_UpdateMaintenanceSchedule;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.update_maintenance_schedule)
  return update_maintenance_schedule_;
}
inline ::mesos::master_p::Call_UpdateMaintenanceSchedule* Call::release_update_maintenance_schedule() {
  clear_has_update_maintenance_schedule();
  ::mesos::master_p::Call_UpdateMaintenanceSchedule* temp = update_maintenance_schedule_;
  update_maintenance_schedule_ = NULL;
  return temp;
}
inline void Call::set_allocated_update_maintenance_schedule(::mesos::master_p::Call_UpdateMaintenanceSchedule* update_maintenance_schedule) {
  delete update_maintenance_schedule_;
  update_maintenance_schedule_ = update_maintenance_schedule;
  if (update_maintenance_schedule) {
    set_has_update_maintenance_schedule();
  } else {
    clear_has_update_maintenance_schedule();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.update_maintenance_schedule)
}

// optional .mesos.master_p.Call.StartMaintenance start_maintenance = 12;
inline bool Call::has_start_maintenance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Call::set_has_start_maintenance() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Call::clear_has_start_maintenance() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Call::clear_start_maintenance() {
  if (start_maintenance_ != NULL) start_maintenance_->::mesos::master_p::Call_StartMaintenance::Clear();
  clear_has_start_maintenance();
}
inline const ::mesos::master_p::Call_StartMaintenance& Call::start_maintenance() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.start_maintenance)
  return start_maintenance_ != NULL ? *start_maintenance_ : *default_instance_->start_maintenance_;
}
inline ::mesos::master_p::Call_StartMaintenance* Call::mutable_start_maintenance() {
  set_has_start_maintenance();
  if (start_maintenance_ == NULL) start_maintenance_ = new ::mesos::master_p::Call_StartMaintenance;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.start_maintenance)
  return start_maintenance_;
}
inline ::mesos::master_p::Call_StartMaintenance* Call::release_start_maintenance() {
  clear_has_start_maintenance();
  ::mesos::master_p::Call_StartMaintenance* temp = start_maintenance_;
  start_maintenance_ = NULL;
  return temp;
}
inline void Call::set_allocated_start_maintenance(::mesos::master_p::Call_StartMaintenance* start_maintenance) {
  delete start_maintenance_;
  start_maintenance_ = start_maintenance;
  if (start_maintenance) {
    set_has_start_maintenance();
  } else {
    clear_has_start_maintenance();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.start_maintenance)
}

// optional .mesos.master_p.Call.StopMaintenance stop_maintenance = 13;
inline bool Call::has_stop_maintenance() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Call::set_has_stop_maintenance() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Call::clear_has_stop_maintenance() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Call::clear_stop_maintenance() {
  if (stop_maintenance_ != NULL) stop_maintenance_->::mesos::master_p::Call_StopMaintenance::Clear();
  clear_has_stop_maintenance();
}
inline const ::mesos::master_p::Call_StopMaintenance& Call::stop_maintenance() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.stop_maintenance)
  return stop_maintenance_ != NULL ? *stop_maintenance_ : *default_instance_->stop_maintenance_;
}
inline ::mesos::master_p::Call_StopMaintenance* Call::mutable_stop_maintenance() {
  set_has_stop_maintenance();
  if (stop_maintenance_ == NULL) stop_maintenance_ = new ::mesos::master_p::Call_StopMaintenance;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.stop_maintenance)
  return stop_maintenance_;
}
inline ::mesos::master_p::Call_StopMaintenance* Call::release_stop_maintenance() {
  clear_has_stop_maintenance();
  ::mesos::master_p::Call_StopMaintenance* temp = stop_maintenance_;
  stop_maintenance_ = NULL;
  return temp;
}
inline void Call::set_allocated_stop_maintenance(::mesos::master_p::Call_StopMaintenance* stop_maintenance) {
  delete stop_maintenance_;
  stop_maintenance_ = stop_maintenance;
  if (stop_maintenance) {
    set_has_stop_maintenance();
  } else {
    clear_has_stop_maintenance();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.stop_maintenance)
}

// optional .mesos.master_p.Call.SetQuota set_quota = 14;
inline bool Call::has_set_quota() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Call::set_has_set_quota() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Call::clear_has_set_quota() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Call::clear_set_quota() {
  if (set_quota_ != NULL) set_quota_->::mesos::master_p::Call_SetQuota::Clear();
  clear_has_set_quota();
}
inline const ::mesos::master_p::Call_SetQuota& Call::set_quota() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.set_quota)
  return set_quota_ != NULL ? *set_quota_ : *default_instance_->set_quota_;
}
inline ::mesos::master_p::Call_SetQuota* Call::mutable_set_quota() {
  set_has_set_quota();
  if (set_quota_ == NULL) set_quota_ = new ::mesos::master_p::Call_SetQuota;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.set_quota)
  return set_quota_;
}
inline ::mesos::master_p::Call_SetQuota* Call::release_set_quota() {
  clear_has_set_quota();
  ::mesos::master_p::Call_SetQuota* temp = set_quota_;
  set_quota_ = NULL;
  return temp;
}
inline void Call::set_allocated_set_quota(::mesos::master_p::Call_SetQuota* set_quota) {
  delete set_quota_;
  set_quota_ = set_quota;
  if (set_quota) {
    set_has_set_quota();
  } else {
    clear_has_set_quota();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.set_quota)
}

// optional .mesos.master_p.Call.RemoveQuota remove_quota = 15;
inline bool Call::has_remove_quota() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Call::set_has_remove_quota() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Call::clear_has_remove_quota() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Call::clear_remove_quota() {
  if (remove_quota_ != NULL) remove_quota_->::mesos::master_p::Call_RemoveQuota::Clear();
  clear_has_remove_quota();
}
inline const ::mesos::master_p::Call_RemoveQuota& Call::remove_quota() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Call.remove_quota)
  return remove_quota_ != NULL ? *remove_quota_ : *default_instance_->remove_quota_;
}
inline ::mesos::master_p::Call_RemoveQuota* Call::mutable_remove_quota() {
  set_has_remove_quota();
  if (remove_quota_ == NULL) remove_quota_ = new ::mesos::master_p::Call_RemoveQuota;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Call.remove_quota)
  return remove_quota_;
}
inline ::mesos::master_p::Call_RemoveQuota* Call::release_remove_quota() {
  clear_has_remove_quota();
  ::mesos::master_p::Call_RemoveQuota* temp = remove_quota_;
  remove_quota_ = NULL;
  return temp;
}
inline void Call::set_allocated_remove_quota(::mesos::master_p::Call_RemoveQuota* remove_quota) {
  delete remove_quota_;
  remove_quota_ = remove_quota;
  if (remove_quota) {
    set_has_remove_quota();
  } else {
    clear_has_remove_quota();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Call.remove_quota)
}

// -------------------------------------------------------------------

// Response_GetHealth

// required bool healthy = 1;
inline bool Response_GetHealth::has_healthy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_GetHealth::set_has_healthy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_GetHealth::clear_has_healthy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_GetHealth::clear_healthy() {
  healthy_ = false;
  clear_has_healthy();
}
inline bool Response_GetHealth::healthy() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetHealth.healthy)
  return healthy_;
}
inline void Response_GetHealth::set_healthy(bool value) {
  set_has_healthy();
  healthy_ = value;
  // @@protoc_insertion_point(field_set:mesos.master_p.Response.GetHealth.healthy)
}

// -------------------------------------------------------------------

// Response_GetFlags

// repeated .mesos.Flag flags = 1;
inline int Response_GetFlags::flags_size() const {
  return flags_.size();
}
inline void Response_GetFlags::clear_flags() {
  flags_.Clear();
}
inline const ::mesos::Flag& Response_GetFlags::flags(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFlags.flags)
  return flags_.Get(index);
}
inline ::mesos::Flag* Response_GetFlags::mutable_flags(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetFlags.flags)
  return flags_.Mutable(index);
}
inline ::mesos::Flag* Response_GetFlags::add_flags() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetFlags.flags)
  return flags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Flag >&
Response_GetFlags::flags() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetFlags.flags)
  return flags_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Flag >*
Response_GetFlags::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetFlags.flags)
  return &flags_;
}

// -------------------------------------------------------------------

// Response_GetVersion

// required .mesos.VersionInfo version_info = 1;
inline bool Response_GetVersion::has_version_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_GetVersion::set_has_version_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_GetVersion::clear_has_version_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_GetVersion::clear_version_info() {
  if (version_info_ != NULL) version_info_->::mesos::VersionInfo::Clear();
  clear_has_version_info();
}
inline const ::mesos::VersionInfo& Response_GetVersion::version_info() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetVersion.version_info)
  return version_info_ != NULL ? *version_info_ : *default_instance_->version_info_;
}
inline ::mesos::VersionInfo* Response_GetVersion::mutable_version_info() {
  set_has_version_info();
  if (version_info_ == NULL) version_info_ = new ::mesos::VersionInfo;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetVersion.version_info)
  return version_info_;
}
inline ::mesos::VersionInfo* Response_GetVersion::release_version_info() {
  clear_has_version_info();
  ::mesos::VersionInfo* temp = version_info_;
  version_info_ = NULL;
  return temp;
}
inline void Response_GetVersion::set_allocated_version_info(::mesos::VersionInfo* version_info) {
  delete version_info_;
  version_info_ = version_info;
  if (version_info) {
    set_has_version_info();
  } else {
    clear_has_version_info();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetVersion.version_info)
}

// -------------------------------------------------------------------

// Response_GetMetrics

// repeated .mesos.Metric metrics = 1;
inline int Response_GetMetrics::metrics_size() const {
  return metrics_.size();
}
inline void Response_GetMetrics::clear_metrics() {
  metrics_.Clear();
}
inline const ::mesos::Metric& Response_GetMetrics::metrics(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetMetrics.metrics)
  return metrics_.Get(index);
}
inline ::mesos::Metric* Response_GetMetrics::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetMetrics.metrics)
  return metrics_.Mutable(index);
}
inline ::mesos::Metric* Response_GetMetrics::add_metrics() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetMetrics.metrics)
  return metrics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Metric >&
Response_GetMetrics::metrics() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetMetrics.metrics)
  return metrics_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Metric >*
Response_GetMetrics::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetMetrics.metrics)
  return &metrics_;
}

// -------------------------------------------------------------------

// Response_GetLoggingLevel

// required uint32 level = 1;
inline bool Response_GetLoggingLevel::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_GetLoggingLevel::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_GetLoggingLevel::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_GetLoggingLevel::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Response_GetLoggingLevel::level() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetLoggingLevel.level)
  return level_;
}
inline void Response_GetLoggingLevel::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:mesos.master_p.Response.GetLoggingLevel.level)
}

// -------------------------------------------------------------------

// Response_ListFiles

// repeated .mesos.FileInfo file_infos = 1;
inline int Response_ListFiles::file_infos_size() const {
  return file_infos_.size();
}
inline void Response_ListFiles::clear_file_infos() {
  file_infos_.Clear();
}
inline const ::mesos::FileInfo& Response_ListFiles::file_infos(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.ListFiles.file_infos)
  return file_infos_.Get(index);
}
inline ::mesos::FileInfo* Response_ListFiles::mutable_file_infos(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.ListFiles.file_infos)
  return file_infos_.Mutable(index);
}
inline ::mesos::FileInfo* Response_ListFiles::add_file_infos() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.ListFiles.file_infos)
  return file_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::FileInfo >&
Response_ListFiles::file_infos() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.ListFiles.file_infos)
  return file_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::FileInfo >*
Response_ListFiles::mutable_file_infos() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.ListFiles.file_infos)
  return &file_infos_;
}

// -------------------------------------------------------------------

// Response_ReadFile

// required uint64 size = 1;
inline bool Response_ReadFile::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_ReadFile::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_ReadFile::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_ReadFile::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 Response_ReadFile::size() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.ReadFile.size)
  return size_;
}
inline void Response_ReadFile::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:mesos.master_p.Response.ReadFile.size)
}

// required bytes data = 2;
inline bool Response_ReadFile::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response_ReadFile::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response_ReadFile::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response_ReadFile::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Response_ReadFile::data() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.ReadFile.data)
  return *data_;
}
inline void Response_ReadFile::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:mesos.master_p.Response.ReadFile.data)
}
inline void Response_ReadFile::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:mesos.master_p.Response.ReadFile.data)
}
inline void Response_ReadFile::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mesos.master_p.Response.ReadFile.data)
}
inline ::std::string* Response_ReadFile::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.ReadFile.data)
  return data_;
}
inline ::std::string* Response_ReadFile::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Response_ReadFile::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.ReadFile.data)
}

// -------------------------------------------------------------------

// Response_GetState

// optional .mesos.master_p.Response.GetTasks get_tasks = 1;
inline bool Response_GetState::has_get_tasks() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_GetState::set_has_get_tasks() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_GetState::clear_has_get_tasks() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_GetState::clear_get_tasks() {
  if (get_tasks_ != NULL) get_tasks_->::mesos::master_p::Response_GetTasks::Clear();
  clear_has_get_tasks();
}
inline const ::mesos::master_p::Response_GetTasks& Response_GetState::get_tasks() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetState.get_tasks)
  return get_tasks_ != NULL ? *get_tasks_ : *default_instance_->get_tasks_;
}
inline ::mesos::master_p::Response_GetTasks* Response_GetState::mutable_get_tasks() {
  set_has_get_tasks();
  if (get_tasks_ == NULL) get_tasks_ = new ::mesos::master_p::Response_GetTasks;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetState.get_tasks)
  return get_tasks_;
}
inline ::mesos::master_p::Response_GetTasks* Response_GetState::release_get_tasks() {
  clear_has_get_tasks();
  ::mesos::master_p::Response_GetTasks* temp = get_tasks_;
  get_tasks_ = NULL;
  return temp;
}
inline void Response_GetState::set_allocated_get_tasks(::mesos::master_p::Response_GetTasks* get_tasks) {
  delete get_tasks_;
  get_tasks_ = get_tasks;
  if (get_tasks) {
    set_has_get_tasks();
  } else {
    clear_has_get_tasks();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetState.get_tasks)
}

// optional .mesos.master_p.Response.GetExecutors get_executors = 2;
inline bool Response_GetState::has_get_executors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response_GetState::set_has_get_executors() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response_GetState::clear_has_get_executors() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response_GetState::clear_get_executors() {
  if (get_executors_ != NULL) get_executors_->::mesos::master_p::Response_GetExecutors::Clear();
  clear_has_get_executors();
}
inline const ::mesos::master_p::Response_GetExecutors& Response_GetState::get_executors() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetState.get_executors)
  return get_executors_ != NULL ? *get_executors_ : *default_instance_->get_executors_;
}
inline ::mesos::master_p::Response_GetExecutors* Response_GetState::mutable_get_executors() {
  set_has_get_executors();
  if (get_executors_ == NULL) get_executors_ = new ::mesos::master_p::Response_GetExecutors;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetState.get_executors)
  return get_executors_;
}
inline ::mesos::master_p::Response_GetExecutors* Response_GetState::release_get_executors() {
  clear_has_get_executors();
  ::mesos::master_p::Response_GetExecutors* temp = get_executors_;
  get_executors_ = NULL;
  return temp;
}
inline void Response_GetState::set_allocated_get_executors(::mesos::master_p::Response_GetExecutors* get_executors) {
  delete get_executors_;
  get_executors_ = get_executors;
  if (get_executors) {
    set_has_get_executors();
  } else {
    clear_has_get_executors();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetState.get_executors)
}

// optional .mesos.master_p.Response.GetFrameworks get_frameworks = 3;
inline bool Response_GetState::has_get_frameworks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response_GetState::set_has_get_frameworks() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response_GetState::clear_has_get_frameworks() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response_GetState::clear_get_frameworks() {
  if (get_frameworks_ != NULL) get_frameworks_->::mesos::master_p::Response_GetFrameworks::Clear();
  clear_has_get_frameworks();
}
inline const ::mesos::master_p::Response_GetFrameworks& Response_GetState::get_frameworks() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetState.get_frameworks)
  return get_frameworks_ != NULL ? *get_frameworks_ : *default_instance_->get_frameworks_;
}
inline ::mesos::master_p::Response_GetFrameworks* Response_GetState::mutable_get_frameworks() {
  set_has_get_frameworks();
  if (get_frameworks_ == NULL) get_frameworks_ = new ::mesos::master_p::Response_GetFrameworks;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetState.get_frameworks)
  return get_frameworks_;
}
inline ::mesos::master_p::Response_GetFrameworks* Response_GetState::release_get_frameworks() {
  clear_has_get_frameworks();
  ::mesos::master_p::Response_GetFrameworks* temp = get_frameworks_;
  get_frameworks_ = NULL;
  return temp;
}
inline void Response_GetState::set_allocated_get_frameworks(::mesos::master_p::Response_GetFrameworks* get_frameworks) {
  delete get_frameworks_;
  get_frameworks_ = get_frameworks;
  if (get_frameworks) {
    set_has_get_frameworks();
  } else {
    clear_has_get_frameworks();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetState.get_frameworks)
}

// optional .mesos.master_p.Response.GetAgents get_agents = 4;
inline bool Response_GetState::has_get_agents() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response_GetState::set_has_get_agents() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response_GetState::clear_has_get_agents() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response_GetState::clear_get_agents() {
  if (get_agents_ != NULL) get_agents_->::mesos::master_p::Response_GetAgents::Clear();
  clear_has_get_agents();
}
inline const ::mesos::master_p::Response_GetAgents& Response_GetState::get_agents() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetState.get_agents)
  return get_agents_ != NULL ? *get_agents_ : *default_instance_->get_agents_;
}
inline ::mesos::master_p::Response_GetAgents* Response_GetState::mutable_get_agents() {
  set_has_get_agents();
  if (get_agents_ == NULL) get_agents_ = new ::mesos::master_p::Response_GetAgents;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetState.get_agents)
  return get_agents_;
}
inline ::mesos::master_p::Response_GetAgents* Response_GetState::release_get_agents() {
  clear_has_get_agents();
  ::mesos::master_p::Response_GetAgents* temp = get_agents_;
  get_agents_ = NULL;
  return temp;
}
inline void Response_GetState::set_allocated_get_agents(::mesos::master_p::Response_GetAgents* get_agents) {
  delete get_agents_;
  get_agents_ = get_agents;
  if (get_agents) {
    set_has_get_agents();
  } else {
    clear_has_get_agents();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetState.get_agents)
}

// -------------------------------------------------------------------

// Response_GetAgents_Agent

// required .mesos.SlaveInfo agent_info = 1;
inline bool Response_GetAgents_Agent::has_agent_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_GetAgents_Agent::set_has_agent_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_GetAgents_Agent::clear_has_agent_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_GetAgents_Agent::clear_agent_info() {
  if (agent_info_ != NULL) agent_info_->::mesos::SlaveInfo::Clear();
  clear_has_agent_info();
}
inline const ::mesos::SlaveInfo& Response_GetAgents_Agent::agent_info() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetAgents.Agent.agent_info)
  return agent_info_ != NULL ? *agent_info_ : *default_instance_->agent_info_;
}
inline ::mesos::SlaveInfo* Response_GetAgents_Agent::mutable_agent_info() {
  set_has_agent_info();
  if (agent_info_ == NULL) agent_info_ = new ::mesos::SlaveInfo;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetAgents.Agent.agent_info)
  return agent_info_;
}
inline ::mesos::SlaveInfo* Response_GetAgents_Agent::release_agent_info() {
  clear_has_agent_info();
  ::mesos::SlaveInfo* temp = agent_info_;
  agent_info_ = NULL;
  return temp;
}
inline void Response_GetAgents_Agent::set_allocated_agent_info(::mesos::SlaveInfo* agent_info) {
  delete agent_info_;
  agent_info_ = agent_info;
  if (agent_info) {
    set_has_agent_info();
  } else {
    clear_has_agent_info();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetAgents.Agent.agent_info)
}

// required bool active = 2;
inline bool Response_GetAgents_Agent::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response_GetAgents_Agent::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response_GetAgents_Agent::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response_GetAgents_Agent::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool Response_GetAgents_Agent::active() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetAgents.Agent.active)
  return active_;
}
inline void Response_GetAgents_Agent::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:mesos.master_p.Response.GetAgents.Agent.active)
}

// required string version = 3;
inline bool Response_GetAgents_Agent::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response_GetAgents_Agent::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response_GetAgents_Agent::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response_GetAgents_Agent::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& Response_GetAgents_Agent::version() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetAgents.Agent.version)
  return *version_;
}
inline void Response_GetAgents_Agent::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:mesos.master_p.Response.GetAgents.Agent.version)
}
inline void Response_GetAgents_Agent::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:mesos.master_p.Response.GetAgents.Agent.version)
}
inline void Response_GetAgents_Agent::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mesos.master_p.Response.GetAgents.Agent.version)
}
inline ::std::string* Response_GetAgents_Agent::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetAgents.Agent.version)
  return version_;
}
inline ::std::string* Response_GetAgents_Agent::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Response_GetAgents_Agent::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetAgents.Agent.version)
}

// optional string pid = 4;
inline bool Response_GetAgents_Agent::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response_GetAgents_Agent::set_has_pid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response_GetAgents_Agent::clear_has_pid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response_GetAgents_Agent::clear_pid() {
  if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_->clear();
  }
  clear_has_pid();
}
inline const ::std::string& Response_GetAgents_Agent::pid() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetAgents.Agent.pid)
  return *pid_;
}
inline void Response_GetAgents_Agent::set_pid(const ::std::string& value) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_ = new ::std::string;
  }
  pid_->assign(value);
  // @@protoc_insertion_point(field_set:mesos.master_p.Response.GetAgents.Agent.pid)
}
inline void Response_GetAgents_Agent::set_pid(const char* value) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_ = new ::std::string;
  }
  pid_->assign(value);
  // @@protoc_insertion_point(field_set_char:mesos.master_p.Response.GetAgents.Agent.pid)
}
inline void Response_GetAgents_Agent::set_pid(const char* value, size_t size) {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_ = new ::std::string;
  }
  pid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mesos.master_p.Response.GetAgents.Agent.pid)
}
inline ::std::string* Response_GetAgents_Agent::mutable_pid() {
  set_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetAgents.Agent.pid)
  return pid_;
}
inline ::std::string* Response_GetAgents_Agent::release_pid() {
  clear_has_pid();
  if (pid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pid_;
    pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Response_GetAgents_Agent::set_allocated_pid(::std::string* pid) {
  if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pid_;
  }
  if (pid) {
    set_has_pid();
    pid_ = pid;
  } else {
    clear_has_pid();
    pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetAgents.Agent.pid)
}

// optional .mesos.TimeInfo registered_time = 5;
inline bool Response_GetAgents_Agent::has_registered_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response_GetAgents_Agent::set_has_registered_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response_GetAgents_Agent::clear_has_registered_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response_GetAgents_Agent::clear_registered_time() {
  if (registered_time_ != NULL) registered_time_->::mesos::TimeInfo::Clear();
  clear_has_registered_time();
}
inline const ::mesos::TimeInfo& Response_GetAgents_Agent::registered_time() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetAgents.Agent.registered_time)
  return registered_time_ != NULL ? *registered_time_ : *default_instance_->registered_time_;
}
inline ::mesos::TimeInfo* Response_GetAgents_Agent::mutable_registered_time() {
  set_has_registered_time();
  if (registered_time_ == NULL) registered_time_ = new ::mesos::TimeInfo;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetAgents.Agent.registered_time)
  return registered_time_;
}
inline ::mesos::TimeInfo* Response_GetAgents_Agent::release_registered_time() {
  clear_has_registered_time();
  ::mesos::TimeInfo* temp = registered_time_;
  registered_time_ = NULL;
  return temp;
}
inline void Response_GetAgents_Agent::set_allocated_registered_time(::mesos::TimeInfo* registered_time) {
  delete registered_time_;
  registered_time_ = registered_time;
  if (registered_time) {
    set_has_registered_time();
  } else {
    clear_has_registered_time();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetAgents.Agent.registered_time)
}

// optional .mesos.TimeInfo reregistered_time = 6;
inline bool Response_GetAgents_Agent::has_reregistered_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Response_GetAgents_Agent::set_has_reregistered_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Response_GetAgents_Agent::clear_has_reregistered_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Response_GetAgents_Agent::clear_reregistered_time() {
  if (reregistered_time_ != NULL) reregistered_time_->::mesos::TimeInfo::Clear();
  clear_has_reregistered_time();
}
inline const ::mesos::TimeInfo& Response_GetAgents_Agent::reregistered_time() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetAgents.Agent.reregistered_time)
  return reregistered_time_ != NULL ? *reregistered_time_ : *default_instance_->reregistered_time_;
}
inline ::mesos::TimeInfo* Response_GetAgents_Agent::mutable_reregistered_time() {
  set_has_reregistered_time();
  if (reregistered_time_ == NULL) reregistered_time_ = new ::mesos::TimeInfo;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetAgents.Agent.reregistered_time)
  return reregistered_time_;
}
inline ::mesos::TimeInfo* Response_GetAgents_Agent::release_reregistered_time() {
  clear_has_reregistered_time();
  ::mesos::TimeInfo* temp = reregistered_time_;
  reregistered_time_ = NULL;
  return temp;
}
inline void Response_GetAgents_Agent::set_allocated_reregistered_time(::mesos::TimeInfo* reregistered_time) {
  delete reregistered_time_;
  reregistered_time_ = reregistered_time;
  if (reregistered_time) {
    set_has_reregistered_time();
  } else {
    clear_has_reregistered_time();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetAgents.Agent.reregistered_time)
}

// repeated .mesos.Resource total_resources = 7;
inline int Response_GetAgents_Agent::total_resources_size() const {
  return total_resources_.size();
}
inline void Response_GetAgents_Agent::clear_total_resources() {
  total_resources_.Clear();
}
inline const ::mesos::Resource& Response_GetAgents_Agent::total_resources(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetAgents.Agent.total_resources)
  return total_resources_.Get(index);
}
inline ::mesos::Resource* Response_GetAgents_Agent::mutable_total_resources(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetAgents.Agent.total_resources)
  return total_resources_.Mutable(index);
}
inline ::mesos::Resource* Response_GetAgents_Agent::add_total_resources() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetAgents.Agent.total_resources)
  return total_resources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
Response_GetAgents_Agent::total_resources() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetAgents.Agent.total_resources)
  return total_resources_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
Response_GetAgents_Agent::mutable_total_resources() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetAgents.Agent.total_resources)
  return &total_resources_;
}

// repeated .mesos.Resource allocated_resources = 8;
inline int Response_GetAgents_Agent::allocated_resources_size() const {
  return allocated_resources_.size();
}
inline void Response_GetAgents_Agent::clear_allocated_resources() {
  allocated_resources_.Clear();
}
inline const ::mesos::Resource& Response_GetAgents_Agent::allocated_resources(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetAgents.Agent.allocated_resources)
  return allocated_resources_.Get(index);
}
inline ::mesos::Resource* Response_GetAgents_Agent::mutable_allocated_resources(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetAgents.Agent.allocated_resources)
  return allocated_resources_.Mutable(index);
}
inline ::mesos::Resource* Response_GetAgents_Agent::add_allocated_resources() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetAgents.Agent.allocated_resources)
  return allocated_resources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
Response_GetAgents_Agent::allocated_resources() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetAgents.Agent.allocated_resources)
  return allocated_resources_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
Response_GetAgents_Agent::mutable_allocated_resources() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetAgents.Agent.allocated_resources)
  return &allocated_resources_;
}

// repeated .mesos.Resource offered_resources = 9;
inline int Response_GetAgents_Agent::offered_resources_size() const {
  return offered_resources_.size();
}
inline void Response_GetAgents_Agent::clear_offered_resources() {
  offered_resources_.Clear();
}
inline const ::mesos::Resource& Response_GetAgents_Agent::offered_resources(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetAgents.Agent.offered_resources)
  return offered_resources_.Get(index);
}
inline ::mesos::Resource* Response_GetAgents_Agent::mutable_offered_resources(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetAgents.Agent.offered_resources)
  return offered_resources_.Mutable(index);
}
inline ::mesos::Resource* Response_GetAgents_Agent::add_offered_resources() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetAgents.Agent.offered_resources)
  return offered_resources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
Response_GetAgents_Agent::offered_resources() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetAgents.Agent.offered_resources)
  return offered_resources_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
Response_GetAgents_Agent::mutable_offered_resources() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetAgents.Agent.offered_resources)
  return &offered_resources_;
}

// repeated .mesos.SlaveInfo.Capability capabilities = 10;
inline int Response_GetAgents_Agent::capabilities_size() const {
  return capabilities_.size();
}
inline void Response_GetAgents_Agent::clear_capabilities() {
  capabilities_.Clear();
}
inline const ::mesos::SlaveInfo_Capability& Response_GetAgents_Agent::capabilities(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetAgents.Agent.capabilities)
  return capabilities_.Get(index);
}
inline ::mesos::SlaveInfo_Capability* Response_GetAgents_Agent::mutable_capabilities(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetAgents.Agent.capabilities)
  return capabilities_.Mutable(index);
}
inline ::mesos::SlaveInfo_Capability* Response_GetAgents_Agent::add_capabilities() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetAgents.Agent.capabilities)
  return capabilities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::SlaveInfo_Capability >&
Response_GetAgents_Agent::capabilities() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetAgents.Agent.capabilities)
  return capabilities_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::SlaveInfo_Capability >*
Response_GetAgents_Agent::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetAgents.Agent.capabilities)
  return &capabilities_;
}

// -------------------------------------------------------------------

// Response_GetAgents

// repeated .mesos.master_p.Response.GetAgents.Agent agents = 1;
inline int Response_GetAgents::agents_size() const {
  return agents_.size();
}
inline void Response_GetAgents::clear_agents() {
  agents_.Clear();
}
inline const ::mesos::master_p::Response_GetAgents_Agent& Response_GetAgents::agents(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetAgents.agents)
  return agents_.Get(index);
}
inline ::mesos::master_p::Response_GetAgents_Agent* Response_GetAgents::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetAgents.agents)
  return agents_.Mutable(index);
}
inline ::mesos::master_p::Response_GetAgents_Agent* Response_GetAgents::add_agents() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetAgents.agents)
  return agents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetAgents_Agent >&
Response_GetAgents::agents() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetAgents.agents)
  return agents_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetAgents_Agent >*
Response_GetAgents::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetAgents.agents)
  return &agents_;
}

// repeated .mesos.SlaveInfo recovered_agents = 2;
inline int Response_GetAgents::recovered_agents_size() const {
  return recovered_agents_.size();
}
inline void Response_GetAgents::clear_recovered_agents() {
  recovered_agents_.Clear();
}
inline const ::mesos::SlaveInfo& Response_GetAgents::recovered_agents(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetAgents.recovered_agents)
  return recovered_agents_.Get(index);
}
inline ::mesos::SlaveInfo* Response_GetAgents::mutable_recovered_agents(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetAgents.recovered_agents)
  return recovered_agents_.Mutable(index);
}
inline ::mesos::SlaveInfo* Response_GetAgents::add_recovered_agents() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetAgents.recovered_agents)
  return recovered_agents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::SlaveInfo >&
Response_GetAgents::recovered_agents() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetAgents.recovered_agents)
  return recovered_agents_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::SlaveInfo >*
Response_GetAgents::mutable_recovered_agents() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetAgents.recovered_agents)
  return &recovered_agents_;
}

// -------------------------------------------------------------------

// Response_GetFrameworks_Framework

// required .mesos.FrameworkInfo framework_info = 1;
inline bool Response_GetFrameworks_Framework::has_framework_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_GetFrameworks_Framework::set_has_framework_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_GetFrameworks_Framework::clear_has_framework_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_GetFrameworks_Framework::clear_framework_info() {
  if (framework_info_ != NULL) framework_info_->::mesos::FrameworkInfo::Clear();
  clear_has_framework_info();
}
inline const ::mesos::FrameworkInfo& Response_GetFrameworks_Framework::framework_info() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFrameworks.Framework.framework_info)
  return framework_info_ != NULL ? *framework_info_ : *default_instance_->framework_info_;
}
inline ::mesos::FrameworkInfo* Response_GetFrameworks_Framework::mutable_framework_info() {
  set_has_framework_info();
  if (framework_info_ == NULL) framework_info_ = new ::mesos::FrameworkInfo;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetFrameworks.Framework.framework_info)
  return framework_info_;
}
inline ::mesos::FrameworkInfo* Response_GetFrameworks_Framework::release_framework_info() {
  clear_has_framework_info();
  ::mesos::FrameworkInfo* temp = framework_info_;
  framework_info_ = NULL;
  return temp;
}
inline void Response_GetFrameworks_Framework::set_allocated_framework_info(::mesos::FrameworkInfo* framework_info) {
  delete framework_info_;
  framework_info_ = framework_info;
  if (framework_info) {
    set_has_framework_info();
  } else {
    clear_has_framework_info();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetFrameworks.Framework.framework_info)
}

// required bool active = 2;
inline bool Response_GetFrameworks_Framework::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response_GetFrameworks_Framework::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response_GetFrameworks_Framework::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response_GetFrameworks_Framework::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool Response_GetFrameworks_Framework::active() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFrameworks.Framework.active)
  return active_;
}
inline void Response_GetFrameworks_Framework::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:mesos.master_p.Response.GetFrameworks.Framework.active)
}

// required bool connected = 3;
inline bool Response_GetFrameworks_Framework::has_connected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response_GetFrameworks_Framework::set_has_connected() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response_GetFrameworks_Framework::clear_has_connected() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response_GetFrameworks_Framework::clear_connected() {
  connected_ = false;
  clear_has_connected();
}
inline bool Response_GetFrameworks_Framework::connected() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFrameworks.Framework.connected)
  return connected_;
}
inline void Response_GetFrameworks_Framework::set_connected(bool value) {
  set_has_connected();
  connected_ = value;
  // @@protoc_insertion_point(field_set:mesos.master_p.Response.GetFrameworks.Framework.connected)
}

// required bool recovered = 11;
inline bool Response_GetFrameworks_Framework::has_recovered() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response_GetFrameworks_Framework::set_has_recovered() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response_GetFrameworks_Framework::clear_has_recovered() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response_GetFrameworks_Framework::clear_recovered() {
  recovered_ = false;
  clear_has_recovered();
}
inline bool Response_GetFrameworks_Framework::recovered() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFrameworks.Framework.recovered)
  return recovered_;
}
inline void Response_GetFrameworks_Framework::set_recovered(bool value) {
  set_has_recovered();
  recovered_ = value;
  // @@protoc_insertion_point(field_set:mesos.master_p.Response.GetFrameworks.Framework.recovered)
}

// optional .mesos.TimeInfo registered_time = 4;
inline bool Response_GetFrameworks_Framework::has_registered_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response_GetFrameworks_Framework::set_has_registered_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response_GetFrameworks_Framework::clear_has_registered_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response_GetFrameworks_Framework::clear_registered_time() {
  if (registered_time_ != NULL) registered_time_->::mesos::TimeInfo::Clear();
  clear_has_registered_time();
}
inline const ::mesos::TimeInfo& Response_GetFrameworks_Framework::registered_time() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFrameworks.Framework.registered_time)
  return registered_time_ != NULL ? *registered_time_ : *default_instance_->registered_time_;
}
inline ::mesos::TimeInfo* Response_GetFrameworks_Framework::mutable_registered_time() {
  set_has_registered_time();
  if (registered_time_ == NULL) registered_time_ = new ::mesos::TimeInfo;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetFrameworks.Framework.registered_time)
  return registered_time_;
}
inline ::mesos::TimeInfo* Response_GetFrameworks_Framework::release_registered_time() {
  clear_has_registered_time();
  ::mesos::TimeInfo* temp = registered_time_;
  registered_time_ = NULL;
  return temp;
}
inline void Response_GetFrameworks_Framework::set_allocated_registered_time(::mesos::TimeInfo* registered_time) {
  delete registered_time_;
  registered_time_ = registered_time;
  if (registered_time) {
    set_has_registered_time();
  } else {
    clear_has_registered_time();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetFrameworks.Framework.registered_time)
}

// optional .mesos.TimeInfo reregistered_time = 5;
inline bool Response_GetFrameworks_Framework::has_reregistered_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Response_GetFrameworks_Framework::set_has_reregistered_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Response_GetFrameworks_Framework::clear_has_reregistered_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Response_GetFrameworks_Framework::clear_reregistered_time() {
  if (reregistered_time_ != NULL) reregistered_time_->::mesos::TimeInfo::Clear();
  clear_has_reregistered_time();
}
inline const ::mesos::TimeInfo& Response_GetFrameworks_Framework::reregistered_time() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFrameworks.Framework.reregistered_time)
  return reregistered_time_ != NULL ? *reregistered_time_ : *default_instance_->reregistered_time_;
}
inline ::mesos::TimeInfo* Response_GetFrameworks_Framework::mutable_reregistered_time() {
  set_has_reregistered_time();
  if (reregistered_time_ == NULL) reregistered_time_ = new ::mesos::TimeInfo;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetFrameworks.Framework.reregistered_time)
  return reregistered_time_;
}
inline ::mesos::TimeInfo* Response_GetFrameworks_Framework::release_reregistered_time() {
  clear_has_reregistered_time();
  ::mesos::TimeInfo* temp = reregistered_time_;
  reregistered_time_ = NULL;
  return temp;
}
inline void Response_GetFrameworks_Framework::set_allocated_reregistered_time(::mesos::TimeInfo* reregistered_time) {
  delete reregistered_time_;
  reregistered_time_ = reregistered_time;
  if (reregistered_time) {
    set_has_reregistered_time();
  } else {
    clear_has_reregistered_time();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetFrameworks.Framework.reregistered_time)
}

// optional .mesos.TimeInfo unregistered_time = 6;
inline bool Response_GetFrameworks_Framework::has_unregistered_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Response_GetFrameworks_Framework::set_has_unregistered_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Response_GetFrameworks_Framework::clear_has_unregistered_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Response_GetFrameworks_Framework::clear_unregistered_time() {
  if (unregistered_time_ != NULL) unregistered_time_->::mesos::TimeInfo::Clear();
  clear_has_unregistered_time();
}
inline const ::mesos::TimeInfo& Response_GetFrameworks_Framework::unregistered_time() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFrameworks.Framework.unregistered_time)
  return unregistered_time_ != NULL ? *unregistered_time_ : *default_instance_->unregistered_time_;
}
inline ::mesos::TimeInfo* Response_GetFrameworks_Framework::mutable_unregistered_time() {
  set_has_unregistered_time();
  if (unregistered_time_ == NULL) unregistered_time_ = new ::mesos::TimeInfo;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetFrameworks.Framework.unregistered_time)
  return unregistered_time_;
}
inline ::mesos::TimeInfo* Response_GetFrameworks_Framework::release_unregistered_time() {
  clear_has_unregistered_time();
  ::mesos::TimeInfo* temp = unregistered_time_;
  unregistered_time_ = NULL;
  return temp;
}
inline void Response_GetFrameworks_Framework::set_allocated_unregistered_time(::mesos::TimeInfo* unregistered_time) {
  delete unregistered_time_;
  unregistered_time_ = unregistered_time;
  if (unregistered_time) {
    set_has_unregistered_time();
  } else {
    clear_has_unregistered_time();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetFrameworks.Framework.unregistered_time)
}

// repeated .mesos.Offer offers = 7;
inline int Response_GetFrameworks_Framework::offers_size() const {
  return offers_.size();
}
inline void Response_GetFrameworks_Framework::clear_offers() {
  offers_.Clear();
}
inline const ::mesos::Offer& Response_GetFrameworks_Framework::offers(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFrameworks.Framework.offers)
  return offers_.Get(index);
}
inline ::mesos::Offer* Response_GetFrameworks_Framework::mutable_offers(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetFrameworks.Framework.offers)
  return offers_.Mutable(index);
}
inline ::mesos::Offer* Response_GetFrameworks_Framework::add_offers() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetFrameworks.Framework.offers)
  return offers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Offer >&
Response_GetFrameworks_Framework::offers() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetFrameworks.Framework.offers)
  return offers_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Offer >*
Response_GetFrameworks_Framework::mutable_offers() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetFrameworks.Framework.offers)
  return &offers_;
}

// repeated .mesos.InverseOffer inverse_offers = 8;
inline int Response_GetFrameworks_Framework::inverse_offers_size() const {
  return inverse_offers_.size();
}
inline void Response_GetFrameworks_Framework::clear_inverse_offers() {
  inverse_offers_.Clear();
}
inline const ::mesos::InverseOffer& Response_GetFrameworks_Framework::inverse_offers(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFrameworks.Framework.inverse_offers)
  return inverse_offers_.Get(index);
}
inline ::mesos::InverseOffer* Response_GetFrameworks_Framework::mutable_inverse_offers(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetFrameworks.Framework.inverse_offers)
  return inverse_offers_.Mutable(index);
}
inline ::mesos::InverseOffer* Response_GetFrameworks_Framework::add_inverse_offers() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetFrameworks.Framework.inverse_offers)
  return inverse_offers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::InverseOffer >&
Response_GetFrameworks_Framework::inverse_offers() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetFrameworks.Framework.inverse_offers)
  return inverse_offers_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::InverseOffer >*
Response_GetFrameworks_Framework::mutable_inverse_offers() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetFrameworks.Framework.inverse_offers)
  return &inverse_offers_;
}

// repeated .mesos.Resource allocated_resources = 9;
inline int Response_GetFrameworks_Framework::allocated_resources_size() const {
  return allocated_resources_.size();
}
inline void Response_GetFrameworks_Framework::clear_allocated_resources() {
  allocated_resources_.Clear();
}
inline const ::mesos::Resource& Response_GetFrameworks_Framework::allocated_resources(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFrameworks.Framework.allocated_resources)
  return allocated_resources_.Get(index);
}
inline ::mesos::Resource* Response_GetFrameworks_Framework::mutable_allocated_resources(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetFrameworks.Framework.allocated_resources)
  return allocated_resources_.Mutable(index);
}
inline ::mesos::Resource* Response_GetFrameworks_Framework::add_allocated_resources() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetFrameworks.Framework.allocated_resources)
  return allocated_resources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
Response_GetFrameworks_Framework::allocated_resources() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetFrameworks.Framework.allocated_resources)
  return allocated_resources_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
Response_GetFrameworks_Framework::mutable_allocated_resources() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetFrameworks.Framework.allocated_resources)
  return &allocated_resources_;
}

// repeated .mesos.Resource offered_resources = 10;
inline int Response_GetFrameworks_Framework::offered_resources_size() const {
  return offered_resources_.size();
}
inline void Response_GetFrameworks_Framework::clear_offered_resources() {
  offered_resources_.Clear();
}
inline const ::mesos::Resource& Response_GetFrameworks_Framework::offered_resources(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFrameworks.Framework.offered_resources)
  return offered_resources_.Get(index);
}
inline ::mesos::Resource* Response_GetFrameworks_Framework::mutable_offered_resources(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetFrameworks.Framework.offered_resources)
  return offered_resources_.Mutable(index);
}
inline ::mesos::Resource* Response_GetFrameworks_Framework::add_offered_resources() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetFrameworks.Framework.offered_resources)
  return offered_resources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Resource >&
Response_GetFrameworks_Framework::offered_resources() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetFrameworks.Framework.offered_resources)
  return offered_resources_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Resource >*
Response_GetFrameworks_Framework::mutable_offered_resources() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetFrameworks.Framework.offered_resources)
  return &offered_resources_;
}

// -------------------------------------------------------------------

// Response_GetFrameworks

// repeated .mesos.master_p.Response.GetFrameworks.Framework frameworks = 1;
inline int Response_GetFrameworks::frameworks_size() const {
  return frameworks_.size();
}
inline void Response_GetFrameworks::clear_frameworks() {
  frameworks_.Clear();
}
inline const ::mesos::master_p::Response_GetFrameworks_Framework& Response_GetFrameworks::frameworks(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFrameworks.frameworks)
  return frameworks_.Get(index);
}
inline ::mesos::master_p::Response_GetFrameworks_Framework* Response_GetFrameworks::mutable_frameworks(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetFrameworks.frameworks)
  return frameworks_.Mutable(index);
}
inline ::mesos::master_p::Response_GetFrameworks_Framework* Response_GetFrameworks::add_frameworks() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetFrameworks.frameworks)
  return frameworks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetFrameworks_Framework >&
Response_GetFrameworks::frameworks() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetFrameworks.frameworks)
  return frameworks_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetFrameworks_Framework >*
Response_GetFrameworks::mutable_frameworks() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetFrameworks.frameworks)
  return &frameworks_;
}

// repeated .mesos.master_p.Response.GetFrameworks.Framework completed_frameworks = 2;
inline int Response_GetFrameworks::completed_frameworks_size() const {
  return completed_frameworks_.size();
}
inline void Response_GetFrameworks::clear_completed_frameworks() {
  completed_frameworks_.Clear();
}
inline const ::mesos::master_p::Response_GetFrameworks_Framework& Response_GetFrameworks::completed_frameworks(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFrameworks.completed_frameworks)
  return completed_frameworks_.Get(index);
}
inline ::mesos::master_p::Response_GetFrameworks_Framework* Response_GetFrameworks::mutable_completed_frameworks(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetFrameworks.completed_frameworks)
  return completed_frameworks_.Mutable(index);
}
inline ::mesos::master_p::Response_GetFrameworks_Framework* Response_GetFrameworks::add_completed_frameworks() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetFrameworks.completed_frameworks)
  return completed_frameworks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetFrameworks_Framework >&
Response_GetFrameworks::completed_frameworks() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetFrameworks.completed_frameworks)
  return completed_frameworks_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetFrameworks_Framework >*
Response_GetFrameworks::mutable_completed_frameworks() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetFrameworks.completed_frameworks)
  return &completed_frameworks_;
}

// repeated .mesos.FrameworkInfo recovered_frameworks = 3;
inline int Response_GetFrameworks::recovered_frameworks_size() const {
  return recovered_frameworks_.size();
}
inline void Response_GetFrameworks::clear_recovered_frameworks() {
  recovered_frameworks_.Clear();
}
inline const ::mesos::FrameworkInfo& Response_GetFrameworks::recovered_frameworks(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetFrameworks.recovered_frameworks)
  return recovered_frameworks_.Get(index);
}
inline ::mesos::FrameworkInfo* Response_GetFrameworks::mutable_recovered_frameworks(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetFrameworks.recovered_frameworks)
  return recovered_frameworks_.Mutable(index);
}
inline ::mesos::FrameworkInfo* Response_GetFrameworks::add_recovered_frameworks() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetFrameworks.recovered_frameworks)
  return recovered_frameworks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::FrameworkInfo >&
Response_GetFrameworks::recovered_frameworks() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetFrameworks.recovered_frameworks)
  return recovered_frameworks_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::FrameworkInfo >*
Response_GetFrameworks::mutable_recovered_frameworks() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetFrameworks.recovered_frameworks)
  return &recovered_frameworks_;
}

// -------------------------------------------------------------------

// Response_GetExecutors_Executor

// required .mesos.ExecutorInfo executor_info = 1;
inline bool Response_GetExecutors_Executor::has_executor_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_GetExecutors_Executor::set_has_executor_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_GetExecutors_Executor::clear_has_executor_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_GetExecutors_Executor::clear_executor_info() {
  if (executor_info_ != NULL) executor_info_->::mesos::ExecutorInfo::Clear();
  clear_has_executor_info();
}
inline const ::mesos::ExecutorInfo& Response_GetExecutors_Executor::executor_info() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetExecutors.Executor.executor_info)
  return executor_info_ != NULL ? *executor_info_ : *default_instance_->executor_info_;
}
inline ::mesos::ExecutorInfo* Response_GetExecutors_Executor::mutable_executor_info() {
  set_has_executor_info();
  if (executor_info_ == NULL) executor_info_ = new ::mesos::ExecutorInfo;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetExecutors.Executor.executor_info)
  return executor_info_;
}
inline ::mesos::ExecutorInfo* Response_GetExecutors_Executor::release_executor_info() {
  clear_has_executor_info();
  ::mesos::ExecutorInfo* temp = executor_info_;
  executor_info_ = NULL;
  return temp;
}
inline void Response_GetExecutors_Executor::set_allocated_executor_info(::mesos::ExecutorInfo* executor_info) {
  delete executor_info_;
  executor_info_ = executor_info;
  if (executor_info) {
    set_has_executor_info();
  } else {
    clear_has_executor_info();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetExecutors.Executor.executor_info)
}

// required .mesos.SlaveID slave_id = 2;
inline bool Response_GetExecutors_Executor::has_slave_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response_GetExecutors_Executor::set_has_slave_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response_GetExecutors_Executor::clear_has_slave_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response_GetExecutors_Executor::clear_slave_id() {
  if (slave_id_ != NULL) slave_id_->::mesos::SlaveID::Clear();
  clear_has_slave_id();
}
inline const ::mesos::SlaveID& Response_GetExecutors_Executor::slave_id() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetExecutors.Executor.slave_id)
  return slave_id_ != NULL ? *slave_id_ : *default_instance_->slave_id_;
}
inline ::mesos::SlaveID* Response_GetExecutors_Executor::mutable_slave_id() {
  set_has_slave_id();
  if (slave_id_ == NULL) slave_id_ = new ::mesos::SlaveID;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetExecutors.Executor.slave_id)
  return slave_id_;
}
inline ::mesos::SlaveID* Response_GetExecutors_Executor::release_slave_id() {
  clear_has_slave_id();
  ::mesos::SlaveID* temp = slave_id_;
  slave_id_ = NULL;
  return temp;
}
inline void Response_GetExecutors_Executor::set_allocated_slave_id(::mesos::SlaveID* slave_id) {
  delete slave_id_;
  slave_id_ = slave_id;
  if (slave_id) {
    set_has_slave_id();
  } else {
    clear_has_slave_id();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetExecutors.Executor.slave_id)
}

// -------------------------------------------------------------------

// Response_GetExecutors

// repeated .mesos.master_p.Response.GetExecutors.Executor executors = 1;
inline int Response_GetExecutors::executors_size() const {
  return executors_.size();
}
inline void Response_GetExecutors::clear_executors() {
  executors_.Clear();
}
inline const ::mesos::master_p::Response_GetExecutors_Executor& Response_GetExecutors::executors(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetExecutors.executors)
  return executors_.Get(index);
}
inline ::mesos::master_p::Response_GetExecutors_Executor* Response_GetExecutors::mutable_executors(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetExecutors.executors)
  return executors_.Mutable(index);
}
inline ::mesos::master_p::Response_GetExecutors_Executor* Response_GetExecutors::add_executors() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetExecutors.executors)
  return executors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetExecutors_Executor >&
Response_GetExecutors::executors() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetExecutors.executors)
  return executors_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetExecutors_Executor >*
Response_GetExecutors::mutable_executors() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetExecutors.executors)
  return &executors_;
}

// repeated .mesos.master_p.Response.GetExecutors.Executor orphan_executors = 2;
inline int Response_GetExecutors::orphan_executors_size() const {
  return orphan_executors_.size();
}
inline void Response_GetExecutors::clear_orphan_executors() {
  orphan_executors_.Clear();
}
inline const ::mesos::master_p::Response_GetExecutors_Executor& Response_GetExecutors::orphan_executors(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetExecutors.orphan_executors)
  return orphan_executors_.Get(index);
}
inline ::mesos::master_p::Response_GetExecutors_Executor* Response_GetExecutors::mutable_orphan_executors(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetExecutors.orphan_executors)
  return orphan_executors_.Mutable(index);
}
inline ::mesos::master_p::Response_GetExecutors_Executor* Response_GetExecutors::add_orphan_executors() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetExecutors.orphan_executors)
  return orphan_executors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetExecutors_Executor >&
Response_GetExecutors::orphan_executors() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetExecutors.orphan_executors)
  return orphan_executors_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::master_p::Response_GetExecutors_Executor >*
Response_GetExecutors::mutable_orphan_executors() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetExecutors.orphan_executors)
  return &orphan_executors_;
}

// -------------------------------------------------------------------

// Response_GetTasks

// repeated .mesos.Task pending_tasks = 1;
inline int Response_GetTasks::pending_tasks_size() const {
  return pending_tasks_.size();
}
inline void Response_GetTasks::clear_pending_tasks() {
  pending_tasks_.Clear();
}
inline const ::mesos::Task& Response_GetTasks::pending_tasks(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetTasks.pending_tasks)
  return pending_tasks_.Get(index);
}
inline ::mesos::Task* Response_GetTasks::mutable_pending_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetTasks.pending_tasks)
  return pending_tasks_.Mutable(index);
}
inline ::mesos::Task* Response_GetTasks::add_pending_tasks() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetTasks.pending_tasks)
  return pending_tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Task >&
Response_GetTasks::pending_tasks() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetTasks.pending_tasks)
  return pending_tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Task >*
Response_GetTasks::mutable_pending_tasks() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetTasks.pending_tasks)
  return &pending_tasks_;
}

// repeated .mesos.Task tasks = 2;
inline int Response_GetTasks::tasks_size() const {
  return tasks_.size();
}
inline void Response_GetTasks::clear_tasks() {
  tasks_.Clear();
}
inline const ::mesos::Task& Response_GetTasks::tasks(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetTasks.tasks)
  return tasks_.Get(index);
}
inline ::mesos::Task* Response_GetTasks::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetTasks.tasks)
  return tasks_.Mutable(index);
}
inline ::mesos::Task* Response_GetTasks::add_tasks() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetTasks.tasks)
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Task >&
Response_GetTasks::tasks() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetTasks.tasks)
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Task >*
Response_GetTasks::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetTasks.tasks)
  return &tasks_;
}

// repeated .mesos.Task unreachable_tasks = 5;
inline int Response_GetTasks::unreachable_tasks_size() const {
  return unreachable_tasks_.size();
}
inline void Response_GetTasks::clear_unreachable_tasks() {
  unreachable_tasks_.Clear();
}
inline const ::mesos::Task& Response_GetTasks::unreachable_tasks(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetTasks.unreachable_tasks)
  return unreachable_tasks_.Get(index);
}
inline ::mesos::Task* Response_GetTasks::mutable_unreachable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetTasks.unreachable_tasks)
  return unreachable_tasks_.Mutable(index);
}
inline ::mesos::Task* Response_GetTasks::add_unreachable_tasks() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetTasks.unreachable_tasks)
  return unreachable_tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Task >&
Response_GetTasks::unreachable_tasks() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetTasks.unreachable_tasks)
  return unreachable_tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Task >*
Response_GetTasks::mutable_unreachable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetTasks.unreachable_tasks)
  return &unreachable_tasks_;
}

// repeated .mesos.Task completed_tasks = 3;
inline int Response_GetTasks::completed_tasks_size() const {
  return completed_tasks_.size();
}
inline void Response_GetTasks::clear_completed_tasks() {
  completed_tasks_.Clear();
}
inline const ::mesos::Task& Response_GetTasks::completed_tasks(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetTasks.completed_tasks)
  return completed_tasks_.Get(index);
}
inline ::mesos::Task* Response_GetTasks::mutable_completed_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetTasks.completed_tasks)
  return completed_tasks_.Mutable(index);
}
inline ::mesos::Task* Response_GetTasks::add_completed_tasks() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetTasks.completed_tasks)
  return completed_tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Task >&
Response_GetTasks::completed_tasks() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetTasks.completed_tasks)
  return completed_tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Task >*
Response_GetTasks::mutable_completed_tasks() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetTasks.completed_tasks)
  return &completed_tasks_;
}

// repeated .mesos.Task orphan_tasks = 4;
inline int Response_GetTasks::orphan_tasks_size() const {
  return orphan_tasks_.size();
}
inline void Response_GetTasks::clear_orphan_tasks() {
  orphan_tasks_.Clear();
}
inline const ::mesos::Task& Response_GetTasks::orphan_tasks(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetTasks.orphan_tasks)
  return orphan_tasks_.Get(index);
}
inline ::mesos::Task* Response_GetTasks::mutable_orphan_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetTasks.orphan_tasks)
  return orphan_tasks_.Mutable(index);
}
inline ::mesos::Task* Response_GetTasks::add_orphan_tasks() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetTasks.orphan_tasks)
  return orphan_tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Task >&
Response_GetTasks::orphan_tasks() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetTasks.orphan_tasks)
  return orphan_tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Task >*
Response_GetTasks::mutable_orphan_tasks() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetTasks.orphan_tasks)
  return &orphan_tasks_;
}

// -------------------------------------------------------------------

// Response_GetRoles

// repeated .mesos.Role roles = 1;
inline int Response_GetRoles::roles_size() const {
  return roles_.size();
}
inline void Response_GetRoles::clear_roles() {
  roles_.Clear();
}
inline const ::mesos::Role& Response_GetRoles::roles(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetRoles.roles)
  return roles_.Get(index);
}
inline ::mesos::Role* Response_GetRoles::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetRoles.roles)
  return roles_.Mutable(index);
}
inline ::mesos::Role* Response_GetRoles::add_roles() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetRoles.roles)
  return roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::Role >&
Response_GetRoles::roles() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetRoles.roles)
  return roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::Role >*
Response_GetRoles::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetRoles.roles)
  return &roles_;
}

// -------------------------------------------------------------------

// Response_GetWeights

// repeated .mesos.WeightInfo weight_infos = 1;
inline int Response_GetWeights::weight_infos_size() const {
  return weight_infos_.size();
}
inline void Response_GetWeights::clear_weight_infos() {
  weight_infos_.Clear();
}
inline const ::mesos::WeightInfo& Response_GetWeights::weight_infos(int index) const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetWeights.weight_infos)
  return weight_infos_.Get(index);
}
inline ::mesos::WeightInfo* Response_GetWeights::mutable_weight_infos(int index) {
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetWeights.weight_infos)
  return weight_infos_.Mutable(index);
}
inline ::mesos::WeightInfo* Response_GetWeights::add_weight_infos() {
  // @@protoc_insertion_point(field_add:mesos.master_p.Response.GetWeights.weight_infos)
  return weight_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mesos::WeightInfo >&
Response_GetWeights::weight_infos() const {
  // @@protoc_insertion_point(field_list:mesos.master_p.Response.GetWeights.weight_infos)
  return weight_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::mesos::WeightInfo >*
Response_GetWeights::mutable_weight_infos() {
  // @@protoc_insertion_point(field_mutable_list:mesos.master_p.Response.GetWeights.weight_infos)
  return &weight_infos_;
}

// -------------------------------------------------------------------

// Response_GetMaster

// optional .mesos.MasterInfo master_info = 1;
inline bool Response_GetMaster::has_master_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_GetMaster::set_has_master_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_GetMaster::clear_has_master_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_GetMaster::clear_master_info() {
  if (master_info_ != NULL) master_info_->::mesos::MasterInfo::Clear();
  clear_has_master_info();
}
inline const ::mesos::MasterInfo& Response_GetMaster::master_info() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetMaster.master_info)
  return master_info_ != NULL ? *master_info_ : *default_instance_->master_info_;
}
inline ::mesos::MasterInfo* Response_GetMaster::mutable_master_info() {
  set_has_master_info();
  if (master_info_ == NULL) master_info_ = new ::mesos::MasterInfo;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetMaster.master_info)
  return master_info_;
}
inline ::mesos::MasterInfo* Response_GetMaster::release_master_info() {
  clear_has_master_info();
  ::mesos::MasterInfo* temp = master_info_;
  master_info_ = NULL;
  return temp;
}
inline void Response_GetMaster::set_allocated_master_info(::mesos::MasterInfo* master_info) {
  delete master_info_;
  master_info_ = master_info;
  if (master_info) {
    set_has_master_info();
  } else {
    clear_has_master_info();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetMaster.master_info)
}

// -------------------------------------------------------------------

// Response_GetMaintenanceStatus

// required .mesos.maintenance.ClusterStatus status = 1;
inline bool Response_GetMaintenanceStatus::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_GetMaintenanceStatus::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_GetMaintenanceStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_GetMaintenanceStatus::clear_status() {
  if (status_ != NULL) status_->::mesos::maintenance::ClusterStatus::Clear();
  clear_has_status();
}
inline const ::mesos::maintenance::ClusterStatus& Response_GetMaintenanceStatus::status() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetMaintenanceStatus.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::mesos::maintenance::ClusterStatus* Response_GetMaintenanceStatus::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::mesos::maintenance::ClusterStatus;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetMaintenanceStatus.status)
  return status_;
}
inline ::mesos::maintenance::ClusterStatus* Response_GetMaintenanceStatus::release_status() {
  clear_has_status();
  ::mesos::maintenance::ClusterStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void Response_GetMaintenanceStatus::set_allocated_status(::mesos::maintenance::ClusterStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetMaintenanceStatus.status)
}

// -------------------------------------------------------------------

// Response_GetMaintenanceSchedule

// required .mesos.maintenance.Schedule schedule = 1;
inline bool Response_GetMaintenanceSchedule::has_schedule() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_GetMaintenanceSchedule::set_has_schedule() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_GetMaintenanceSchedule::clear_has_schedule() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_GetMaintenanceSchedule::clear_schedule() {
  if (schedule_ != NULL) schedule_->::mesos::maintenance::Schedule::Clear();
  clear_has_schedule();
}
inline const ::mesos::maintenance::Schedule& Response_GetMaintenanceSchedule::schedule() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetMaintenanceSchedule.schedule)
  return schedule_ != NULL ? *schedule_ : *default_instance_->schedule_;
}
inline ::mesos::maintenance::Schedule* Response_GetMaintenanceSchedule::mutable_schedule() {
  set_has_schedule();
  if (schedule_ == NULL) schedule_ = new ::mesos::maintenance::Schedule;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetMaintenanceSchedule.schedule)
  return schedule_;
}
inline ::mesos::maintenance::Schedule* Response_GetMaintenanceSchedule::release_schedule() {
  clear_has_schedule();
  ::mesos::maintenance::Schedule* temp = schedule_;
  schedule_ = NULL;
  return temp;
}
inline void Response_GetMaintenanceSchedule::set_allocated_schedule(::mesos::maintenance::Schedule* schedule) {
  delete schedule_;
  schedule_ = schedule;
  if (schedule) {
    set_has_schedule();
  } else {
    clear_has_schedule();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetMaintenanceSchedule.schedule)
}

// -------------------------------------------------------------------

// Response_GetQuota

// required .mesos.quota.QuotaStatus status = 1;
inline bool Response_GetQuota::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_GetQuota::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_GetQuota::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_GetQuota::clear_status() {
  if (status_ != NULL) status_->::mesos::quota::QuotaStatus::Clear();
  clear_has_status();
}
inline const ::mesos::quota::QuotaStatus& Response_GetQuota::status() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.GetQuota.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::mesos::quota::QuotaStatus* Response_GetQuota::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::mesos::quota::QuotaStatus;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.GetQuota.status)
  return status_;
}
inline ::mesos::quota::QuotaStatus* Response_GetQuota::release_status() {
  clear_has_status();
  ::mesos::quota::QuotaStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void Response_GetQuota::set_allocated_status(::mesos::quota::QuotaStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.GetQuota.status)
}

// -------------------------------------------------------------------

// Response

// optional .mesos.master_p.Response.Type type = 1;
inline bool Response::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::mesos::master_p::Response_Type Response::type() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.type)
  return static_cast< ::mesos::master_p::Response_Type >(type_);
}
inline void Response::set_type(::mesos::master_p::Response_Type value) {
  assert(::mesos::master_p::Response_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mesos.master_p.Response.type)
}

// optional .mesos.master_p.Response.GetHealth get_health = 2;
inline bool Response::has_get_health() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_get_health() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_get_health() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_get_health() {
  if (get_health_ != NULL) get_health_->::mesos::master_p::Response_GetHealth::Clear();
  clear_has_get_health();
}
inline const ::mesos::master_p::Response_GetHealth& Response::get_health() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_health)
  return get_health_ != NULL ? *get_health_ : *default_instance_->get_health_;
}
inline ::mesos::master_p::Response_GetHealth* Response::mutable_get_health() {
  set_has_get_health();
  if (get_health_ == NULL) get_health_ = new ::mesos::master_p::Response_GetHealth;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_health)
  return get_health_;
}
inline ::mesos::master_p::Response_GetHealth* Response::release_get_health() {
  clear_has_get_health();
  ::mesos::master_p::Response_GetHealth* temp = get_health_;
  get_health_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_health(::mesos::master_p::Response_GetHealth* get_health) {
  delete get_health_;
  get_health_ = get_health;
  if (get_health) {
    set_has_get_health();
  } else {
    clear_has_get_health();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_health)
}

// optional .mesos.master_p.Response.GetFlags get_flags = 3;
inline bool Response::has_get_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_get_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_get_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_get_flags() {
  if (get_flags_ != NULL) get_flags_->::mesos::master_p::Response_GetFlags::Clear();
  clear_has_get_flags();
}
inline const ::mesos::master_p::Response_GetFlags& Response::get_flags() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_flags)
  return get_flags_ != NULL ? *get_flags_ : *default_instance_->get_flags_;
}
inline ::mesos::master_p::Response_GetFlags* Response::mutable_get_flags() {
  set_has_get_flags();
  if (get_flags_ == NULL) get_flags_ = new ::mesos::master_p::Response_GetFlags;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_flags)
  return get_flags_;
}
inline ::mesos::master_p::Response_GetFlags* Response::release_get_flags() {
  clear_has_get_flags();
  ::mesos::master_p::Response_GetFlags* temp = get_flags_;
  get_flags_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_flags(::mesos::master_p::Response_GetFlags* get_flags) {
  delete get_flags_;
  get_flags_ = get_flags;
  if (get_flags) {
    set_has_get_flags();
  } else {
    clear_has_get_flags();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_flags)
}

// optional .mesos.master_p.Response.GetVersion get_version = 4;
inline bool Response::has_get_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_get_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_get_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_get_version() {
  if (get_version_ != NULL) get_version_->::mesos::master_p::Response_GetVersion::Clear();
  clear_has_get_version();
}
inline const ::mesos::master_p::Response_GetVersion& Response::get_version() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_version)
  return get_version_ != NULL ? *get_version_ : *default_instance_->get_version_;
}
inline ::mesos::master_p::Response_GetVersion* Response::mutable_get_version() {
  set_has_get_version();
  if (get_version_ == NULL) get_version_ = new ::mesos::master_p::Response_GetVersion;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_version)
  return get_version_;
}
inline ::mesos::master_p::Response_GetVersion* Response::release_get_version() {
  clear_has_get_version();
  ::mesos::master_p::Response_GetVersion* temp = get_version_;
  get_version_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_version(::mesos::master_p::Response_GetVersion* get_version) {
  delete get_version_;
  get_version_ = get_version;
  if (get_version) {
    set_has_get_version();
  } else {
    clear_has_get_version();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_version)
}

// optional .mesos.master_p.Response.GetMetrics get_metrics = 5;
inline bool Response::has_get_metrics() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::set_has_get_metrics() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response::clear_has_get_metrics() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response::clear_get_metrics() {
  if (get_metrics_ != NULL) get_metrics_->::mesos::master_p::Response_GetMetrics::Clear();
  clear_has_get_metrics();
}
inline const ::mesos::master_p::Response_GetMetrics& Response::get_metrics() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_metrics)
  return get_metrics_ != NULL ? *get_metrics_ : *default_instance_->get_metrics_;
}
inline ::mesos::master_p::Response_GetMetrics* Response::mutable_get_metrics() {
  set_has_get_metrics();
  if (get_metrics_ == NULL) get_metrics_ = new ::mesos::master_p::Response_GetMetrics;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_metrics)
  return get_metrics_;
}
inline ::mesos::master_p::Response_GetMetrics* Response::release_get_metrics() {
  clear_has_get_metrics();
  ::mesos::master_p::Response_GetMetrics* temp = get_metrics_;
  get_metrics_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_metrics(::mesos::master_p::Response_GetMetrics* get_metrics) {
  delete get_metrics_;
  get_metrics_ = get_metrics;
  if (get_metrics) {
    set_has_get_metrics();
  } else {
    clear_has_get_metrics();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_metrics)
}

// optional .mesos.master_p.Response.GetLoggingLevel get_logging_level = 6;
inline bool Response::has_get_logging_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Response::set_has_get_logging_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Response::clear_has_get_logging_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Response::clear_get_logging_level() {
  if (get_logging_level_ != NULL) get_logging_level_->::mesos::master_p::Response_GetLoggingLevel::Clear();
  clear_has_get_logging_level();
}
inline const ::mesos::master_p::Response_GetLoggingLevel& Response::get_logging_level() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_logging_level)
  return get_logging_level_ != NULL ? *get_logging_level_ : *default_instance_->get_logging_level_;
}
inline ::mesos::master_p::Response_GetLoggingLevel* Response::mutable_get_logging_level() {
  set_has_get_logging_level();
  if (get_logging_level_ == NULL) get_logging_level_ = new ::mesos::master_p::Response_GetLoggingLevel;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_logging_level)
  return get_logging_level_;
}
inline ::mesos::master_p::Response_GetLoggingLevel* Response::release_get_logging_level() {
  clear_has_get_logging_level();
  ::mesos::master_p::Response_GetLoggingLevel* temp = get_logging_level_;
  get_logging_level_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_logging_level(::mesos::master_p::Response_GetLoggingLevel* get_logging_level) {
  delete get_logging_level_;
  get_logging_level_ = get_logging_level;
  if (get_logging_level) {
    set_has_get_logging_level();
  } else {
    clear_has_get_logging_level();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_logging_level)
}

// optional .mesos.master_p.Response.ListFiles list_files = 7;
inline bool Response::has_list_files() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Response::set_has_list_files() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Response::clear_has_list_files() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Response::clear_list_files() {
  if (list_files_ != NULL) list_files_->::mesos::master_p::Response_ListFiles::Clear();
  clear_has_list_files();
}
inline const ::mesos::master_p::Response_ListFiles& Response::list_files() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.list_files)
  return list_files_ != NULL ? *list_files_ : *default_instance_->list_files_;
}
inline ::mesos::master_p::Response_ListFiles* Response::mutable_list_files() {
  set_has_list_files();
  if (list_files_ == NULL) list_files_ = new ::mesos::master_p::Response_ListFiles;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.list_files)
  return list_files_;
}
inline ::mesos::master_p::Response_ListFiles* Response::release_list_files() {
  clear_has_list_files();
  ::mesos::master_p::Response_ListFiles* temp = list_files_;
  list_files_ = NULL;
  return temp;
}
inline void Response::set_allocated_list_files(::mesos::master_p::Response_ListFiles* list_files) {
  delete list_files_;
  list_files_ = list_files;
  if (list_files) {
    set_has_list_files();
  } else {
    clear_has_list_files();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.list_files)
}

// optional .mesos.master_p.Response.ReadFile read_file = 8;
inline bool Response::has_read_file() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Response::set_has_read_file() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Response::clear_has_read_file() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Response::clear_read_file() {
  if (read_file_ != NULL) read_file_->::mesos::master_p::Response_ReadFile::Clear();
  clear_has_read_file();
}
inline const ::mesos::master_p::Response_ReadFile& Response::read_file() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.read_file)
  return read_file_ != NULL ? *read_file_ : *default_instance_->read_file_;
}
inline ::mesos::master_p::Response_ReadFile* Response::mutable_read_file() {
  set_has_read_file();
  if (read_file_ == NULL) read_file_ = new ::mesos::master_p::Response_ReadFile;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.read_file)
  return read_file_;
}
inline ::mesos::master_p::Response_ReadFile* Response::release_read_file() {
  clear_has_read_file();
  ::mesos::master_p::Response_ReadFile* temp = read_file_;
  read_file_ = NULL;
  return temp;
}
inline void Response::set_allocated_read_file(::mesos::master_p::Response_ReadFile* read_file) {
  delete read_file_;
  read_file_ = read_file;
  if (read_file) {
    set_has_read_file();
  } else {
    clear_has_read_file();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.read_file)
}

// optional .mesos.master_p.Response.GetState get_state = 9;
inline bool Response::has_get_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Response::set_has_get_state() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Response::clear_has_get_state() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Response::clear_get_state() {
  if (get_state_ != NULL) get_state_->::mesos::master_p::Response_GetState::Clear();
  clear_has_get_state();
}
inline const ::mesos::master_p::Response_GetState& Response::get_state() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_state)
  return get_state_ != NULL ? *get_state_ : *default_instance_->get_state_;
}
inline ::mesos::master_p::Response_GetState* Response::mutable_get_state() {
  set_has_get_state();
  if (get_state_ == NULL) get_state_ = new ::mesos::master_p::Response_GetState;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_state)
  return get_state_;
}
inline ::mesos::master_p::Response_GetState* Response::release_get_state() {
  clear_has_get_state();
  ::mesos::master_p::Response_GetState* temp = get_state_;
  get_state_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_state(::mesos::master_p::Response_GetState* get_state) {
  delete get_state_;
  get_state_ = get_state;
  if (get_state) {
    set_has_get_state();
  } else {
    clear_has_get_state();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_state)
}

// optional .mesos.master_p.Response.GetAgents get_agents = 10;
inline bool Response::has_get_agents() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Response::set_has_get_agents() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Response::clear_has_get_agents() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Response::clear_get_agents() {
  if (get_agents_ != NULL) get_agents_->::mesos::master_p::Response_GetAgents::Clear();
  clear_has_get_agents();
}
inline const ::mesos::master_p::Response_GetAgents& Response::get_agents() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_agents)
  return get_agents_ != NULL ? *get_agents_ : *default_instance_->get_agents_;
}
inline ::mesos::master_p::Response_GetAgents* Response::mutable_get_agents() {
  set_has_get_agents();
  if (get_agents_ == NULL) get_agents_ = new ::mesos::master_p::Response_GetAgents;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_agents)
  return get_agents_;
}
inline ::mesos::master_p::Response_GetAgents* Response::release_get_agents() {
  clear_has_get_agents();
  ::mesos::master_p::Response_GetAgents* temp = get_agents_;
  get_agents_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_agents(::mesos::master_p::Response_GetAgents* get_agents) {
  delete get_agents_;
  get_agents_ = get_agents;
  if (get_agents) {
    set_has_get_agents();
  } else {
    clear_has_get_agents();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_agents)
}

// optional .mesos.master_p.Response.GetFrameworks get_frameworks = 11;
inline bool Response::has_get_frameworks() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Response::set_has_get_frameworks() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Response::clear_has_get_frameworks() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Response::clear_get_frameworks() {
  if (get_frameworks_ != NULL) get_frameworks_->::mesos::master_p::Response_GetFrameworks::Clear();
  clear_has_get_frameworks();
}
inline const ::mesos::master_p::Response_GetFrameworks& Response::get_frameworks() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_frameworks)
  return get_frameworks_ != NULL ? *get_frameworks_ : *default_instance_->get_frameworks_;
}
inline ::mesos::master_p::Response_GetFrameworks* Response::mutable_get_frameworks() {
  set_has_get_frameworks();
  if (get_frameworks_ == NULL) get_frameworks_ = new ::mesos::master_p::Response_GetFrameworks;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_frameworks)
  return get_frameworks_;
}
inline ::mesos::master_p::Response_GetFrameworks* Response::release_get_frameworks() {
  clear_has_get_frameworks();
  ::mesos::master_p::Response_GetFrameworks* temp = get_frameworks_;
  get_frameworks_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_frameworks(::mesos::master_p::Response_GetFrameworks* get_frameworks) {
  delete get_frameworks_;
  get_frameworks_ = get_frameworks;
  if (get_frameworks) {
    set_has_get_frameworks();
  } else {
    clear_has_get_frameworks();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_frameworks)
}

// optional .mesos.master_p.Response.GetExecutors get_executors = 12;
inline bool Response::has_get_executors() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Response::set_has_get_executors() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Response::clear_has_get_executors() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Response::clear_get_executors() {
  if (get_executors_ != NULL) get_executors_->::mesos::master_p::Response_GetExecutors::Clear();
  clear_has_get_executors();
}
inline const ::mesos::master_p::Response_GetExecutors& Response::get_executors() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_executors)
  return get_executors_ != NULL ? *get_executors_ : *default_instance_->get_executors_;
}
inline ::mesos::master_p::Response_GetExecutors* Response::mutable_get_executors() {
  set_has_get_executors();
  if (get_executors_ == NULL) get_executors_ = new ::mesos::master_p::Response_GetExecutors;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_executors)
  return get_executors_;
}
inline ::mesos::master_p::Response_GetExecutors* Response::release_get_executors() {
  clear_has_get_executors();
  ::mesos::master_p::Response_GetExecutors* temp = get_executors_;
  get_executors_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_executors(::mesos::master_p::Response_GetExecutors* get_executors) {
  delete get_executors_;
  get_executors_ = get_executors;
  if (get_executors) {
    set_has_get_executors();
  } else {
    clear_has_get_executors();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_executors)
}

// optional .mesos.master_p.Response.GetTasks get_tasks = 13;
inline bool Response::has_get_tasks() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Response::set_has_get_tasks() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Response::clear_has_get_tasks() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Response::clear_get_tasks() {
  if (get_tasks_ != NULL) get_tasks_->::mesos::master_p::Response_GetTasks::Clear();
  clear_has_get_tasks();
}
inline const ::mesos::master_p::Response_GetTasks& Response::get_tasks() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_tasks)
  return get_tasks_ != NULL ? *get_tasks_ : *default_instance_->get_tasks_;
}
inline ::mesos::master_p::Response_GetTasks* Response::mutable_get_tasks() {
  set_has_get_tasks();
  if (get_tasks_ == NULL) get_tasks_ = new ::mesos::master_p::Response_GetTasks;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_tasks)
  return get_tasks_;
}
inline ::mesos::master_p::Response_GetTasks* Response::release_get_tasks() {
  clear_has_get_tasks();
  ::mesos::master_p::Response_GetTasks* temp = get_tasks_;
  get_tasks_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_tasks(::mesos::master_p::Response_GetTasks* get_tasks) {
  delete get_tasks_;
  get_tasks_ = get_tasks;
  if (get_tasks) {
    set_has_get_tasks();
  } else {
    clear_has_get_tasks();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_tasks)
}

// optional .mesos.master_p.Response.GetRoles get_roles = 14;
inline bool Response::has_get_roles() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Response::set_has_get_roles() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Response::clear_has_get_roles() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Response::clear_get_roles() {
  if (get_roles_ != NULL) get_roles_->::mesos::master_p::Response_GetRoles::Clear();
  clear_has_get_roles();
}
inline const ::mesos::master_p::Response_GetRoles& Response::get_roles() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_roles)
  return get_roles_ != NULL ? *get_roles_ : *default_instance_->get_roles_;
}
inline ::mesos::master_p::Response_GetRoles* Response::mutable_get_roles() {
  set_has_get_roles();
  if (get_roles_ == NULL) get_roles_ = new ::mesos::master_p::Response_GetRoles;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_roles)
  return get_roles_;
}
inline ::mesos::master_p::Response_GetRoles* Response::release_get_roles() {
  clear_has_get_roles();
  ::mesos::master_p::Response_GetRoles* temp = get_roles_;
  get_roles_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_roles(::mesos::master_p::Response_GetRoles* get_roles) {
  delete get_roles_;
  get_roles_ = get_roles;
  if (get_roles) {
    set_has_get_roles();
  } else {
    clear_has_get_roles();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_roles)
}

// optional .mesos.master_p.Response.GetWeights get_weights = 15;
inline bool Response::has_get_weights() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Response::set_has_get_weights() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Response::clear_has_get_weights() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Response::clear_get_weights() {
  if (get_weights_ != NULL) get_weights_->::mesos::master_p::Response_GetWeights::Clear();
  clear_has_get_weights();
}
inline const ::mesos::master_p::Response_GetWeights& Response::get_weights() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_weights)
  return get_weights_ != NULL ? *get_weights_ : *default_instance_->get_weights_;
}
inline ::mesos::master_p::Response_GetWeights* Response::mutable_get_weights() {
  set_has_get_weights();
  if (get_weights_ == NULL) get_weights_ = new ::mesos::master_p::Response_GetWeights;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_weights)
  return get_weights_;
}
inline ::mesos::master_p::Response_GetWeights* Response::release_get_weights() {
  clear_has_get_weights();
  ::mesos::master_p::Response_GetWeights* temp = get_weights_;
  get_weights_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_weights(::mesos::master_p::Response_GetWeights* get_weights) {
  delete get_weights_;
  get_weights_ = get_weights;
  if (get_weights) {
    set_has_get_weights();
  } else {
    clear_has_get_weights();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_weights)
}

// optional .mesos.master_p.Response.GetMaster get_master = 16;
inline bool Response::has_get_master() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Response::set_has_get_master() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Response::clear_has_get_master() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Response::clear_get_master() {
  if (get_master_ != NULL) get_master_->::mesos::master_p::Response_GetMaster::Clear();
  clear_has_get_master();
}
inline const ::mesos::master_p::Response_GetMaster& Response::get_master() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_master)
  return get_master_ != NULL ? *get_master_ : *default_instance_->get_master_;
}
inline ::mesos::master_p::Response_GetMaster* Response::mutable_get_master() {
  set_has_get_master();
  if (get_master_ == NULL) get_master_ = new ::mesos::master_p::Response_GetMaster;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_master)
  return get_master_;
}
inline ::mesos::master_p::Response_GetMaster* Response::release_get_master() {
  clear_has_get_master();
  ::mesos::master_p::Response_GetMaster* temp = get_master_;
  get_master_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_master(::mesos::master_p::Response_GetMaster* get_master) {
  delete get_master_;
  get_master_ = get_master;
  if (get_master) {
    set_has_get_master();
  } else {
    clear_has_get_master();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_master)
}

// optional .mesos.master_p.Response.GetMaintenanceStatus get_maintenance_status = 17;
inline bool Response::has_get_maintenance_status() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Response::set_has_get_maintenance_status() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Response::clear_has_get_maintenance_status() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Response::clear_get_maintenance_status() {
  if (get_maintenance_status_ != NULL) get_maintenance_status_->::mesos::master_p::Response_GetMaintenanceStatus::Clear();
  clear_has_get_maintenance_status();
}
inline const ::mesos::master_p::Response_GetMaintenanceStatus& Response::get_maintenance_status() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_maintenance_status)
  return get_maintenance_status_ != NULL ? *get_maintenance_status_ : *default_instance_->get_maintenance_status_;
}
inline ::mesos::master_p::Response_GetMaintenanceStatus* Response::mutable_get_maintenance_status() {
  set_has_get_maintenance_status();
  if (get_maintenance_status_ == NULL) get_maintenance_status_ = new ::mesos::master_p::Response_GetMaintenanceStatus;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_maintenance_status)
  return get_maintenance_status_;
}
inline ::mesos::master_p::Response_GetMaintenanceStatus* Response::release_get_maintenance_status() {
  clear_has_get_maintenance_status();
  ::mesos::master_p::Response_GetMaintenanceStatus* temp = get_maintenance_status_;
  get_maintenance_status_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_maintenance_status(::mesos::master_p::Response_GetMaintenanceStatus* get_maintenance_status) {
  delete get_maintenance_status_;
  get_maintenance_status_ = get_maintenance_status;
  if (get_maintenance_status) {
    set_has_get_maintenance_status();
  } else {
    clear_has_get_maintenance_status();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_maintenance_status)
}

// optional .mesos.master_p.Response.GetMaintenanceSchedule get_maintenance_schedule = 18;
inline bool Response::has_get_maintenance_schedule() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Response::set_has_get_maintenance_schedule() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Response::clear_has_get_maintenance_schedule() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Response::clear_get_maintenance_schedule() {
  if (get_maintenance_schedule_ != NULL) get_maintenance_schedule_->::mesos::master_p::Response_GetMaintenanceSchedule::Clear();
  clear_has_get_maintenance_schedule();
}
inline const ::mesos::master_p::Response_GetMaintenanceSchedule& Response::get_maintenance_schedule() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_maintenance_schedule)
  return get_maintenance_schedule_ != NULL ? *get_maintenance_schedule_ : *default_instance_->get_maintenance_schedule_;
}
inline ::mesos::master_p::Response_GetMaintenanceSchedule* Response::mutable_get_maintenance_schedule() {
  set_has_get_maintenance_schedule();
  if (get_maintenance_schedule_ == NULL) get_maintenance_schedule_ = new ::mesos::master_p::Response_GetMaintenanceSchedule;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_maintenance_schedule)
  return get_maintenance_schedule_;
}
inline ::mesos::master_p::Response_GetMaintenanceSchedule* Response::release_get_maintenance_schedule() {
  clear_has_get_maintenance_schedule();
  ::mesos::master_p::Response_GetMaintenanceSchedule* temp = get_maintenance_schedule_;
  get_maintenance_schedule_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_maintenance_schedule(::mesos::master_p::Response_GetMaintenanceSchedule* get_maintenance_schedule) {
  delete get_maintenance_schedule_;
  get_maintenance_schedule_ = get_maintenance_schedule;
  if (get_maintenance_schedule) {
    set_has_get_maintenance_schedule();
  } else {
    clear_has_get_maintenance_schedule();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_maintenance_schedule)
}

// optional .mesos.master_p.Response.GetQuota get_quota = 19;
inline bool Response::has_get_quota() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Response::set_has_get_quota() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Response::clear_has_get_quota() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Response::clear_get_quota() {
  if (get_quota_ != NULL) get_quota_->::mesos::master_p::Response_GetQuota::Clear();
  clear_has_get_quota();
}
inline const ::mesos::master_p::Response_GetQuota& Response::get_quota() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Response.get_quota)
  return get_quota_ != NULL ? *get_quota_ : *default_instance_->get_quota_;
}
inline ::mesos::master_p::Response_GetQuota* Response::mutable_get_quota() {
  set_has_get_quota();
  if (get_quota_ == NULL) get_quota_ = new ::mesos::master_p::Response_GetQuota;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Response.get_quota)
  return get_quota_;
}
inline ::mesos::master_p::Response_GetQuota* Response::release_get_quota() {
  clear_has_get_quota();
  ::mesos::master_p::Response_GetQuota* temp = get_quota_;
  get_quota_ = NULL;
  return temp;
}
inline void Response::set_allocated_get_quota(::mesos::master_p::Response_GetQuota* get_quota) {
  delete get_quota_;
  get_quota_ = get_quota;
  if (get_quota) {
    set_has_get_quota();
  } else {
    clear_has_get_quota();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Response.get_quota)
}

// -------------------------------------------------------------------

// Event_Subscribed

// optional .mesos.master_p.Response.GetState get_state = 1;
inline bool Event_Subscribed::has_get_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_Subscribed::set_has_get_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_Subscribed::clear_has_get_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_Subscribed::clear_get_state() {
  if (get_state_ != NULL) get_state_->::mesos::master_p::Response_GetState::Clear();
  clear_has_get_state();
}
inline const ::mesos::master_p::Response_GetState& Event_Subscribed::get_state() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Event.Subscribed.get_state)
  return get_state_ != NULL ? *get_state_ : *default_instance_->get_state_;
}
inline ::mesos::master_p::Response_GetState* Event_Subscribed::mutable_get_state() {
  set_has_get_state();
  if (get_state_ == NULL) get_state_ = new ::mesos::master_p::Response_GetState;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Event.Subscribed.get_state)
  return get_state_;
}
inline ::mesos::master_p::Response_GetState* Event_Subscribed::release_get_state() {
  clear_has_get_state();
  ::mesos::master_p::Response_GetState* temp = get_state_;
  get_state_ = NULL;
  return temp;
}
inline void Event_Subscribed::set_allocated_get_state(::mesos::master_p::Response_GetState* get_state) {
  delete get_state_;
  get_state_ = get_state;
  if (get_state) {
    set_has_get_state();
  } else {
    clear_has_get_state();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Event.Subscribed.get_state)
}

// -------------------------------------------------------------------

// Event_TaskAdded

// required .mesos.Task task = 1;
inline bool Event_TaskAdded::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_TaskAdded::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_TaskAdded::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_TaskAdded::clear_task() {
  if (task_ != NULL) task_->::mesos::Task::Clear();
  clear_has_task();
}
inline const ::mesos::Task& Event_TaskAdded::task() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Event.TaskAdded.task)
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::mesos::Task* Event_TaskAdded::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::mesos::Task;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Event.TaskAdded.task)
  return task_;
}
inline ::mesos::Task* Event_TaskAdded::release_task() {
  clear_has_task();
  ::mesos::Task* temp = task_;
  task_ = NULL;
  return temp;
}
inline void Event_TaskAdded::set_allocated_task(::mesos::Task* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Event.TaskAdded.task)
}

// -------------------------------------------------------------------

// Event_TaskUpdated

// required .mesos.FrameworkID framework_id = 1;
inline bool Event_TaskUpdated::has_framework_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_TaskUpdated::set_has_framework_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_TaskUpdated::clear_has_framework_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_TaskUpdated::clear_framework_id() {
  if (framework_id_ != NULL) framework_id_->::mesos::FrameworkID::Clear();
  clear_has_framework_id();
}
inline const ::mesos::FrameworkID& Event_TaskUpdated::framework_id() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Event.TaskUpdated.framework_id)
  return framework_id_ != NULL ? *framework_id_ : *default_instance_->framework_id_;
}
inline ::mesos::FrameworkID* Event_TaskUpdated::mutable_framework_id() {
  set_has_framework_id();
  if (framework_id_ == NULL) framework_id_ = new ::mesos::FrameworkID;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Event.TaskUpdated.framework_id)
  return framework_id_;
}
inline ::mesos::FrameworkID* Event_TaskUpdated::release_framework_id() {
  clear_has_framework_id();
  ::mesos::FrameworkID* temp = framework_id_;
  framework_id_ = NULL;
  return temp;
}
inline void Event_TaskUpdated::set_allocated_framework_id(::mesos::FrameworkID* framework_id) {
  delete framework_id_;
  framework_id_ = framework_id;
  if (framework_id) {
    set_has_framework_id();
  } else {
    clear_has_framework_id();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Event.TaskUpdated.framework_id)
}

// required .mesos.TaskStatus status = 2;
inline bool Event_TaskUpdated::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event_TaskUpdated::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event_TaskUpdated::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event_TaskUpdated::clear_status() {
  if (status_ != NULL) status_->::mesos::TaskStatus::Clear();
  clear_has_status();
}
inline const ::mesos::TaskStatus& Event_TaskUpdated::status() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Event.TaskUpdated.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::mesos::TaskStatus* Event_TaskUpdated::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::mesos::TaskStatus;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Event.TaskUpdated.status)
  return status_;
}
inline ::mesos::TaskStatus* Event_TaskUpdated::release_status() {
  clear_has_status();
  ::mesos::TaskStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void Event_TaskUpdated::set_allocated_status(::mesos::TaskStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Event.TaskUpdated.status)
}

// required .mesos.TaskState state = 3;
inline bool Event_TaskUpdated::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event_TaskUpdated::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event_TaskUpdated::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event_TaskUpdated::clear_state() {
  state_ = 6;
  clear_has_state();
}
inline ::mesos::TaskState Event_TaskUpdated::state() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Event.TaskUpdated.state)
  return static_cast< ::mesos::TaskState >(state_);
}
inline void Event_TaskUpdated::set_state(::mesos::TaskState value) {
  assert(::mesos::TaskState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:mesos.master_p.Event.TaskUpdated.state)
}

// -------------------------------------------------------------------

// Event_AgentAdded

// required .mesos.master_p.Response.GetAgents.Agent agent = 1;
inline bool Event_AgentAdded::has_agent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_AgentAdded::set_has_agent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_AgentAdded::clear_has_agent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_AgentAdded::clear_agent() {
  if (agent_ != NULL) agent_->::mesos::master_p::Response_GetAgents_Agent::Clear();
  clear_has_agent();
}
inline const ::mesos::master_p::Response_GetAgents_Agent& Event_AgentAdded::agent() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Event.AgentAdded.agent)
  return agent_ != NULL ? *agent_ : *default_instance_->agent_;
}
inline ::mesos::master_p::Response_GetAgents_Agent* Event_AgentAdded::mutable_agent() {
  set_has_agent();
  if (agent_ == NULL) agent_ = new ::mesos::master_p::Response_GetAgents_Agent;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Event.AgentAdded.agent)
  return agent_;
}
inline ::mesos::master_p::Response_GetAgents_Agent* Event_AgentAdded::release_agent() {
  clear_has_agent();
  ::mesos::master_p::Response_GetAgents_Agent* temp = agent_;
  agent_ = NULL;
  return temp;
}
inline void Event_AgentAdded::set_allocated_agent(::mesos::master_p::Response_GetAgents_Agent* agent) {
  delete agent_;
  agent_ = agent;
  if (agent) {
    set_has_agent();
  } else {
    clear_has_agent();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Event.AgentAdded.agent)
}

// -------------------------------------------------------------------

// Event_AgentRemoved

// required .mesos.SlaveID agent_id = 1;
inline bool Event_AgentRemoved::has_agent_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event_AgentRemoved::set_has_agent_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event_AgentRemoved::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event_AgentRemoved::clear_agent_id() {
  if (agent_id_ != NULL) agent_id_->::mesos::SlaveID::Clear();
  clear_has_agent_id();
}
inline const ::mesos::SlaveID& Event_AgentRemoved::agent_id() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Event.AgentRemoved.agent_id)
  return agent_id_ != NULL ? *agent_id_ : *default_instance_->agent_id_;
}
inline ::mesos::SlaveID* Event_AgentRemoved::mutable_agent_id() {
  set_has_agent_id();
  if (agent_id_ == NULL) agent_id_ = new ::mesos::SlaveID;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Event.AgentRemoved.agent_id)
  return agent_id_;
}
inline ::mesos::SlaveID* Event_AgentRemoved::release_agent_id() {
  clear_has_agent_id();
  ::mesos::SlaveID* temp = agent_id_;
  agent_id_ = NULL;
  return temp;
}
inline void Event_AgentRemoved::set_allocated_agent_id(::mesos::SlaveID* agent_id) {
  delete agent_id_;
  agent_id_ = agent_id;
  if (agent_id) {
    set_has_agent_id();
  } else {
    clear_has_agent_id();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Event.AgentRemoved.agent_id)
}

// -------------------------------------------------------------------

// Event

// optional .mesos.master_p.Event.Type type = 1;
inline bool Event::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::mesos::master_p::Event_Type Event::type() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Event.type)
  return static_cast< ::mesos::master_p::Event_Type >(type_);
}
inline void Event::set_type(::mesos::master_p::Event_Type value) {
  assert(::mesos::master_p::Event_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mesos.master_p.Event.type)
}

// optional .mesos.master_p.Event.Subscribed subscribed = 2;
inline bool Event::has_subscribed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_subscribed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_subscribed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_subscribed() {
  if (subscribed_ != NULL) subscribed_->::mesos::master_p::Event_Subscribed::Clear();
  clear_has_subscribed();
}
inline const ::mesos::master_p::Event_Subscribed& Event::subscribed() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Event.subscribed)
  return subscribed_ != NULL ? *subscribed_ : *default_instance_->subscribed_;
}
inline ::mesos::master_p::Event_Subscribed* Event::mutable_subscribed() {
  set_has_subscribed();
  if (subscribed_ == NULL) subscribed_ = new ::mesos::master_p::Event_Subscribed;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Event.subscribed)
  return subscribed_;
}
inline ::mesos::master_p::Event_Subscribed* Event::release_subscribed() {
  clear_has_subscribed();
  ::mesos::master_p::Event_Subscribed* temp = subscribed_;
  subscribed_ = NULL;
  return temp;
}
inline void Event::set_allocated_subscribed(::mesos::master_p::Event_Subscribed* subscribed) {
  delete subscribed_;
  subscribed_ = subscribed;
  if (subscribed) {
    set_has_subscribed();
  } else {
    clear_has_subscribed();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Event.subscribed)
}

// optional .mesos.master_p.Event.TaskAdded task_added = 3;
inline bool Event::has_task_added() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_task_added() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_task_added() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_task_added() {
  if (task_added_ != NULL) task_added_->::mesos::master_p::Event_TaskAdded::Clear();
  clear_has_task_added();
}
inline const ::mesos::master_p::Event_TaskAdded& Event::task_added() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Event.task_added)
  return task_added_ != NULL ? *task_added_ : *default_instance_->task_added_;
}
inline ::mesos::master_p::Event_TaskAdded* Event::mutable_task_added() {
  set_has_task_added();
  if (task_added_ == NULL) task_added_ = new ::mesos::master_p::Event_TaskAdded;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Event.task_added)
  return task_added_;
}
inline ::mesos::master_p::Event_TaskAdded* Event::release_task_added() {
  clear_has_task_added();
  ::mesos::master_p::Event_TaskAdded* temp = task_added_;
  task_added_ = NULL;
  return temp;
}
inline void Event::set_allocated_task_added(::mesos::master_p::Event_TaskAdded* task_added) {
  delete task_added_;
  task_added_ = task_added;
  if (task_added) {
    set_has_task_added();
  } else {
    clear_has_task_added();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Event.task_added)
}

// optional .mesos.master_p.Event.TaskUpdated task_updated = 4;
inline bool Event::has_task_updated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_task_updated() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_task_updated() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_task_updated() {
  if (task_updated_ != NULL) task_updated_->::mesos::master_p::Event_TaskUpdated::Clear();
  clear_has_task_updated();
}
inline const ::mesos::master_p::Event_TaskUpdated& Event::task_updated() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Event.task_updated)
  return task_updated_ != NULL ? *task_updated_ : *default_instance_->task_updated_;
}
inline ::mesos::master_p::Event_TaskUpdated* Event::mutable_task_updated() {
  set_has_task_updated();
  if (task_updated_ == NULL) task_updated_ = new ::mesos::master_p::Event_TaskUpdated;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Event.task_updated)
  return task_updated_;
}
inline ::mesos::master_p::Event_TaskUpdated* Event::release_task_updated() {
  clear_has_task_updated();
  ::mesos::master_p::Event_TaskUpdated* temp = task_updated_;
  task_updated_ = NULL;
  return temp;
}
inline void Event::set_allocated_task_updated(::mesos::master_p::Event_TaskUpdated* task_updated) {
  delete task_updated_;
  task_updated_ = task_updated;
  if (task_updated) {
    set_has_task_updated();
  } else {
    clear_has_task_updated();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Event.task_updated)
}

// optional .mesos.master_p.Event.AgentAdded agent_added = 5;
inline bool Event::has_agent_added() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event::set_has_agent_added() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event::clear_has_agent_added() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event::clear_agent_added() {
  if (agent_added_ != NULL) agent_added_->::mesos::master_p::Event_AgentAdded::Clear();
  clear_has_agent_added();
}
inline const ::mesos::master_p::Event_AgentAdded& Event::agent_added() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Event.agent_added)
  return agent_added_ != NULL ? *agent_added_ : *default_instance_->agent_added_;
}
inline ::mesos::master_p::Event_AgentAdded* Event::mutable_agent_added() {
  set_has_agent_added();
  if (agent_added_ == NULL) agent_added_ = new ::mesos::master_p::Event_AgentAdded;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Event.agent_added)
  return agent_added_;
}
inline ::mesos::master_p::Event_AgentAdded* Event::release_agent_added() {
  clear_has_agent_added();
  ::mesos::master_p::Event_AgentAdded* temp = agent_added_;
  agent_added_ = NULL;
  return temp;
}
inline void Event::set_allocated_agent_added(::mesos::master_p::Event_AgentAdded* agent_added) {
  delete agent_added_;
  agent_added_ = agent_added;
  if (agent_added) {
    set_has_agent_added();
  } else {
    clear_has_agent_added();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Event.agent_added)
}

// optional .mesos.master_p.Event.AgentRemoved agent_removed = 6;
inline bool Event::has_agent_removed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Event::set_has_agent_removed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Event::clear_has_agent_removed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Event::clear_agent_removed() {
  if (agent_removed_ != NULL) agent_removed_->::mesos::master_p::Event_AgentRemoved::Clear();
  clear_has_agent_removed();
}
inline const ::mesos::master_p::Event_AgentRemoved& Event::agent_removed() const {
  // @@protoc_insertion_point(field_get:mesos.master_p.Event.agent_removed)
  return agent_removed_ != NULL ? *agent_removed_ : *default_instance_->agent_removed_;
}
inline ::mesos::master_p::Event_AgentRemoved* Event::mutable_agent_removed() {
  set_has_agent_removed();
  if (agent_removed_ == NULL) agent_removed_ = new ::mesos::master_p::Event_AgentRemoved;
  // @@protoc_insertion_point(field_mutable:mesos.master_p.Event.agent_removed)
  return agent_removed_;
}
inline ::mesos::master_p::Event_AgentRemoved* Event::release_agent_removed() {
  clear_has_agent_removed();
  ::mesos::master_p::Event_AgentRemoved* temp = agent_removed_;
  agent_removed_ = NULL;
  return temp;
}
inline void Event::set_allocated_agent_removed(::mesos::master_p::Event_AgentRemoved* agent_removed) {
  delete agent_removed_;
  agent_removed_ = agent_removed;
  if (agent_removed) {
    set_has_agent_removed();
  } else {
    clear_has_agent_removed();
  }
  // @@protoc_insertion_point(field_set_allocated:mesos.master_p.Event.agent_removed)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace master_p
}  // namespace mesos

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mesos::master_p::Call_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::master_p::Call_Type>() {
  return ::mesos::master_p::Call_Type_descriptor();
}
template <> struct is_proto_enum< ::mesos::master_p::Response_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::master_p::Response_Type>() {
  return ::mesos::master_p::Response_Type_descriptor();
}
template <> struct is_proto_enum< ::mesos::master_p::Event_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::master_p::Event_Type>() {
  return ::mesos::master_p::Event_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_master_5fp_2eproto__INCLUDED
