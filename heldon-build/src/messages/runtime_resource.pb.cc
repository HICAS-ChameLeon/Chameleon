// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runtime_resource.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "runtime_resource.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RuntimeResourcesMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuntimeResourcesMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* CPUUsage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CPUUsage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemoryUsage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryUsage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiskUsage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiskUsage_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetUsage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetUsage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_runtime_5fresource_2eproto() {
  protobuf_AddDesc_runtime_5fresource_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "runtime_resource.proto");
  GOOGLE_CHECK(file != NULL);
  RuntimeResourcesMessage_descriptor_ = file->message_type(0);
  static const int RuntimeResourcesMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuntimeResourcesMessage, slave_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuntimeResourcesMessage, cpu_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuntimeResourcesMessage, mem_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuntimeResourcesMessage, disk_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuntimeResourcesMessage, net_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuntimeResourcesMessage, slave_uuid_),
  };
  RuntimeResourcesMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuntimeResourcesMessage_descriptor_,
      RuntimeResourcesMessage::default_instance_,
      RuntimeResourcesMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuntimeResourcesMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuntimeResourcesMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuntimeResourcesMessage));
  CPUUsage_descriptor_ = file->message_type(1);
  static const int CPUUsage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUUsage, cpu_used_),
  };
  CPUUsage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CPUUsage_descriptor_,
      CPUUsage::default_instance_,
      CPUUsage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUUsage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPUUsage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CPUUsage));
  MemoryUsage_descriptor_ = file->message_type(2);
  static const int MemoryUsage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryUsage, mem_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryUsage, mem_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryUsage, mem_available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryUsage, buffers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryUsage, cached_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryUsage, swap_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryUsage, swap_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryUsage, hugepagesize_),
  };
  MemoryUsage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemoryUsage_descriptor_,
      MemoryUsage::default_instance_,
      MemoryUsage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryUsage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryUsage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemoryUsage));
  DiskUsage_descriptor_ = file->message_type(3);
  static const int DiskUsage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, disk_available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, available_percent_),
  };
  DiskUsage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiskUsage_descriptor_,
      DiskUsage::default_instance_,
      DiskUsage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiskUsage));
  NetUsage_descriptor_ = file->message_type(4);
  static const int NetUsage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetUsage, net_used_),
  };
  NetUsage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetUsage_descriptor_,
      NetUsage::default_instance_,
      NetUsage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetUsage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetUsage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetUsage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_runtime_5fresource_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuntimeResourcesMessage_descriptor_, &RuntimeResourcesMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CPUUsage_descriptor_, &CPUUsage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemoryUsage_descriptor_, &MemoryUsage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiskUsage_descriptor_, &DiskUsage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetUsage_descriptor_, &NetUsage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_runtime_5fresource_2eproto() {
  delete RuntimeResourcesMessage::default_instance_;
  delete RuntimeResourcesMessage_reflection_;
  delete CPUUsage::default_instance_;
  delete CPUUsage_reflection_;
  delete MemoryUsage::default_instance_;
  delete MemoryUsage_reflection_;
  delete DiskUsage::default_instance_;
  delete DiskUsage_reflection_;
  delete NetUsage::default_instance_;
  delete NetUsage_reflection_;
}

void protobuf_AddDesc_runtime_5fresource_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026runtime_resource.proto\"\274\001\n\027RuntimeReso"
    "urcesMessage\022\020\n\010slave_id\030\001 \002(\t\022\034\n\tcpu_us"
    "age\030\002 \002(\0132\t.CPUUsage\022\037\n\tmem_usage\030\003 \002(\0132"
    "\014.MemoryUsage\022\036\n\ndisk_usage\030\004 \002(\0132\n.Disk"
    "Usage\022\034\n\tnet_usage\030\005 \002(\0132\t.NetUsage\022\022\n\ns"
    "lave_uuid\030\006 \002(\t\"\034\n\010CPUUsage\022\020\n\010cpu_used\030"
    "\001 \002(\002\"\247\001\n\013MemoryUsage\022\021\n\tmem_total\030\001 \002(\r"
    "\022\020\n\010mem_free\030\002 \002(\r\022\025\n\rmem_available\030\003 \002("
    "\r\022\017\n\007buffers\030\004 \002(\r\022\016\n\006cached\030\005 \002(\r\022\022\n\nsw"
    "ap_total\030\006 \002(\r\022\021\n\tswap_free\030\007 \002(\r\022\024\n\014hug"
    "epagesize\030\010 \001(\r\">\n\tDiskUsage\022\026\n\016disk_ava"
    "ilable\030\001 \002(\r\022\031\n\021available_percent\030\002 \002(\001\""
    "\034\n\010NetUsage\022\020\n\010net_used\030\001 \002(\002", 509);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "runtime_resource.proto", &protobuf_RegisterTypes);
  RuntimeResourcesMessage::default_instance_ = new RuntimeResourcesMessage();
  CPUUsage::default_instance_ = new CPUUsage();
  MemoryUsage::default_instance_ = new MemoryUsage();
  DiskUsage::default_instance_ = new DiskUsage();
  NetUsage::default_instance_ = new NetUsage();
  RuntimeResourcesMessage::default_instance_->InitAsDefaultInstance();
  CPUUsage::default_instance_->InitAsDefaultInstance();
  MemoryUsage::default_instance_->InitAsDefaultInstance();
  DiskUsage::default_instance_->InitAsDefaultInstance();
  NetUsage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_runtime_5fresource_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_runtime_5fresource_2eproto {
  StaticDescriptorInitializer_runtime_5fresource_2eproto() {
    protobuf_AddDesc_runtime_5fresource_2eproto();
  }
} static_descriptor_initializer_runtime_5fresource_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RuntimeResourcesMessage::kSlaveIdFieldNumber;
const int RuntimeResourcesMessage::kCpuUsageFieldNumber;
const int RuntimeResourcesMessage::kMemUsageFieldNumber;
const int RuntimeResourcesMessage::kDiskUsageFieldNumber;
const int RuntimeResourcesMessage::kNetUsageFieldNumber;
const int RuntimeResourcesMessage::kSlaveUuidFieldNumber;
#endif  // !_MSC_VER

RuntimeResourcesMessage::RuntimeResourcesMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RuntimeResourcesMessage)
}

void RuntimeResourcesMessage::InitAsDefaultInstance() {
  cpu_usage_ = const_cast< ::CPUUsage*>(&::CPUUsage::default_instance());
  mem_usage_ = const_cast< ::MemoryUsage*>(&::MemoryUsage::default_instance());
  disk_usage_ = const_cast< ::DiskUsage*>(&::DiskUsage::default_instance());
  net_usage_ = const_cast< ::NetUsage*>(&::NetUsage::default_instance());
}

RuntimeResourcesMessage::RuntimeResourcesMessage(const RuntimeResourcesMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RuntimeResourcesMessage)
}

void RuntimeResourcesMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  slave_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpu_usage_ = NULL;
  mem_usage_ = NULL;
  disk_usage_ = NULL;
  net_usage_ = NULL;
  slave_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuntimeResourcesMessage::~RuntimeResourcesMessage() {
  // @@protoc_insertion_point(destructor:RuntimeResourcesMessage)
  SharedDtor();
}

void RuntimeResourcesMessage::SharedDtor() {
  if (slave_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slave_id_;
  }
  if (slave_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slave_uuid_;
  }
  if (this != default_instance_) {
    delete cpu_usage_;
    delete mem_usage_;
    delete disk_usage_;
    delete net_usage_;
  }
}

void RuntimeResourcesMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuntimeResourcesMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuntimeResourcesMessage_descriptor_;
}

const RuntimeResourcesMessage& RuntimeResourcesMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_runtime_5fresource_2eproto();
  return *default_instance_;
}

RuntimeResourcesMessage* RuntimeResourcesMessage::default_instance_ = NULL;

RuntimeResourcesMessage* RuntimeResourcesMessage::New() const {
  return new RuntimeResourcesMessage;
}

void RuntimeResourcesMessage::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_slave_id()) {
      if (slave_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        slave_id_->clear();
      }
    }
    if (has_cpu_usage()) {
      if (cpu_usage_ != NULL) cpu_usage_->::CPUUsage::Clear();
    }
    if (has_mem_usage()) {
      if (mem_usage_ != NULL) mem_usage_->::MemoryUsage::Clear();
    }
    if (has_disk_usage()) {
      if (disk_usage_ != NULL) disk_usage_->::DiskUsage::Clear();
    }
    if (has_net_usage()) {
      if (net_usage_ != NULL) net_usage_->::NetUsage::Clear();
    }
    if (has_slave_uuid()) {
      if (slave_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        slave_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuntimeResourcesMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RuntimeResourcesMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string slave_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slave_id().data(), this->slave_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "slave_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cpu_usage;
        break;
      }

      // required .CPUUsage cpu_usage = 2;
      case 2: {
        if (tag == 18) {
         parse_cpu_usage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cpu_usage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_mem_usage;
        break;
      }

      // required .MemoryUsage mem_usage = 3;
      case 3: {
        if (tag == 26) {
         parse_mem_usage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mem_usage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_disk_usage;
        break;
      }

      // required .DiskUsage disk_usage = 4;
      case 4: {
        if (tag == 34) {
         parse_disk_usage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disk_usage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_net_usage;
        break;
      }

      // required .NetUsage net_usage = 5;
      case 5: {
        if (tag == 42) {
         parse_net_usage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_net_usage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_slave_uuid;
        break;
      }

      // required string slave_uuid = 6;
      case 6: {
        if (tag == 50) {
         parse_slave_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slave_uuid().data(), this->slave_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "slave_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RuntimeResourcesMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RuntimeResourcesMessage)
  return false;
#undef DO_
}

void RuntimeResourcesMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RuntimeResourcesMessage)
  // required string slave_id = 1;
  if (has_slave_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_id().data(), this->slave_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slave_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->slave_id(), output);
  }

  // required .CPUUsage cpu_usage = 2;
  if (has_cpu_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cpu_usage(), output);
  }

  // required .MemoryUsage mem_usage = 3;
  if (has_mem_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mem_usage(), output);
  }

  // required .DiskUsage disk_usage = 4;
  if (has_disk_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->disk_usage(), output);
  }

  // required .NetUsage net_usage = 5;
  if (has_net_usage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->net_usage(), output);
  }

  // required string slave_uuid = 6;
  if (has_slave_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_uuid().data(), this->slave_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slave_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->slave_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RuntimeResourcesMessage)
}

::google::protobuf::uint8* RuntimeResourcesMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RuntimeResourcesMessage)
  // required string slave_id = 1;
  if (has_slave_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_id().data(), this->slave_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slave_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->slave_id(), target);
  }

  // required .CPUUsage cpu_usage = 2;
  if (has_cpu_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cpu_usage(), target);
  }

  // required .MemoryUsage mem_usage = 3;
  if (has_mem_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mem_usage(), target);
  }

  // required .DiskUsage disk_usage = 4;
  if (has_disk_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->disk_usage(), target);
  }

  // required .NetUsage net_usage = 5;
  if (has_net_usage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->net_usage(), target);
  }

  // required string slave_uuid = 6;
  if (has_slave_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_uuid().data(), this->slave_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "slave_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->slave_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RuntimeResourcesMessage)
  return target;
}

int RuntimeResourcesMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string slave_id = 1;
    if (has_slave_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slave_id());
    }

    // required .CPUUsage cpu_usage = 2;
    if (has_cpu_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cpu_usage());
    }

    // required .MemoryUsage mem_usage = 3;
    if (has_mem_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mem_usage());
    }

    // required .DiskUsage disk_usage = 4;
    if (has_disk_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disk_usage());
    }

    // required .NetUsage net_usage = 5;
    if (has_net_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->net_usage());
    }

    // required string slave_uuid = 6;
    if (has_slave_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slave_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuntimeResourcesMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuntimeResourcesMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuntimeResourcesMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuntimeResourcesMessage::MergeFrom(const RuntimeResourcesMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slave_id()) {
      set_slave_id(from.slave_id());
    }
    if (from.has_cpu_usage()) {
      mutable_cpu_usage()->::CPUUsage::MergeFrom(from.cpu_usage());
    }
    if (from.has_mem_usage()) {
      mutable_mem_usage()->::MemoryUsage::MergeFrom(from.mem_usage());
    }
    if (from.has_disk_usage()) {
      mutable_disk_usage()->::DiskUsage::MergeFrom(from.disk_usage());
    }
    if (from.has_net_usage()) {
      mutable_net_usage()->::NetUsage::MergeFrom(from.net_usage());
    }
    if (from.has_slave_uuid()) {
      set_slave_uuid(from.slave_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuntimeResourcesMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuntimeResourcesMessage::CopyFrom(const RuntimeResourcesMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeResourcesMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_cpu_usage()) {
    if (!this->cpu_usage().IsInitialized()) return false;
  }
  if (has_mem_usage()) {
    if (!this->mem_usage().IsInitialized()) return false;
  }
  if (has_disk_usage()) {
    if (!this->disk_usage().IsInitialized()) return false;
  }
  if (has_net_usage()) {
    if (!this->net_usage().IsInitialized()) return false;
  }
  return true;
}

void RuntimeResourcesMessage::Swap(RuntimeResourcesMessage* other) {
  if (other != this) {
    std::swap(slave_id_, other->slave_id_);
    std::swap(cpu_usage_, other->cpu_usage_);
    std::swap(mem_usage_, other->mem_usage_);
    std::swap(disk_usage_, other->disk_usage_);
    std::swap(net_usage_, other->net_usage_);
    std::swap(slave_uuid_, other->slave_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuntimeResourcesMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuntimeResourcesMessage_descriptor_;
  metadata.reflection = RuntimeResourcesMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CPUUsage::kCpuUsedFieldNumber;
#endif  // !_MSC_VER

CPUUsage::CPUUsage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CPUUsage)
}

void CPUUsage::InitAsDefaultInstance() {
}

CPUUsage::CPUUsage(const CPUUsage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CPUUsage)
}

void CPUUsage::SharedCtor() {
  _cached_size_ = 0;
  cpu_used_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPUUsage::~CPUUsage() {
  // @@protoc_insertion_point(destructor:CPUUsage)
  SharedDtor();
}

void CPUUsage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CPUUsage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPUUsage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CPUUsage_descriptor_;
}

const CPUUsage& CPUUsage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_runtime_5fresource_2eproto();
  return *default_instance_;
}

CPUUsage* CPUUsage::default_instance_ = NULL;

CPUUsage* CPUUsage::New() const {
  return new CPUUsage;
}

void CPUUsage::Clear() {
  cpu_used_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CPUUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CPUUsage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float cpu_used = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_used_)));
          set_has_cpu_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CPUUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CPUUsage)
  return false;
#undef DO_
}

void CPUUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CPUUsage)
  // required float cpu_used = 1;
  if (has_cpu_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->cpu_used(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CPUUsage)
}

::google::protobuf::uint8* CPUUsage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPUUsage)
  // required float cpu_used = 1;
  if (has_cpu_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->cpu_used(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPUUsage)
  return target;
}

int CPUUsage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float cpu_used = 1;
    if (has_cpu_used()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPUUsage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CPUUsage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CPUUsage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CPUUsage::MergeFrom(const CPUUsage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_used()) {
      set_cpu_used(from.cpu_used());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CPUUsage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPUUsage::CopyFrom(const CPUUsage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPUUsage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CPUUsage::Swap(CPUUsage* other) {
  if (other != this) {
    std::swap(cpu_used_, other->cpu_used_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CPUUsage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CPUUsage_descriptor_;
  metadata.reflection = CPUUsage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemoryUsage::kMemTotalFieldNumber;
const int MemoryUsage::kMemFreeFieldNumber;
const int MemoryUsage::kMemAvailableFieldNumber;
const int MemoryUsage::kBuffersFieldNumber;
const int MemoryUsage::kCachedFieldNumber;
const int MemoryUsage::kSwapTotalFieldNumber;
const int MemoryUsage::kSwapFreeFieldNumber;
const int MemoryUsage::kHugepagesizeFieldNumber;
#endif  // !_MSC_VER

MemoryUsage::MemoryUsage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MemoryUsage)
}

void MemoryUsage::InitAsDefaultInstance() {
}

MemoryUsage::MemoryUsage(const MemoryUsage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MemoryUsage)
}

void MemoryUsage::SharedCtor() {
  _cached_size_ = 0;
  mem_total_ = 0u;
  mem_free_ = 0u;
  mem_available_ = 0u;
  buffers_ = 0u;
  cached_ = 0u;
  swap_total_ = 0u;
  swap_free_ = 0u;
  hugepagesize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryUsage::~MemoryUsage() {
  // @@protoc_insertion_point(destructor:MemoryUsage)
  SharedDtor();
}

void MemoryUsage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MemoryUsage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryUsage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryUsage_descriptor_;
}

const MemoryUsage& MemoryUsage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_runtime_5fresource_2eproto();
  return *default_instance_;
}

MemoryUsage* MemoryUsage::default_instance_ = NULL;

MemoryUsage* MemoryUsage::New() const {
  return new MemoryUsage;
}

void MemoryUsage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MemoryUsage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mem_total_, hugepagesize_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemoryUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MemoryUsage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mem_total = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_total_)));
          set_has_mem_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mem_free;
        break;
      }

      // required uint32 mem_free = 2;
      case 2: {
        if (tag == 16) {
         parse_mem_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_free_)));
          set_has_mem_free();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mem_available;
        break;
      }

      // required uint32 mem_available = 3;
      case 3: {
        if (tag == 24) {
         parse_mem_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mem_available_)));
          set_has_mem_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buffers;
        break;
      }

      // required uint32 buffers = 4;
      case 4: {
        if (tag == 32) {
         parse_buffers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffers_)));
          set_has_buffers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cached;
        break;
      }

      // required uint32 cached = 5;
      case 5: {
        if (tag == 40) {
         parse_cached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cached_)));
          set_has_cached();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_swap_total;
        break;
      }

      // required uint32 swap_total = 6;
      case 6: {
        if (tag == 48) {
         parse_swap_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swap_total_)));
          set_has_swap_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_swap_free;
        break;
      }

      // required uint32 swap_free = 7;
      case 7: {
        if (tag == 56) {
         parse_swap_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &swap_free_)));
          set_has_swap_free();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hugepagesize;
        break;
      }

      // optional uint32 hugepagesize = 8;
      case 8: {
        if (tag == 64) {
         parse_hugepagesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hugepagesize_)));
          set_has_hugepagesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MemoryUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MemoryUsage)
  return false;
#undef DO_
}

void MemoryUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MemoryUsage)
  // required uint32 mem_total = 1;
  if (has_mem_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mem_total(), output);
  }

  // required uint32 mem_free = 2;
  if (has_mem_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mem_free(), output);
  }

  // required uint32 mem_available = 3;
  if (has_mem_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mem_available(), output);
  }

  // required uint32 buffers = 4;
  if (has_buffers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buffers(), output);
  }

  // required uint32 cached = 5;
  if (has_cached()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cached(), output);
  }

  // required uint32 swap_total = 6;
  if (has_swap_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->swap_total(), output);
  }

  // required uint32 swap_free = 7;
  if (has_swap_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->swap_free(), output);
  }

  // optional uint32 hugepagesize = 8;
  if (has_hugepagesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hugepagesize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MemoryUsage)
}

::google::protobuf::uint8* MemoryUsage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MemoryUsage)
  // required uint32 mem_total = 1;
  if (has_mem_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mem_total(), target);
  }

  // required uint32 mem_free = 2;
  if (has_mem_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mem_free(), target);
  }

  // required uint32 mem_available = 3;
  if (has_mem_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mem_available(), target);
  }

  // required uint32 buffers = 4;
  if (has_buffers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buffers(), target);
  }

  // required uint32 cached = 5;
  if (has_cached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cached(), target);
  }

  // required uint32 swap_total = 6;
  if (has_swap_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->swap_total(), target);
  }

  // required uint32 swap_free = 7;
  if (has_swap_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->swap_free(), target);
  }

  // optional uint32 hugepagesize = 8;
  if (has_hugepagesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hugepagesize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MemoryUsage)
  return target;
}

int MemoryUsage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mem_total = 1;
    if (has_mem_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem_total());
    }

    // required uint32 mem_free = 2;
    if (has_mem_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem_free());
    }

    // required uint32 mem_available = 3;
    if (has_mem_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mem_available());
    }

    // required uint32 buffers = 4;
    if (has_buffers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffers());
    }

    // required uint32 cached = 5;
    if (has_cached()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cached());
    }

    // required uint32 swap_total = 6;
    if (has_swap_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->swap_total());
    }

    // required uint32 swap_free = 7;
    if (has_swap_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->swap_free());
    }

    // optional uint32 hugepagesize = 8;
    if (has_hugepagesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hugepagesize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryUsage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemoryUsage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemoryUsage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemoryUsage::MergeFrom(const MemoryUsage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mem_total()) {
      set_mem_total(from.mem_total());
    }
    if (from.has_mem_free()) {
      set_mem_free(from.mem_free());
    }
    if (from.has_mem_available()) {
      set_mem_available(from.mem_available());
    }
    if (from.has_buffers()) {
      set_buffers(from.buffers());
    }
    if (from.has_cached()) {
      set_cached(from.cached());
    }
    if (from.has_swap_total()) {
      set_swap_total(from.swap_total());
    }
    if (from.has_swap_free()) {
      set_swap_free(from.swap_free());
    }
    if (from.has_hugepagesize()) {
      set_hugepagesize(from.hugepagesize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemoryUsage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryUsage::CopyFrom(const MemoryUsage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryUsage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void MemoryUsage::Swap(MemoryUsage* other) {
  if (other != this) {
    std::swap(mem_total_, other->mem_total_);
    std::swap(mem_free_, other->mem_free_);
    std::swap(mem_available_, other->mem_available_);
    std::swap(buffers_, other->buffers_);
    std::swap(cached_, other->cached_);
    std::swap(swap_total_, other->swap_total_);
    std::swap(swap_free_, other->swap_free_);
    std::swap(hugepagesize_, other->hugepagesize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemoryUsage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryUsage_descriptor_;
  metadata.reflection = MemoryUsage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiskUsage::kDiskAvailableFieldNumber;
const int DiskUsage::kAvailablePercentFieldNumber;
#endif  // !_MSC_VER

DiskUsage::DiskUsage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DiskUsage)
}

void DiskUsage::InitAsDefaultInstance() {
}

DiskUsage::DiskUsage(const DiskUsage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DiskUsage)
}

void DiskUsage::SharedCtor() {
  _cached_size_ = 0;
  disk_available_ = 0u;
  available_percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiskUsage::~DiskUsage() {
  // @@protoc_insertion_point(destructor:DiskUsage)
  SharedDtor();
}

void DiskUsage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiskUsage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskUsage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskUsage_descriptor_;
}

const DiskUsage& DiskUsage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_runtime_5fresource_2eproto();
  return *default_instance_;
}

DiskUsage* DiskUsage::default_instance_ = NULL;

DiskUsage* DiskUsage::New() const {
  return new DiskUsage;
}

void DiskUsage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DiskUsage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(available_percent_, disk_available_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiskUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DiskUsage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 disk_available = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &disk_available_)));
          set_has_disk_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_available_percent;
        break;
      }

      // required double available_percent = 2;
      case 2: {
        if (tag == 17) {
         parse_available_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &available_percent_)));
          set_has_available_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DiskUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DiskUsage)
  return false;
#undef DO_
}

void DiskUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DiskUsage)
  // required uint32 disk_available = 1;
  if (has_disk_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->disk_available(), output);
  }

  // required double available_percent = 2;
  if (has_available_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->available_percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DiskUsage)
}

::google::protobuf::uint8* DiskUsage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiskUsage)
  // required uint32 disk_available = 1;
  if (has_disk_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->disk_available(), target);
  }

  // required double available_percent = 2;
  if (has_available_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->available_percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiskUsage)
  return target;
}

int DiskUsage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 disk_available = 1;
    if (has_disk_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->disk_available());
    }

    // required double available_percent = 2;
    if (has_available_percent()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskUsage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiskUsage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiskUsage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiskUsage::MergeFrom(const DiskUsage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_disk_available()) {
      set_disk_available(from.disk_available());
    }
    if (from.has_available_percent()) {
      set_available_percent(from.available_percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiskUsage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskUsage::CopyFrom(const DiskUsage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskUsage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DiskUsage::Swap(DiskUsage* other) {
  if (other != this) {
    std::swap(disk_available_, other->disk_available_);
    std::swap(available_percent_, other->available_percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiskUsage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiskUsage_descriptor_;
  metadata.reflection = DiskUsage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetUsage::kNetUsedFieldNumber;
#endif  // !_MSC_VER

NetUsage::NetUsage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NetUsage)
}

void NetUsage::InitAsDefaultInstance() {
}

NetUsage::NetUsage(const NetUsage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NetUsage)
}

void NetUsage::SharedCtor() {
  _cached_size_ = 0;
  net_used_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetUsage::~NetUsage() {
  // @@protoc_insertion_point(destructor:NetUsage)
  SharedDtor();
}

void NetUsage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetUsage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetUsage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetUsage_descriptor_;
}

const NetUsage& NetUsage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_runtime_5fresource_2eproto();
  return *default_instance_;
}

NetUsage* NetUsage::default_instance_ = NULL;

NetUsage* NetUsage::New() const {
  return new NetUsage;
}

void NetUsage::Clear() {
  net_used_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NetUsage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float net_used = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &net_used_)));
          set_has_net_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NetUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NetUsage)
  return false;
#undef DO_
}

void NetUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NetUsage)
  // required float net_used = 1;
  if (has_net_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->net_used(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NetUsage)
}

::google::protobuf::uint8* NetUsage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetUsage)
  // required float net_used = 1;
  if (has_net_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->net_used(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetUsage)
  return target;
}

int NetUsage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float net_used = 1;
    if (has_net_used()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetUsage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetUsage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetUsage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetUsage::MergeFrom(const NetUsage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_net_used()) {
      set_net_used(from.net_used());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetUsage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetUsage::CopyFrom(const NetUsage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetUsage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NetUsage::Swap(NetUsage* other) {
  if (other != this) {
    std::swap(net_used_, other->net_used_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetUsage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetUsage_descriptor_;
  metadata.reflection = NetUsage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
