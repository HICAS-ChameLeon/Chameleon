// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: slave_related.proto

#ifndef PROTOBUF_slave_5frelated_2eproto__INCLUDED
#define PROTOBUF_slave_5frelated_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_slave_5frelated_2eproto();
void protobuf_AssignDesc_slave_5frelated_2eproto();
void protobuf_ShutdownFile_slave_5frelated_2eproto();

class ReregisterMasterMessage;
class BackupMasterMessage;

// ===================================================================

class ReregisterMasterMessage : public ::google::protobuf::Message {
 public:
  ReregisterMasterMessage();
  virtual ~ReregisterMasterMessage();

  ReregisterMasterMessage(const ReregisterMasterMessage& from);

  inline ReregisterMasterMessage& operator=(const ReregisterMasterMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReregisterMasterMessage& default_instance();

  void Swap(ReregisterMasterMessage* other);

  // implements Message ----------------------------------------------

  ReregisterMasterMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReregisterMasterMessage& from);
  void MergeFrom(const ReregisterMasterMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string master_ip = 1;
  inline bool has_master_ip() const;
  inline void clear_master_ip();
  static const int kMasterIpFieldNumber = 1;
  inline const ::std::string& master_ip() const;
  inline void set_master_ip(const ::std::string& value);
  inline void set_master_ip(const char* value);
  inline void set_master_ip(const char* value, size_t size);
  inline ::std::string* mutable_master_ip();
  inline ::std::string* release_master_ip();
  inline void set_allocated_master_ip(::std::string* master_ip);

  // required string port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // required string slave_ip = 3;
  inline bool has_slave_ip() const;
  inline void clear_slave_ip();
  static const int kSlaveIpFieldNumber = 3;
  inline const ::std::string& slave_ip() const;
  inline void set_slave_ip(const ::std::string& value);
  inline void set_slave_ip(const char* value);
  inline void set_slave_ip(const char* value, size_t size);
  inline ::std::string* mutable_slave_ip();
  inline ::std::string* release_slave_ip();
  inline void set_allocated_slave_ip(::std::string* slave_ip);

  // @@protoc_insertion_point(class_scope:ReregisterMasterMessage)
 private:
  inline void set_has_master_ip();
  inline void clear_has_master_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_slave_ip();
  inline void clear_has_slave_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* master_ip_;
  ::std::string* port_;
  ::std::string* slave_ip_;
  friend void  protobuf_AddDesc_slave_5frelated_2eproto();
  friend void protobuf_AssignDesc_slave_5frelated_2eproto();
  friend void protobuf_ShutdownFile_slave_5frelated_2eproto();

  void InitAsDefaultInstance();
  static ReregisterMasterMessage* default_instance_;
};
// -------------------------------------------------------------------

class BackupMasterMessage : public ::google::protobuf::Message {
 public:
  BackupMasterMessage();
  virtual ~BackupMasterMessage();

  BackupMasterMessage(const BackupMasterMessage& from);

  inline BackupMasterMessage& operator=(const BackupMasterMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackupMasterMessage& default_instance();

  void Swap(BackupMasterMessage* other);

  // implements Message ----------------------------------------------

  BackupMasterMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackupMasterMessage& from);
  void MergeFrom(const BackupMasterMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required string port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline const ::std::string& port() const;
  inline void set_port(const ::std::string& value);
  inline void set_port(const char* value);
  inline void set_port(const char* value, size_t size);
  inline ::std::string* mutable_port();
  inline ::std::string* release_port();
  inline void set_allocated_port(::std::string* port);

  // @@protoc_insertion_point(class_scope:BackupMasterMessage)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::std::string* port_;
  friend void  protobuf_AddDesc_slave_5frelated_2eproto();
  friend void protobuf_AssignDesc_slave_5frelated_2eproto();
  friend void protobuf_ShutdownFile_slave_5frelated_2eproto();

  void InitAsDefaultInstance();
  static BackupMasterMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ReregisterMasterMessage

// required string master_ip = 1;
inline bool ReregisterMasterMessage::has_master_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReregisterMasterMessage::set_has_master_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReregisterMasterMessage::clear_has_master_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReregisterMasterMessage::clear_master_ip() {
  if (master_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_->clear();
  }
  clear_has_master_ip();
}
inline const ::std::string& ReregisterMasterMessage::master_ip() const {
  // @@protoc_insertion_point(field_get:ReregisterMasterMessage.master_ip)
  return *master_ip_;
}
inline void ReregisterMasterMessage::set_master_ip(const ::std::string& value) {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  master_ip_->assign(value);
  // @@protoc_insertion_point(field_set:ReregisterMasterMessage.master_ip)
}
inline void ReregisterMasterMessage::set_master_ip(const char* value) {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  master_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:ReregisterMasterMessage.master_ip)
}
inline void ReregisterMasterMessage::set_master_ip(const char* value, size_t size) {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  master_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ReregisterMasterMessage.master_ip)
}
inline ::std::string* ReregisterMasterMessage::mutable_master_ip() {
  set_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    master_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ReregisterMasterMessage.master_ip)
  return master_ip_;
}
inline ::std::string* ReregisterMasterMessage::release_master_ip() {
  clear_has_master_ip();
  if (master_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = master_ip_;
    master_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReregisterMasterMessage::set_allocated_master_ip(::std::string* master_ip) {
  if (master_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_ip_;
  }
  if (master_ip) {
    set_has_master_ip();
    master_ip_ = master_ip;
  } else {
    clear_has_master_ip();
    master_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ReregisterMasterMessage.master_ip)
}

// required string port = 2;
inline bool ReregisterMasterMessage::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReregisterMasterMessage::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReregisterMasterMessage::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReregisterMasterMessage::clear_port() {
  if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& ReregisterMasterMessage::port() const {
  // @@protoc_insertion_point(field_get:ReregisterMasterMessage.port)
  return *port_;
}
inline void ReregisterMasterMessage::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_ = new ::std::string;
  }
  port_->assign(value);
  // @@protoc_insertion_point(field_set:ReregisterMasterMessage.port)
}
inline void ReregisterMasterMessage::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_ = new ::std::string;
  }
  port_->assign(value);
  // @@protoc_insertion_point(field_set_char:ReregisterMasterMessage.port)
}
inline void ReregisterMasterMessage::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ReregisterMasterMessage.port)
}
inline ::std::string* ReregisterMasterMessage::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ReregisterMasterMessage.port)
  return port_;
}
inline ::std::string* ReregisterMasterMessage::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReregisterMasterMessage::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ReregisterMasterMessage.port)
}

// required string slave_ip = 3;
inline bool ReregisterMasterMessage::has_slave_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReregisterMasterMessage::set_has_slave_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReregisterMasterMessage::clear_has_slave_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReregisterMasterMessage::clear_slave_ip() {
  if (slave_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_->clear();
  }
  clear_has_slave_ip();
}
inline const ::std::string& ReregisterMasterMessage::slave_ip() const {
  // @@protoc_insertion_point(field_get:ReregisterMasterMessage.slave_ip)
  return *slave_ip_;
}
inline void ReregisterMasterMessage::set_slave_ip(const ::std::string& value) {
  set_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_ = new ::std::string;
  }
  slave_ip_->assign(value);
  // @@protoc_insertion_point(field_set:ReregisterMasterMessage.slave_ip)
}
inline void ReregisterMasterMessage::set_slave_ip(const char* value) {
  set_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_ = new ::std::string;
  }
  slave_ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:ReregisterMasterMessage.slave_ip)
}
inline void ReregisterMasterMessage::set_slave_ip(const char* value, size_t size) {
  set_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_ = new ::std::string;
  }
  slave_ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ReregisterMasterMessage.slave_ip)
}
inline ::std::string* ReregisterMasterMessage::mutable_slave_ip() {
  set_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    slave_ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ReregisterMasterMessage.slave_ip)
  return slave_ip_;
}
inline ::std::string* ReregisterMasterMessage::release_slave_ip() {
  clear_has_slave_ip();
  if (slave_ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = slave_ip_;
    slave_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReregisterMasterMessage::set_allocated_slave_ip(::std::string* slave_ip) {
  if (slave_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete slave_ip_;
  }
  if (slave_ip) {
    set_has_slave_ip();
    slave_ip_ = slave_ip;
  } else {
    clear_has_slave_ip();
    slave_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ReregisterMasterMessage.slave_ip)
}

// -------------------------------------------------------------------

// BackupMasterMessage

// required string ip = 1;
inline bool BackupMasterMessage::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackupMasterMessage::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackupMasterMessage::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackupMasterMessage::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& BackupMasterMessage::ip() const {
  // @@protoc_insertion_point(field_get:BackupMasterMessage.ip)
  return *ip_;
}
inline void BackupMasterMessage::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:BackupMasterMessage.ip)
}
inline void BackupMasterMessage::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:BackupMasterMessage.ip)
}
inline void BackupMasterMessage::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BackupMasterMessage.ip)
}
inline ::std::string* BackupMasterMessage::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BackupMasterMessage.ip)
  return ip_;
}
inline ::std::string* BackupMasterMessage::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BackupMasterMessage::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BackupMasterMessage.ip)
}

// required string port = 2;
inline bool BackupMasterMessage::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BackupMasterMessage::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BackupMasterMessage::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BackupMasterMessage::clear_port() {
  if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& BackupMasterMessage::port() const {
  // @@protoc_insertion_point(field_get:BackupMasterMessage.port)
  return *port_;
}
inline void BackupMasterMessage::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_ = new ::std::string;
  }
  port_->assign(value);
  // @@protoc_insertion_point(field_set:BackupMasterMessage.port)
}
inline void BackupMasterMessage::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_ = new ::std::string;
  }
  port_->assign(value);
  // @@protoc_insertion_point(field_set_char:BackupMasterMessage.port)
}
inline void BackupMasterMessage::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BackupMasterMessage.port)
}
inline ::std::string* BackupMasterMessage::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    port_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BackupMasterMessage.port)
  return port_;
}
inline ::std::string* BackupMasterMessage::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BackupMasterMessage::set_allocated_port(::std::string* port) {
  if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete port_;
  }
  if (port) {
    set_has_port();
    port_ = port;
  } else {
    clear_has_port();
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BackupMasterMessage.port)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_slave_5frelated_2eproto__INCLUDED
