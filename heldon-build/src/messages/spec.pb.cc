// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spec.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace appc {
namespace spec {

namespace {

const ::google::protobuf::Descriptor* ImageManifest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageManifest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageManifest_Label_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageManifest_Label_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageManifest_Environment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageManifest_Environment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageManifest_App_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageManifest_App_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageManifest_Annotation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageManifest_Annotation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageManifest_Dependency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageManifest_Dependency_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_spec_2eproto() {
  protobuf_AddDesc_spec_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "spec.proto");
  GOOGLE_CHECK(file != NULL);
  ImageManifest_descriptor_ = file->message_type(0);
  static const int ImageManifest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, ackind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, acversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, annotations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, dependencies_),
  };
  ImageManifest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageManifest_descriptor_,
      ImageManifest::default_instance_,
      ImageManifest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageManifest));
  ImageManifest_Label_descriptor_ = ImageManifest_descriptor_->nested_type(0);
  static const int ImageManifest_Label_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Label, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Label, value_),
  };
  ImageManifest_Label_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageManifest_Label_descriptor_,
      ImageManifest_Label::default_instance_,
      ImageManifest_Label_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Label, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Label, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageManifest_Label));
  ImageManifest_Environment_descriptor_ = ImageManifest_descriptor_->nested_type(1);
  static const int ImageManifest_Environment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Environment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Environment, value_),
  };
  ImageManifest_Environment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageManifest_Environment_descriptor_,
      ImageManifest_Environment::default_instance_,
      ImageManifest_Environment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Environment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Environment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageManifest_Environment));
  ImageManifest_App_descriptor_ = ImageManifest_descriptor_->nested_type(2);
  static const int ImageManifest_App_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_App, exec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_App, workingdirectory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_App, environment_),
  };
  ImageManifest_App_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageManifest_App_descriptor_,
      ImageManifest_App::default_instance_,
      ImageManifest_App_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_App, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_App, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageManifest_App));
  ImageManifest_Annotation_descriptor_ = ImageManifest_descriptor_->nested_type(3);
  static const int ImageManifest_Annotation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Annotation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Annotation, value_),
  };
  ImageManifest_Annotation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageManifest_Annotation_descriptor_,
      ImageManifest_Annotation::default_instance_,
      ImageManifest_Annotation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Annotation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Annotation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageManifest_Annotation));
  ImageManifest_Dependency_descriptor_ = ImageManifest_descriptor_->nested_type(4);
  static const int ImageManifest_Dependency_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Dependency, imagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Dependency, imageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Dependency, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Dependency, size_),
  };
  ImageManifest_Dependency_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageManifest_Dependency_descriptor_,
      ImageManifest_Dependency::default_instance_,
      ImageManifest_Dependency_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Dependency, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Dependency, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageManifest_Dependency));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_spec_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageManifest_descriptor_, &ImageManifest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageManifest_Label_descriptor_, &ImageManifest_Label::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageManifest_Environment_descriptor_, &ImageManifest_Environment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageManifest_App_descriptor_, &ImageManifest_App::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageManifest_Annotation_descriptor_, &ImageManifest_Annotation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageManifest_Dependency_descriptor_, &ImageManifest_Dependency::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_spec_2eproto() {
  delete ImageManifest::default_instance_;
  delete ImageManifest_reflection_;
  delete ImageManifest_Label::default_instance_;
  delete ImageManifest_Label_reflection_;
  delete ImageManifest_Environment::default_instance_;
  delete ImageManifest_Environment_reflection_;
  delete ImageManifest_App::default_instance_;
  delete ImageManifest_App_reflection_;
  delete ImageManifest_Annotation::default_instance_;
  delete ImageManifest_Annotation_reflection_;
  delete ImageManifest_Dependency::default_instance_;
  delete ImageManifest_Dependency_reflection_;
}

void protobuf_AddDesc_spec_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nspec.proto\022\tappc.spec\"\347\004\n\rImageManifes"
    "t\022\016\n\006acKind\030\001 \002(\t\022\021\n\tacVersion\030\002 \002(\t\022\014\n\004"
    "name\030\003 \002(\t\022.\n\006labels\030\004 \003(\0132\036.appc.spec.I"
    "mageManifest.Label\022)\n\003app\030\007 \001(\0132\034.appc.s"
    "pec.ImageManifest.App\0228\n\013annotations\030\005 \003"
    "(\0132#.appc.spec.ImageManifest.Annotation\022"
    "9\n\014dependencies\030\006 \003(\0132#.appc.spec.ImageM"
    "anifest.Dependency\032$\n\005Label\022\014\n\004name\030\001 \002("
    "\t\022\r\n\005value\030\002 \002(\t\032*\n\013Environment\022\014\n\004name\030"
    "\001 \002(\t\022\r\n\005value\030\002 \002(\t\032h\n\003App\022\014\n\004exec\030\001 \003("
    "\t\022\030\n\020workingDirectory\030\002 \001(\t\0229\n\013environme"
    "nt\030\003 \003(\0132$.appc.spec.ImageManifest.Envir"
    "onment\032)\n\nAnnotation\022\014\n\004name\030\001 \002(\t\022\r\n\005va"
    "lue\030\002 \002(\t\032n\n\nDependency\022\021\n\timageName\030\001 \002"
    "(\t\022\017\n\007imageID\030\002 \001(\t\022.\n\006labels\030\003 \003(\0132\036.ap"
    "pc.spec.ImageManifest.Label\022\014\n\004size\030\004 \001("
    "\004", 641);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spec.proto", &protobuf_RegisterTypes);
  ImageManifest::default_instance_ = new ImageManifest();
  ImageManifest_Label::default_instance_ = new ImageManifest_Label();
  ImageManifest_Environment::default_instance_ = new ImageManifest_Environment();
  ImageManifest_App::default_instance_ = new ImageManifest_App();
  ImageManifest_Annotation::default_instance_ = new ImageManifest_Annotation();
  ImageManifest_Dependency::default_instance_ = new ImageManifest_Dependency();
  ImageManifest::default_instance_->InitAsDefaultInstance();
  ImageManifest_Label::default_instance_->InitAsDefaultInstance();
  ImageManifest_Environment::default_instance_->InitAsDefaultInstance();
  ImageManifest_App::default_instance_->InitAsDefaultInstance();
  ImageManifest_Annotation::default_instance_->InitAsDefaultInstance();
  ImageManifest_Dependency::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_spec_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_spec_2eproto {
  StaticDescriptorInitializer_spec_2eproto() {
    protobuf_AddDesc_spec_2eproto();
  }
} static_descriptor_initializer_spec_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ImageManifest_Label::kNameFieldNumber;
const int ImageManifest_Label::kValueFieldNumber;
#endif  // !_MSC_VER

ImageManifest_Label::ImageManifest_Label()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:appc.spec.ImageManifest.Label)
}

void ImageManifest_Label::InitAsDefaultInstance() {
}

ImageManifest_Label::ImageManifest_Label(const ImageManifest_Label& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:appc.spec.ImageManifest.Label)
}

void ImageManifest_Label::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageManifest_Label::~ImageManifest_Label() {
  // @@protoc_insertion_point(destructor:appc.spec.ImageManifest.Label)
  SharedDtor();
}

void ImageManifest_Label::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ImageManifest_Label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageManifest_Label::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageManifest_Label_descriptor_;
}

const ImageManifest_Label& ImageManifest_Label::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spec_2eproto();
  return *default_instance_;
}

ImageManifest_Label* ImageManifest_Label::default_instance_ = NULL;

ImageManifest_Label* ImageManifest_Label::New() const {
  return new ImageManifest_Label;
}

void ImageManifest_Label::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageManifest_Label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:appc.spec.ImageManifest.Label)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:appc.spec.ImageManifest.Label)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:appc.spec.ImageManifest.Label)
  return false;
#undef DO_
}

void ImageManifest_Label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:appc.spec.ImageManifest.Label)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:appc.spec.ImageManifest.Label)
}

::google::protobuf::uint8* ImageManifest_Label::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:appc.spec.ImageManifest.Label)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appc.spec.ImageManifest.Label)
  return target;
}

int ImageManifest_Label::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageManifest_Label::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageManifest_Label* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageManifest_Label*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageManifest_Label::MergeFrom(const ImageManifest_Label& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageManifest_Label::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageManifest_Label::CopyFrom(const ImageManifest_Label& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageManifest_Label::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ImageManifest_Label::Swap(ImageManifest_Label* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageManifest_Label::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageManifest_Label_descriptor_;
  metadata.reflection = ImageManifest_Label_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ImageManifest_Environment::kNameFieldNumber;
const int ImageManifest_Environment::kValueFieldNumber;
#endif  // !_MSC_VER

ImageManifest_Environment::ImageManifest_Environment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:appc.spec.ImageManifest.Environment)
}

void ImageManifest_Environment::InitAsDefaultInstance() {
}

ImageManifest_Environment::ImageManifest_Environment(const ImageManifest_Environment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:appc.spec.ImageManifest.Environment)
}

void ImageManifest_Environment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageManifest_Environment::~ImageManifest_Environment() {
  // @@protoc_insertion_point(destructor:appc.spec.ImageManifest.Environment)
  SharedDtor();
}

void ImageManifest_Environment::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ImageManifest_Environment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageManifest_Environment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageManifest_Environment_descriptor_;
}

const ImageManifest_Environment& ImageManifest_Environment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spec_2eproto();
  return *default_instance_;
}

ImageManifest_Environment* ImageManifest_Environment::default_instance_ = NULL;

ImageManifest_Environment* ImageManifest_Environment::New() const {
  return new ImageManifest_Environment;
}

void ImageManifest_Environment::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageManifest_Environment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:appc.spec.ImageManifest.Environment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:appc.spec.ImageManifest.Environment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:appc.spec.ImageManifest.Environment)
  return false;
#undef DO_
}

void ImageManifest_Environment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:appc.spec.ImageManifest.Environment)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:appc.spec.ImageManifest.Environment)
}

::google::protobuf::uint8* ImageManifest_Environment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:appc.spec.ImageManifest.Environment)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appc.spec.ImageManifest.Environment)
  return target;
}

int ImageManifest_Environment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageManifest_Environment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageManifest_Environment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageManifest_Environment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageManifest_Environment::MergeFrom(const ImageManifest_Environment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageManifest_Environment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageManifest_Environment::CopyFrom(const ImageManifest_Environment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageManifest_Environment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ImageManifest_Environment::Swap(ImageManifest_Environment* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageManifest_Environment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageManifest_Environment_descriptor_;
  metadata.reflection = ImageManifest_Environment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ImageManifest_App::kExecFieldNumber;
const int ImageManifest_App::kWorkingDirectoryFieldNumber;
const int ImageManifest_App::kEnvironmentFieldNumber;
#endif  // !_MSC_VER

ImageManifest_App::ImageManifest_App()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:appc.spec.ImageManifest.App)
}

void ImageManifest_App::InitAsDefaultInstance() {
}

ImageManifest_App::ImageManifest_App(const ImageManifest_App& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:appc.spec.ImageManifest.App)
}

void ImageManifest_App::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  workingdirectory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageManifest_App::~ImageManifest_App() {
  // @@protoc_insertion_point(destructor:appc.spec.ImageManifest.App)
  SharedDtor();
}

void ImageManifest_App::SharedDtor() {
  if (workingdirectory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete workingdirectory_;
  }
  if (this != default_instance_) {
  }
}

void ImageManifest_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageManifest_App::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageManifest_App_descriptor_;
}

const ImageManifest_App& ImageManifest_App::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spec_2eproto();
  return *default_instance_;
}

ImageManifest_App* ImageManifest_App::default_instance_ = NULL;

ImageManifest_App* ImageManifest_App::New() const {
  return new ImageManifest_App;
}

void ImageManifest_App::Clear() {
  if (has_workingdirectory()) {
    if (workingdirectory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      workingdirectory_->clear();
    }
  }
  exec_.Clear();
  environment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageManifest_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:appc.spec.ImageManifest.App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string exec = 1;
      case 1: {
        if (tag == 10) {
         parse_exec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exec(this->exec_size() - 1).data(),
            this->exec(this->exec_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_exec;
        if (input->ExpectTag(18)) goto parse_workingDirectory;
        break;
      }

      // optional string workingDirectory = 2;
      case 2: {
        if (tag == 18) {
         parse_workingDirectory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workingdirectory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->workingdirectory().data(), this->workingdirectory().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "workingdirectory");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_environment;
        break;
      }

      // repeated .appc.spec.ImageManifest.Environment environment = 3;
      case 3: {
        if (tag == 26) {
         parse_environment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_environment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_environment;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:appc.spec.ImageManifest.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:appc.spec.ImageManifest.App)
  return false;
#undef DO_
}

void ImageManifest_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:appc.spec.ImageManifest.App)
  // repeated string exec = 1;
  for (int i = 0; i < this->exec_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->exec(i).data(), this->exec(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "exec");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->exec(i), output);
  }

  // optional string workingDirectory = 2;
  if (has_workingdirectory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workingdirectory().data(), this->workingdirectory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "workingdirectory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->workingdirectory(), output);
  }

  // repeated .appc.spec.ImageManifest.Environment environment = 3;
  for (int i = 0; i < this->environment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->environment(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:appc.spec.ImageManifest.App)
}

::google::protobuf::uint8* ImageManifest_App::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:appc.spec.ImageManifest.App)
  // repeated string exec = 1;
  for (int i = 0; i < this->exec_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exec(i).data(), this->exec(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->exec(i), target);
  }

  // optional string workingDirectory = 2;
  if (has_workingdirectory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workingdirectory().data(), this->workingdirectory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "workingdirectory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->workingdirectory(), target);
  }

  // repeated .appc.spec.ImageManifest.Environment environment = 3;
  for (int i = 0; i < this->environment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->environment(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appc.spec.ImageManifest.App)
  return target;
}

int ImageManifest_App::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string workingDirectory = 2;
    if (has_workingdirectory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->workingdirectory());
    }

  }
  // repeated string exec = 1;
  total_size += 1 * this->exec_size();
  for (int i = 0; i < this->exec_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exec(i));
  }

  // repeated .appc.spec.ImageManifest.Environment environment = 3;
  total_size += 1 * this->environment_size();
  for (int i = 0; i < this->environment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->environment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageManifest_App::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageManifest_App* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageManifest_App*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageManifest_App::MergeFrom(const ImageManifest_App& from) {
  GOOGLE_CHECK_NE(&from, this);
  exec_.MergeFrom(from.exec_);
  environment_.MergeFrom(from.environment_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_workingdirectory()) {
      set_workingdirectory(from.workingdirectory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageManifest_App::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageManifest_App::CopyFrom(const ImageManifest_App& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageManifest_App::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->environment())) return false;
  return true;
}

void ImageManifest_App::Swap(ImageManifest_App* other) {
  if (other != this) {
    exec_.Swap(&other->exec_);
    std::swap(workingdirectory_, other->workingdirectory_);
    environment_.Swap(&other->environment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageManifest_App::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageManifest_App_descriptor_;
  metadata.reflection = ImageManifest_App_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ImageManifest_Annotation::kNameFieldNumber;
const int ImageManifest_Annotation::kValueFieldNumber;
#endif  // !_MSC_VER

ImageManifest_Annotation::ImageManifest_Annotation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:appc.spec.ImageManifest.Annotation)
}

void ImageManifest_Annotation::InitAsDefaultInstance() {
}

ImageManifest_Annotation::ImageManifest_Annotation(const ImageManifest_Annotation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:appc.spec.ImageManifest.Annotation)
}

void ImageManifest_Annotation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageManifest_Annotation::~ImageManifest_Annotation() {
  // @@protoc_insertion_point(destructor:appc.spec.ImageManifest.Annotation)
  SharedDtor();
}

void ImageManifest_Annotation::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ImageManifest_Annotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageManifest_Annotation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageManifest_Annotation_descriptor_;
}

const ImageManifest_Annotation& ImageManifest_Annotation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spec_2eproto();
  return *default_instance_;
}

ImageManifest_Annotation* ImageManifest_Annotation::default_instance_ = NULL;

ImageManifest_Annotation* ImageManifest_Annotation::New() const {
  return new ImageManifest_Annotation;
}

void ImageManifest_Annotation::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageManifest_Annotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:appc.spec.ImageManifest.Annotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:appc.spec.ImageManifest.Annotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:appc.spec.ImageManifest.Annotation)
  return false;
#undef DO_
}

void ImageManifest_Annotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:appc.spec.ImageManifest.Annotation)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:appc.spec.ImageManifest.Annotation)
}

::google::protobuf::uint8* ImageManifest_Annotation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:appc.spec.ImageManifest.Annotation)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appc.spec.ImageManifest.Annotation)
  return target;
}

int ImageManifest_Annotation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageManifest_Annotation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageManifest_Annotation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageManifest_Annotation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageManifest_Annotation::MergeFrom(const ImageManifest_Annotation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageManifest_Annotation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageManifest_Annotation::CopyFrom(const ImageManifest_Annotation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageManifest_Annotation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ImageManifest_Annotation::Swap(ImageManifest_Annotation* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageManifest_Annotation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageManifest_Annotation_descriptor_;
  metadata.reflection = ImageManifest_Annotation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ImageManifest_Dependency::kImageNameFieldNumber;
const int ImageManifest_Dependency::kImageIDFieldNumber;
const int ImageManifest_Dependency::kLabelsFieldNumber;
const int ImageManifest_Dependency::kSizeFieldNumber;
#endif  // !_MSC_VER

ImageManifest_Dependency::ImageManifest_Dependency()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:appc.spec.ImageManifest.Dependency)
}

void ImageManifest_Dependency::InitAsDefaultInstance() {
}

ImageManifest_Dependency::ImageManifest_Dependency(const ImageManifest_Dependency& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:appc.spec.ImageManifest.Dependency)
}

void ImageManifest_Dependency::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  imagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageManifest_Dependency::~ImageManifest_Dependency() {
  // @@protoc_insertion_point(destructor:appc.spec.ImageManifest.Dependency)
  SharedDtor();
}

void ImageManifest_Dependency::SharedDtor() {
  if (imagename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagename_;
  }
  if (imageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imageid_;
  }
  if (this != default_instance_) {
  }
}

void ImageManifest_Dependency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageManifest_Dependency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageManifest_Dependency_descriptor_;
}

const ImageManifest_Dependency& ImageManifest_Dependency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spec_2eproto();
  return *default_instance_;
}

ImageManifest_Dependency* ImageManifest_Dependency::default_instance_ = NULL;

ImageManifest_Dependency* ImageManifest_Dependency::New() const {
  return new ImageManifest_Dependency;
}

void ImageManifest_Dependency::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_imagename()) {
      if (imagename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imagename_->clear();
      }
    }
    if (has_imageid()) {
      if (imageid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imageid_->clear();
      }
    }
    size_ = GOOGLE_ULONGLONG(0);
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageManifest_Dependency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:appc.spec.ImageManifest.Dependency)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string imageName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imagename().data(), this->imagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imagename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_imageID;
        break;
      }

      // optional string imageID = 2;
      case 2: {
        if (tag == 18) {
         parse_imageID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imageid().data(), this->imageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imageid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_labels;
        break;
      }

      // repeated .appc.spec.ImageManifest.Label labels = 3;
      case 3: {
        if (tag == 26) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_labels;
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional uint64 size = 4;
      case 4: {
        if (tag == 32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:appc.spec.ImageManifest.Dependency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:appc.spec.ImageManifest.Dependency)
  return false;
#undef DO_
}

void ImageManifest_Dependency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:appc.spec.ImageManifest.Dependency)
  // required string imageName = 1;
  if (has_imagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagename().data(), this->imagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imagename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->imagename(), output);
  }

  // optional string imageID = 2;
  if (has_imageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imageid().data(), this->imageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imageid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->imageid(), output);
  }

  // repeated .appc.spec.ImageManifest.Label labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->labels(i), output);
  }

  // optional uint64 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:appc.spec.ImageManifest.Dependency)
}

::google::protobuf::uint8* ImageManifest_Dependency::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:appc.spec.ImageManifest.Dependency)
  // required string imageName = 1;
  if (has_imagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imagename().data(), this->imagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imagename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->imagename(), target);
  }

  // optional string imageID = 2;
  if (has_imageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imageid().data(), this->imageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imageid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->imageid(), target);
  }

  // repeated .appc.spec.ImageManifest.Label labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->labels(i), target);
  }

  // optional uint64 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appc.spec.ImageManifest.Dependency)
  return target;
}

int ImageManifest_Dependency::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string imageName = 1;
    if (has_imagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagename());
    }

    // optional string imageID = 2;
    if (has_imageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imageid());
    }

    // optional uint64 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

  }
  // repeated .appc.spec.ImageManifest.Label labels = 3;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageManifest_Dependency::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageManifest_Dependency* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageManifest_Dependency*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageManifest_Dependency::MergeFrom(const ImageManifest_Dependency& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imagename()) {
      set_imagename(from.imagename());
    }
    if (from.has_imageid()) {
      set_imageid(from.imageid());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageManifest_Dependency::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageManifest_Dependency::CopyFrom(const ImageManifest_Dependency& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageManifest_Dependency::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->labels())) return false;
  return true;
}

void ImageManifest_Dependency::Swap(ImageManifest_Dependency* other) {
  if (other != this) {
    std::swap(imagename_, other->imagename_);
    std::swap(imageid_, other->imageid_);
    labels_.Swap(&other->labels_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageManifest_Dependency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageManifest_Dependency_descriptor_;
  metadata.reflection = ImageManifest_Dependency_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ImageManifest::kAcKindFieldNumber;
const int ImageManifest::kAcVersionFieldNumber;
const int ImageManifest::kNameFieldNumber;
const int ImageManifest::kLabelsFieldNumber;
const int ImageManifest::kAppFieldNumber;
const int ImageManifest::kAnnotationsFieldNumber;
const int ImageManifest::kDependenciesFieldNumber;
#endif  // !_MSC_VER

ImageManifest::ImageManifest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:appc.spec.ImageManifest)
}

void ImageManifest::InitAsDefaultInstance() {
  app_ = const_cast< ::appc::spec::ImageManifest_App*>(&::appc::spec::ImageManifest_App::default_instance());
}

ImageManifest::ImageManifest(const ImageManifest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:appc.spec.ImageManifest)
}

void ImageManifest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ackind_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageManifest::~ImageManifest() {
  // @@protoc_insertion_point(destructor:appc.spec.ImageManifest)
  SharedDtor();
}

void ImageManifest::SharedDtor() {
  if (ackind_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ackind_;
  }
  if (acversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acversion_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete app_;
  }
}

void ImageManifest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageManifest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageManifest_descriptor_;
}

const ImageManifest& ImageManifest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spec_2eproto();
  return *default_instance_;
}

ImageManifest* ImageManifest::default_instance_ = NULL;

ImageManifest* ImageManifest::New() const {
  return new ImageManifest;
}

void ImageManifest::Clear() {
  if (_has_bits_[0 / 32] & 23) {
    if (has_ackind()) {
      if (ackind_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ackind_->clear();
      }
    }
    if (has_acversion()) {
      if (acversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        acversion_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_app()) {
      if (app_ != NULL) app_->::appc::spec::ImageManifest_App::Clear();
    }
  }
  labels_.Clear();
  annotations_.Clear();
  dependencies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageManifest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:appc.spec.ImageManifest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string acKind = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ackind()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ackind().data(), this->ackind().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ackind");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_acVersion;
        break;
      }

      // required string acVersion = 2;
      case 2: {
        if (tag == 18) {
         parse_acVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acversion().data(), this->acversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acversion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_labels;
        break;
      }

      // repeated .appc.spec.ImageManifest.Label labels = 4;
      case 4: {
        if (tag == 34) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_labels;
        if (input->ExpectTag(42)) goto parse_annotations;
        break;
      }

      // repeated .appc.spec.ImageManifest.Annotation annotations = 5;
      case 5: {
        if (tag == 42) {
         parse_annotations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_annotations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_annotations;
        if (input->ExpectTag(50)) goto parse_dependencies;
        break;
      }

      // repeated .appc.spec.ImageManifest.Dependency dependencies = 6;
      case 6: {
        if (tag == 50) {
         parse_dependencies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dependencies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dependencies;
        if (input->ExpectTag(58)) goto parse_app;
        break;
      }

      // optional .appc.spec.ImageManifest.App app = 7;
      case 7: {
        if (tag == 58) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:appc.spec.ImageManifest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:appc.spec.ImageManifest)
  return false;
#undef DO_
}

void ImageManifest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:appc.spec.ImageManifest)
  // required string acKind = 1;
  if (has_ackind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ackind().data(), this->ackind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ackind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ackind(), output);
  }

  // required string acVersion = 2;
  if (has_acversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acversion().data(), this->acversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->acversion(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .appc.spec.ImageManifest.Label labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->labels(i), output);
  }

  // repeated .appc.spec.ImageManifest.Annotation annotations = 5;
  for (int i = 0; i < this->annotations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->annotations(i), output);
  }

  // repeated .appc.spec.ImageManifest.Dependency dependencies = 6;
  for (int i = 0; i < this->dependencies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dependencies(i), output);
  }

  // optional .appc.spec.ImageManifest.App app = 7;
  if (has_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->app(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:appc.spec.ImageManifest)
}

::google::protobuf::uint8* ImageManifest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:appc.spec.ImageManifest)
  // required string acKind = 1;
  if (has_ackind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ackind().data(), this->ackind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ackind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ackind(), target);
  }

  // required string acVersion = 2;
  if (has_acversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acversion().data(), this->acversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acversion(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .appc.spec.ImageManifest.Label labels = 4;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->labels(i), target);
  }

  // repeated .appc.spec.ImageManifest.Annotation annotations = 5;
  for (int i = 0; i < this->annotations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->annotations(i), target);
  }

  // repeated .appc.spec.ImageManifest.Dependency dependencies = 6;
  for (int i = 0; i < this->dependencies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dependencies(i), target);
  }

  // optional .appc.spec.ImageManifest.App app = 7;
  if (has_app()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->app(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:appc.spec.ImageManifest)
  return target;
}

int ImageManifest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string acKind = 1;
    if (has_ackind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ackind());
    }

    // required string acVersion = 2;
    if (has_acversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acversion());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .appc.spec.ImageManifest.App app = 7;
    if (has_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->app());
    }

  }
  // repeated .appc.spec.ImageManifest.Label labels = 4;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  // repeated .appc.spec.ImageManifest.Annotation annotations = 5;
  total_size += 1 * this->annotations_size();
  for (int i = 0; i < this->annotations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->annotations(i));
  }

  // repeated .appc.spec.ImageManifest.Dependency dependencies = 6;
  total_size += 1 * this->dependencies_size();
  for (int i = 0; i < this->dependencies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dependencies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageManifest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageManifest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageManifest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageManifest::MergeFrom(const ImageManifest& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  dependencies_.MergeFrom(from.dependencies_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ackind()) {
      set_ackind(from.ackind());
    }
    if (from.has_acversion()) {
      set_acversion(from.acversion());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_app()) {
      mutable_app()->::appc::spec::ImageManifest_App::MergeFrom(from.app());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageManifest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageManifest::CopyFrom(const ImageManifest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageManifest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->labels())) return false;
  if (has_app()) {
    if (!this->app().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->annotations())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dependencies())) return false;
  return true;
}

void ImageManifest::Swap(ImageManifest* other) {
  if (other != this) {
    std::swap(ackind_, other->ackind_);
    std::swap(acversion_, other->acversion_);
    std::swap(name_, other->name_);
    labels_.Swap(&other->labels_);
    std::swap(app_, other->app_);
    annotations_.Swap(&other->annotations_);
    dependencies_.Swap(&other->dependencies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageManifest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageManifest_descriptor_;
  metadata.reflection = ImageManifest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace spec
}  // namespace appc

// @@protoc_insertion_point(global_scope)
