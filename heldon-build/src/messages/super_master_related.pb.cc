// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: super_master_related.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "super_master_related.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ChameleonMasterINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChameleonMasterINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterRegisteredMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterRegisteredMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MasterRegisteredMessage_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SlavesInfoControlledByMaster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlavesInfoControlledByMaster_reflection_ = NULL;
const ::google::protobuf::Descriptor* MasterInfoControlledBySuperMaster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MasterInfoControlledBySuperMaster_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperMasterControlMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperMasterControlMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptRegisteredMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptRegisteredMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AcceptRegisteredMessage_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SlaveInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlaveInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OwnedSlavesMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OwnedSlavesMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TerminatingMasterMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TerminatingMasterMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdministeredSlavesMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdministeredSlavesMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaunchMasterMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaunchMasterMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_super_5fmaster_5frelated_2eproto() {
  protobuf_AddDesc_super_5fmaster_5frelated_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "super_master_related.proto");
  GOOGLE_CHECK(file != NULL);
  ChameleonMasterINFO_descriptor_ = file->message_type(0);
  static const int ChameleonMasterINFO_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChameleonMasterINFO, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChameleonMasterINFO, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChameleonMasterINFO, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChameleonMasterINFO, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChameleonMasterINFO, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChameleonMasterINFO, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChameleonMasterINFO, address_),
  };
  ChameleonMasterINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChameleonMasterINFO_descriptor_,
      ChameleonMasterINFO::default_instance_,
      ChameleonMasterINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChameleonMasterINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChameleonMasterINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChameleonMasterINFO));
  Address_descriptor_ = file->message_type(1);
  static const int Address_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, port_),
  };
  Address_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Address_descriptor_,
      Address::default_instance_,
      Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Address));
  MasterRegisteredMessage_descriptor_ = file->message_type(2);
  static const int MasterRegisteredMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterRegisteredMessage, master_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterRegisteredMessage, master_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterRegisteredMessage, status_),
  };
  MasterRegisteredMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterRegisteredMessage_descriptor_,
      MasterRegisteredMessage::default_instance_,
      MasterRegisteredMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterRegisteredMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterRegisteredMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterRegisteredMessage));
  MasterRegisteredMessage_Status_descriptor_ = MasterRegisteredMessage_descriptor_->enum_type(0);
  SlavesInfoControlledByMaster_descriptor_ = file->message_type(3);
  static const int SlavesInfoControlledByMaster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlavesInfoControlledByMaster, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlavesInfoControlledByMaster, port_),
  };
  SlavesInfoControlledByMaster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlavesInfoControlledByMaster_descriptor_,
      SlavesInfoControlledByMaster::default_instance_,
      SlavesInfoControlledByMaster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlavesInfoControlledByMaster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlavesInfoControlledByMaster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlavesInfoControlledByMaster));
  MasterInfoControlledBySuperMaster_descriptor_ = file->message_type(4);
  static const int MasterInfoControlledBySuperMaster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterInfoControlledBySuperMaster, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterInfoControlledBySuperMaster, port_),
  };
  MasterInfoControlledBySuperMaster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MasterInfoControlledBySuperMaster_descriptor_,
      MasterInfoControlledBySuperMaster::default_instance_,
      MasterInfoControlledBySuperMaster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterInfoControlledBySuperMaster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MasterInfoControlledBySuperMaster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MasterInfoControlledBySuperMaster));
  SuperMasterControlMessage_descriptor_ = file->message_type(5);
  static const int SuperMasterControlMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperMasterControlMessage, super_master_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperMasterControlMessage, super_master_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperMasterControlMessage, passive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperMasterControlMessage, my_slaves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperMasterControlMessage, my_master_),
  };
  SuperMasterControlMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperMasterControlMessage_descriptor_,
      SuperMasterControlMessage::default_instance_,
      SuperMasterControlMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperMasterControlMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperMasterControlMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperMasterControlMessage));
  AcceptRegisteredMessage_descriptor_ = file->message_type(6);
  static const int AcceptRegisteredMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptRegisteredMessage, master_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptRegisteredMessage, status_),
  };
  AcceptRegisteredMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptRegisteredMessage_descriptor_,
      AcceptRegisteredMessage::default_instance_,
      AcceptRegisteredMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptRegisteredMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptRegisteredMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptRegisteredMessage));
  AcceptRegisteredMessage_Status_descriptor_ = AcceptRegisteredMessage_descriptor_->enum_type(0);
  SlaveInfo_descriptor_ = file->message_type(7);
  static const int SlaveInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, hardware_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, runtime_resources_),
  };
  SlaveInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlaveInfo_descriptor_,
      SlaveInfo::default_instance_,
      SlaveInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlaveInfo));
  OwnedSlavesMessage_descriptor_ = file->message_type(8);
  static const int OwnedSlavesMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnedSlavesMessage, slave_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnedSlavesMessage, quantity_),
  };
  OwnedSlavesMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OwnedSlavesMessage_descriptor_,
      OwnedSlavesMessage::default_instance_,
      OwnedSlavesMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnedSlavesMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OwnedSlavesMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OwnedSlavesMessage));
  TerminatingMasterMessage_descriptor_ = file->message_type(9);
  static const int TerminatingMasterMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminatingMasterMessage, master_id_),
  };
  TerminatingMasterMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TerminatingMasterMessage_descriptor_,
      TerminatingMasterMessage::default_instance_,
      TerminatingMasterMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminatingMasterMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminatingMasterMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TerminatingMasterMessage));
  AdministeredSlavesMessage_descriptor_ = file->message_type(10);
  static const int AdministeredSlavesMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministeredSlavesMessage, master_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministeredSlavesMessage, master_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministeredSlavesMessage, super_master_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministeredSlavesMessage, my_slaves_),
  };
  AdministeredSlavesMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdministeredSlavesMessage_descriptor_,
      AdministeredSlavesMessage::default_instance_,
      AdministeredSlavesMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministeredSlavesMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdministeredSlavesMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdministeredSlavesMessage));
  LaunchMasterMessage_descriptor_ = file->message_type(11);
  static const int LaunchMasterMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaunchMasterMessage, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaunchMasterMessage, master_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaunchMasterMessage, webui_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaunchMasterMessage, is_fault_tolerance_),
  };
  LaunchMasterMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LaunchMasterMessage_descriptor_,
      LaunchMasterMessage::default_instance_,
      LaunchMasterMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaunchMasterMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaunchMasterMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LaunchMasterMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_super_5fmaster_5frelated_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChameleonMasterINFO_descriptor_, &ChameleonMasterINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Address_descriptor_, &Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterRegisteredMessage_descriptor_, &MasterRegisteredMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlavesInfoControlledByMaster_descriptor_, &SlavesInfoControlledByMaster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MasterInfoControlledBySuperMaster_descriptor_, &MasterInfoControlledBySuperMaster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperMasterControlMessage_descriptor_, &SuperMasterControlMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptRegisteredMessage_descriptor_, &AcceptRegisteredMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlaveInfo_descriptor_, &SlaveInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OwnedSlavesMessage_descriptor_, &OwnedSlavesMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TerminatingMasterMessage_descriptor_, &TerminatingMasterMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdministeredSlavesMessage_descriptor_, &AdministeredSlavesMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LaunchMasterMessage_descriptor_, &LaunchMasterMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_super_5fmaster_5frelated_2eproto() {
  delete ChameleonMasterINFO::default_instance_;
  delete ChameleonMasterINFO_reflection_;
  delete Address::default_instance_;
  delete Address_reflection_;
  delete MasterRegisteredMessage::default_instance_;
  delete MasterRegisteredMessage_reflection_;
  delete SlavesInfoControlledByMaster::default_instance_;
  delete SlavesInfoControlledByMaster_reflection_;
  delete MasterInfoControlledBySuperMaster::default_instance_;
  delete MasterInfoControlledBySuperMaster_reflection_;
  delete SuperMasterControlMessage::default_instance_;
  delete SuperMasterControlMessage_reflection_;
  delete AcceptRegisteredMessage::default_instance_;
  delete AcceptRegisteredMessage_reflection_;
  delete SlaveInfo::default_instance_;
  delete SlaveInfo_reflection_;
  delete OwnedSlavesMessage::default_instance_;
  delete OwnedSlavesMessage_reflection_;
  delete TerminatingMasterMessage::default_instance_;
  delete TerminatingMasterMessage_reflection_;
  delete AdministeredSlavesMessage::default_instance_;
  delete AdministeredSlavesMessage_reflection_;
  delete LaunchMasterMessage::default_instance_;
  delete LaunchMasterMessage_reflection_;
}

void protobuf_AddDesc_super_5fmaster_5frelated_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_hardware_5fresource_2eproto();
  ::protobuf_AddDesc_runtime_5fresource_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032super_master_related.proto\032\027hardware_r"
    "esource.proto\032\026runtime_resource.proto\"\206\001"
    "\n\023ChameleonMasterINFO\022\n\n\002id\030\001 \002(\t\022\n\n\002ip\030"
    "\002 \002(\r\022\014\n\004port\030\003 \002(\r\022\013\n\003pid\030\004 \001(\t\022\020\n\010host"
    "name\030\005 \001(\t\022\017\n\007version\030\006 \001(\t\022\031\n\007address\030\007"
    " \001(\0132\010.Address\"5\n\007Address\022\020\n\010hostname\030\001 "
    "\001(\t\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \002(\005\"\271\001\n\027Master"
    "RegisteredMessage\022\021\n\tmaster_id\030\001 \002(\t\022\023\n\013"
    "master_uuid\030\002 \002(\t\022B\n\006status\030\003 \002(\0162\037.Mast"
    "erRegisteredMessage.Status:\021FIRST_REGIST"
    "ERING\"2\n\006Status\022\025\n\021FIRST_REGISTERING\020\000\022\021"
    "\n\rREREGISTERING\020\001\"8\n\034SlavesInfoControlle"
    "dByMaster\022\n\n\002ip\030\001 \002(\t\022\014\n\004port\030\002 \002(\t\"=\n!M"
    "asterInfoControlledBySuperMaster\022\n\n\002ip\030\001"
    " \002(\t\022\014\n\004port\030\002 \002(\t\"\311\001\n\031SuperMasterContro"
    "lMessage\022\027\n\017super_master_id\030\001 \002(\t\022\031\n\021sup"
    "er_master_uuid\030\002 \001(\t\022\017\n\007passive\030\003 \002(\010\0220\n"
    "\tmy_slaves\030\004 \003(\0132\035.SlavesInfoControlledB"
    "yMaster\0225\n\tmy_master\030\005 \003(\0132\".MasterInfoC"
    "ontrolledBySuperMaster\"\201\001\n\027AcceptRegiste"
    "redMessage\022\021\n\tmaster_id\030\001 \002(\t\022/\n\006status\030"
    "\002 \002(\0162\037.AcceptRegisteredMessage.Status\"\""
    "\n\006Status\022\013\n\007SUCCESS\020\000\022\013\n\007FAILURE\020\001\"w\n\tSl"
    "aveInfo\0225\n\022hardware_resources\030\001 \002(\0132\031.Ha"
    "rdwareResourcesMessage\0223\n\021runtime_resour"
    "ces\030\002 \002(\0132\030.RuntimeResourcesMessage\"G\n\022O"
    "wnedSlavesMessage\022\037\n\013slave_infos\030\001 \003(\0132\n"
    ".SlaveInfo\022\020\n\010quantity\030\002 \002(\r\"-\n\030Terminat"
    "ingMasterMessage\022\021\n\tmaster_id\030\001 \002(\t\"\220\001\n\031"
    "AdministeredSlavesMessage\022\021\n\tmaster_id\030\001"
    " \002(\t\022\023\n\013master_uuid\030\002 \002(\t\022\031\n\021super_maste"
    "r_uuid\030\003 \002(\t\0220\n\tmy_slaves\030\004 \003(\0132\035.Slaves"
    "InfoControlledByMaster\"h\n\023LaunchMasterMe"
    "ssage\022\014\n\004port\030\001 \002(\t\022\023\n\013master_path\030\002 \002(\t"
    "\022\022\n\nwebui_path\030\003 \002(\t\022\032\n\022is_fault_toleran"
    "ce\030\004 \002(\010", 1408);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "super_master_related.proto", &protobuf_RegisterTypes);
  ChameleonMasterINFO::default_instance_ = new ChameleonMasterINFO();
  Address::default_instance_ = new Address();
  MasterRegisteredMessage::default_instance_ = new MasterRegisteredMessage();
  SlavesInfoControlledByMaster::default_instance_ = new SlavesInfoControlledByMaster();
  MasterInfoControlledBySuperMaster::default_instance_ = new MasterInfoControlledBySuperMaster();
  SuperMasterControlMessage::default_instance_ = new SuperMasterControlMessage();
  AcceptRegisteredMessage::default_instance_ = new AcceptRegisteredMessage();
  SlaveInfo::default_instance_ = new SlaveInfo();
  OwnedSlavesMessage::default_instance_ = new OwnedSlavesMessage();
  TerminatingMasterMessage::default_instance_ = new TerminatingMasterMessage();
  AdministeredSlavesMessage::default_instance_ = new AdministeredSlavesMessage();
  LaunchMasterMessage::default_instance_ = new LaunchMasterMessage();
  ChameleonMasterINFO::default_instance_->InitAsDefaultInstance();
  Address::default_instance_->InitAsDefaultInstance();
  MasterRegisteredMessage::default_instance_->InitAsDefaultInstance();
  SlavesInfoControlledByMaster::default_instance_->InitAsDefaultInstance();
  MasterInfoControlledBySuperMaster::default_instance_->InitAsDefaultInstance();
  SuperMasterControlMessage::default_instance_->InitAsDefaultInstance();
  AcceptRegisteredMessage::default_instance_->InitAsDefaultInstance();
  SlaveInfo::default_instance_->InitAsDefaultInstance();
  OwnedSlavesMessage::default_instance_->InitAsDefaultInstance();
  TerminatingMasterMessage::default_instance_->InitAsDefaultInstance();
  AdministeredSlavesMessage::default_instance_->InitAsDefaultInstance();
  LaunchMasterMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_super_5fmaster_5frelated_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_super_5fmaster_5frelated_2eproto {
  StaticDescriptorInitializer_super_5fmaster_5frelated_2eproto() {
    protobuf_AddDesc_super_5fmaster_5frelated_2eproto();
  }
} static_descriptor_initializer_super_5fmaster_5frelated_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChameleonMasterINFO::kIdFieldNumber;
const int ChameleonMasterINFO::kIpFieldNumber;
const int ChameleonMasterINFO::kPortFieldNumber;
const int ChameleonMasterINFO::kPidFieldNumber;
const int ChameleonMasterINFO::kHostnameFieldNumber;
const int ChameleonMasterINFO::kVersionFieldNumber;
const int ChameleonMasterINFO::kAddressFieldNumber;
#endif  // !_MSC_VER

ChameleonMasterINFO::ChameleonMasterINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChameleonMasterINFO)
}

void ChameleonMasterINFO::InitAsDefaultInstance() {
  address_ = const_cast< ::Address*>(&::Address::default_instance());
}

ChameleonMasterINFO::ChameleonMasterINFO(const ChameleonMasterINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChameleonMasterINFO)
}

void ChameleonMasterINFO::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = 0u;
  port_ = 0u;
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChameleonMasterINFO::~ChameleonMasterINFO() {
  // @@protoc_insertion_point(destructor:ChameleonMasterINFO)
  SharedDtor();
}

void ChameleonMasterINFO::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pid_;
  }
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
    delete address_;
  }
}

void ChameleonMasterINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChameleonMasterINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChameleonMasterINFO_descriptor_;
}

const ChameleonMasterINFO& ChameleonMasterINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_5fmaster_5frelated_2eproto();
  return *default_instance_;
}

ChameleonMasterINFO* ChameleonMasterINFO::default_instance_ = NULL;

ChameleonMasterINFO* ChameleonMasterINFO::New() const {
  return new ChameleonMasterINFO;
}

void ChameleonMasterINFO::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChameleonMasterINFO*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(ip_, port_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pid_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostname_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_address()) {
      if (address_ != NULL) address_->::Address::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChameleonMasterINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChameleonMasterINFO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ip;
        break;
      }

      // required uint32 ip = 2;
      case 2: {
        if (tag == 16) {
         parse_ip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pid;
        break;
      }

      // optional string pid = 4;
      case 4: {
        if (tag == 34) {
         parse_pid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hostname;
        break;
      }

      // optional string hostname = 5;
      case 5: {
        if (tag == 42) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hostname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // optional string version = 6;
      case 6: {
        if (tag == 50) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_address;
        break;
      }

      // optional .Address address = 7;
      case 7: {
        if (tag == 58) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChameleonMasterINFO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChameleonMasterINFO)
  return false;
#undef DO_
}

void ChameleonMasterINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChameleonMasterINFO)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required uint32 ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ip(), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional string pid = 4;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pid(), output);
  }

  // optional string hostname = 5;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hostname(), output);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->version(), output);
  }

  // optional .Address address = 7;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ChameleonMasterINFO)
}

::google::protobuf::uint8* ChameleonMasterINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChameleonMasterINFO)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required uint32 ip = 2;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ip(), target);
  }

  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // optional string pid = 4;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pid(), target);
  }

  // optional string hostname = 5;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hostname(), target);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // optional .Address address = 7;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChameleonMasterINFO)
  return target;
}

int ChameleonMasterINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required uint32 ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional string pid = 4;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }

    // optional string hostname = 5;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .Address address = 7;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChameleonMasterINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChameleonMasterINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChameleonMasterINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChameleonMasterINFO::MergeFrom(const ChameleonMasterINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_address()) {
      mutable_address()->::Address::MergeFrom(from.address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChameleonMasterINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChameleonMasterINFO::CopyFrom(const ChameleonMasterINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChameleonMasterINFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_address()) {
    if (!this->address().IsInitialized()) return false;
  }
  return true;
}

void ChameleonMasterINFO::Swap(ChameleonMasterINFO* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(pid_, other->pid_);
    std::swap(hostname_, other->hostname_);
    std::swap(version_, other->version_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChameleonMasterINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChameleonMasterINFO_descriptor_;
  metadata.reflection = ChameleonMasterINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Address::kHostnameFieldNumber;
const int Address::kIpFieldNumber;
const int Address::kPortFieldNumber;
#endif  // !_MSC_VER

Address::Address()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Address)
}

void Address::InitAsDefaultInstance() {
}

Address::Address(const Address& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Address)
}

void Address::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:Address)
  SharedDtor();
}

void Address::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Address_descriptor_;
}

const Address& Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_5fmaster_5frelated_2eproto();
  return *default_instance_;
}

Address* Address::default_instance_ = NULL;

Address* Address::New() const {
  return new Address;
}

void Address::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostname_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Address)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hostname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Address)
  return false;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Address)
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Address)
}

::google::protobuf::uint8* Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Address)
  // optional string hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Address)
  return target;
}

int Address::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Address* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Address*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void Address::Swap(Address* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Address_descriptor_;
  metadata.reflection = Address_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MasterRegisteredMessage_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterRegisteredMessage_Status_descriptor_;
}
bool MasterRegisteredMessage_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MasterRegisteredMessage_Status MasterRegisteredMessage::FIRST_REGISTERING;
const MasterRegisteredMessage_Status MasterRegisteredMessage::REREGISTERING;
const MasterRegisteredMessage_Status MasterRegisteredMessage::Status_MIN;
const MasterRegisteredMessage_Status MasterRegisteredMessage::Status_MAX;
const int MasterRegisteredMessage::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MasterRegisteredMessage::kMasterIdFieldNumber;
const int MasterRegisteredMessage::kMasterUuidFieldNumber;
const int MasterRegisteredMessage::kStatusFieldNumber;
#endif  // !_MSC_VER

MasterRegisteredMessage::MasterRegisteredMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MasterRegisteredMessage)
}

void MasterRegisteredMessage::InitAsDefaultInstance() {
}

MasterRegisteredMessage::MasterRegisteredMessage(const MasterRegisteredMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MasterRegisteredMessage)
}

void MasterRegisteredMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  master_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterRegisteredMessage::~MasterRegisteredMessage() {
  // @@protoc_insertion_point(destructor:MasterRegisteredMessage)
  SharedDtor();
}

void MasterRegisteredMessage::SharedDtor() {
  if (master_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_id_;
  }
  if (master_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_uuid_;
  }
  if (this != default_instance_) {
  }
}

void MasterRegisteredMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterRegisteredMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterRegisteredMessage_descriptor_;
}

const MasterRegisteredMessage& MasterRegisteredMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_5fmaster_5frelated_2eproto();
  return *default_instance_;
}

MasterRegisteredMessage* MasterRegisteredMessage::default_instance_ = NULL;

MasterRegisteredMessage* MasterRegisteredMessage::New() const {
  return new MasterRegisteredMessage;
}

void MasterRegisteredMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_master_id()) {
      if (master_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        master_id_->clear();
      }
    }
    if (has_master_uuid()) {
      if (master_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        master_uuid_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterRegisteredMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MasterRegisteredMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string master_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_id().data(), this->master_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "master_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_master_uuid;
        break;
      }

      // required string master_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_master_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_uuid().data(), this->master_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "master_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .MasterRegisteredMessage.Status status = 3 [default = FIRST_REGISTERING];
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MasterRegisteredMessage_Status_IsValid(value)) {
            set_status(static_cast< ::MasterRegisteredMessage_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MasterRegisteredMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MasterRegisteredMessage)
  return false;
#undef DO_
}

void MasterRegisteredMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MasterRegisteredMessage)
  // required string master_id = 1;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_id().data(), this->master_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->master_id(), output);
  }

  // required string master_uuid = 2;
  if (has_master_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_uuid().data(), this->master_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->master_uuid(), output);
  }

  // required .MasterRegisteredMessage.Status status = 3 [default = FIRST_REGISTERING];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MasterRegisteredMessage)
}

::google::protobuf::uint8* MasterRegisteredMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MasterRegisteredMessage)
  // required string master_id = 1;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_id().data(), this->master_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->master_id(), target);
  }

  // required string master_uuid = 2;
  if (has_master_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_uuid().data(), this->master_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->master_uuid(), target);
  }

  // required .MasterRegisteredMessage.Status status = 3 [default = FIRST_REGISTERING];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MasterRegisteredMessage)
  return target;
}

int MasterRegisteredMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string master_id = 1;
    if (has_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_id());
    }

    // required string master_uuid = 2;
    if (has_master_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_uuid());
    }

    // required .MasterRegisteredMessage.Status status = 3 [default = FIRST_REGISTERING];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterRegisteredMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterRegisteredMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterRegisteredMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterRegisteredMessage::MergeFrom(const MasterRegisteredMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_id()) {
      set_master_id(from.master_id());
    }
    if (from.has_master_uuid()) {
      set_master_uuid(from.master_uuid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterRegisteredMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterRegisteredMessage::CopyFrom(const MasterRegisteredMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterRegisteredMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MasterRegisteredMessage::Swap(MasterRegisteredMessage* other) {
  if (other != this) {
    std::swap(master_id_, other->master_id_);
    std::swap(master_uuid_, other->master_uuid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterRegisteredMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterRegisteredMessage_descriptor_;
  metadata.reflection = MasterRegisteredMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlavesInfoControlledByMaster::kIpFieldNumber;
const int SlavesInfoControlledByMaster::kPortFieldNumber;
#endif  // !_MSC_VER

SlavesInfoControlledByMaster::SlavesInfoControlledByMaster()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SlavesInfoControlledByMaster)
}

void SlavesInfoControlledByMaster::InitAsDefaultInstance() {
}

SlavesInfoControlledByMaster::SlavesInfoControlledByMaster(const SlavesInfoControlledByMaster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SlavesInfoControlledByMaster)
}

void SlavesInfoControlledByMaster::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlavesInfoControlledByMaster::~SlavesInfoControlledByMaster() {
  // @@protoc_insertion_point(destructor:SlavesInfoControlledByMaster)
  SharedDtor();
}

void SlavesInfoControlledByMaster::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void SlavesInfoControlledByMaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlavesInfoControlledByMaster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlavesInfoControlledByMaster_descriptor_;
}

const SlavesInfoControlledByMaster& SlavesInfoControlledByMaster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_5fmaster_5frelated_2eproto();
  return *default_instance_;
}

SlavesInfoControlledByMaster* SlavesInfoControlledByMaster::default_instance_ = NULL;

SlavesInfoControlledByMaster* SlavesInfoControlledByMaster::New() const {
  return new SlavesInfoControlledByMaster;
}

void SlavesInfoControlledByMaster::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlavesInfoControlledByMaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SlavesInfoControlledByMaster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_port;
        break;
      }

      // required string port = 2;
      case 2: {
        if (tag == 18) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "port");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SlavesInfoControlledByMaster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SlavesInfoControlledByMaster)
  return false;
#undef DO_
}

void SlavesInfoControlledByMaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SlavesInfoControlledByMaster)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SlavesInfoControlledByMaster)
}

::google::protobuf::uint8* SlavesInfoControlledByMaster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SlavesInfoControlledByMaster)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SlavesInfoControlledByMaster)
  return target;
}

int SlavesInfoControlledByMaster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlavesInfoControlledByMaster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlavesInfoControlledByMaster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlavesInfoControlledByMaster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlavesInfoControlledByMaster::MergeFrom(const SlavesInfoControlledByMaster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlavesInfoControlledByMaster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlavesInfoControlledByMaster::CopyFrom(const SlavesInfoControlledByMaster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlavesInfoControlledByMaster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SlavesInfoControlledByMaster::Swap(SlavesInfoControlledByMaster* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlavesInfoControlledByMaster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlavesInfoControlledByMaster_descriptor_;
  metadata.reflection = SlavesInfoControlledByMaster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MasterInfoControlledBySuperMaster::kIpFieldNumber;
const int MasterInfoControlledBySuperMaster::kPortFieldNumber;
#endif  // !_MSC_VER

MasterInfoControlledBySuperMaster::MasterInfoControlledBySuperMaster()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MasterInfoControlledBySuperMaster)
}

void MasterInfoControlledBySuperMaster::InitAsDefaultInstance() {
}

MasterInfoControlledBySuperMaster::MasterInfoControlledBySuperMaster(const MasterInfoControlledBySuperMaster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MasterInfoControlledBySuperMaster)
}

void MasterInfoControlledBySuperMaster::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MasterInfoControlledBySuperMaster::~MasterInfoControlledBySuperMaster() {
  // @@protoc_insertion_point(destructor:MasterInfoControlledBySuperMaster)
  SharedDtor();
}

void MasterInfoControlledBySuperMaster::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void MasterInfoControlledBySuperMaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MasterInfoControlledBySuperMaster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterInfoControlledBySuperMaster_descriptor_;
}

const MasterInfoControlledBySuperMaster& MasterInfoControlledBySuperMaster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_5fmaster_5frelated_2eproto();
  return *default_instance_;
}

MasterInfoControlledBySuperMaster* MasterInfoControlledBySuperMaster::default_instance_ = NULL;

MasterInfoControlledBySuperMaster* MasterInfoControlledBySuperMaster::New() const {
  return new MasterInfoControlledBySuperMaster;
}

void MasterInfoControlledBySuperMaster::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MasterInfoControlledBySuperMaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MasterInfoControlledBySuperMaster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_port;
        break;
      }

      // required string port = 2;
      case 2: {
        if (tag == 18) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "port");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MasterInfoControlledBySuperMaster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MasterInfoControlledBySuperMaster)
  return false;
#undef DO_
}

void MasterInfoControlledBySuperMaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MasterInfoControlledBySuperMaster)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MasterInfoControlledBySuperMaster)
}

::google::protobuf::uint8* MasterInfoControlledBySuperMaster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MasterInfoControlledBySuperMaster)
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MasterInfoControlledBySuperMaster)
  return target;
}

int MasterInfoControlledBySuperMaster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MasterInfoControlledBySuperMaster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MasterInfoControlledBySuperMaster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MasterInfoControlledBySuperMaster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MasterInfoControlledBySuperMaster::MergeFrom(const MasterInfoControlledBySuperMaster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MasterInfoControlledBySuperMaster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterInfoControlledBySuperMaster::CopyFrom(const MasterInfoControlledBySuperMaster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterInfoControlledBySuperMaster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MasterInfoControlledBySuperMaster::Swap(MasterInfoControlledBySuperMaster* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MasterInfoControlledBySuperMaster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MasterInfoControlledBySuperMaster_descriptor_;
  metadata.reflection = MasterInfoControlledBySuperMaster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperMasterControlMessage::kSuperMasterIdFieldNumber;
const int SuperMasterControlMessage::kSuperMasterUuidFieldNumber;
const int SuperMasterControlMessage::kPassiveFieldNumber;
const int SuperMasterControlMessage::kMySlavesFieldNumber;
const int SuperMasterControlMessage::kMyMasterFieldNumber;
#endif  // !_MSC_VER

SuperMasterControlMessage::SuperMasterControlMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SuperMasterControlMessage)
}

void SuperMasterControlMessage::InitAsDefaultInstance() {
}

SuperMasterControlMessage::SuperMasterControlMessage(const SuperMasterControlMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SuperMasterControlMessage)
}

void SuperMasterControlMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  super_master_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  super_master_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  passive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperMasterControlMessage::~SuperMasterControlMessage() {
  // @@protoc_insertion_point(destructor:SuperMasterControlMessage)
  SharedDtor();
}

void SuperMasterControlMessage::SharedDtor() {
  if (super_master_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete super_master_id_;
  }
  if (super_master_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete super_master_uuid_;
  }
  if (this != default_instance_) {
  }
}

void SuperMasterControlMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperMasterControlMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperMasterControlMessage_descriptor_;
}

const SuperMasterControlMessage& SuperMasterControlMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_5fmaster_5frelated_2eproto();
  return *default_instance_;
}

SuperMasterControlMessage* SuperMasterControlMessage::default_instance_ = NULL;

SuperMasterControlMessage* SuperMasterControlMessage::New() const {
  return new SuperMasterControlMessage;
}

void SuperMasterControlMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_super_master_id()) {
      if (super_master_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        super_master_id_->clear();
      }
    }
    if (has_super_master_uuid()) {
      if (super_master_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        super_master_uuid_->clear();
      }
    }
    passive_ = false;
  }
  my_slaves_.Clear();
  my_master_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperMasterControlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SuperMasterControlMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string super_master_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_super_master_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->super_master_id().data(), this->super_master_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "super_master_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_super_master_uuid;
        break;
      }

      // optional string super_master_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_super_master_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_super_master_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->super_master_uuid().data(), this->super_master_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "super_master_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_passive;
        break;
      }

      // required bool passive = 3;
      case 3: {
        if (tag == 24) {
         parse_passive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passive_)));
          set_has_passive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_my_slaves;
        break;
      }

      // repeated .SlavesInfoControlledByMaster my_slaves = 4;
      case 4: {
        if (tag == 34) {
         parse_my_slaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_my_slaves()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_my_slaves;
        if (input->ExpectTag(42)) goto parse_my_master;
        break;
      }

      // repeated .MasterInfoControlledBySuperMaster my_master = 5;
      case 5: {
        if (tag == 42) {
         parse_my_master:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_my_master()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_my_master;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SuperMasterControlMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SuperMasterControlMessage)
  return false;
#undef DO_
}

void SuperMasterControlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SuperMasterControlMessage)
  // required string super_master_id = 1;
  if (has_super_master_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->super_master_id().data(), this->super_master_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "super_master_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->super_master_id(), output);
  }

  // optional string super_master_uuid = 2;
  if (has_super_master_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->super_master_uuid().data(), this->super_master_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "super_master_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->super_master_uuid(), output);
  }

  // required bool passive = 3;
  if (has_passive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->passive(), output);
  }

  // repeated .SlavesInfoControlledByMaster my_slaves = 4;
  for (int i = 0; i < this->my_slaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->my_slaves(i), output);
  }

  // repeated .MasterInfoControlledBySuperMaster my_master = 5;
  for (int i = 0; i < this->my_master_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->my_master(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SuperMasterControlMessage)
}

::google::protobuf::uint8* SuperMasterControlMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SuperMasterControlMessage)
  // required string super_master_id = 1;
  if (has_super_master_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->super_master_id().data(), this->super_master_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "super_master_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->super_master_id(), target);
  }

  // optional string super_master_uuid = 2;
  if (has_super_master_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->super_master_uuid().data(), this->super_master_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "super_master_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->super_master_uuid(), target);
  }

  // required bool passive = 3;
  if (has_passive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->passive(), target);
  }

  // repeated .SlavesInfoControlledByMaster my_slaves = 4;
  for (int i = 0; i < this->my_slaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->my_slaves(i), target);
  }

  // repeated .MasterInfoControlledBySuperMaster my_master = 5;
  for (int i = 0; i < this->my_master_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->my_master(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SuperMasterControlMessage)
  return target;
}

int SuperMasterControlMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string super_master_id = 1;
    if (has_super_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->super_master_id());
    }

    // optional string super_master_uuid = 2;
    if (has_super_master_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->super_master_uuid());
    }

    // required bool passive = 3;
    if (has_passive()) {
      total_size += 1 + 1;
    }

  }
  // repeated .SlavesInfoControlledByMaster my_slaves = 4;
  total_size += 1 * this->my_slaves_size();
  for (int i = 0; i < this->my_slaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->my_slaves(i));
  }

  // repeated .MasterInfoControlledBySuperMaster my_master = 5;
  total_size += 1 * this->my_master_size();
  for (int i = 0; i < this->my_master_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->my_master(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperMasterControlMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperMasterControlMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperMasterControlMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperMasterControlMessage::MergeFrom(const SuperMasterControlMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  my_slaves_.MergeFrom(from.my_slaves_);
  my_master_.MergeFrom(from.my_master_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_super_master_id()) {
      set_super_master_id(from.super_master_id());
    }
    if (from.has_super_master_uuid()) {
      set_super_master_uuid(from.super_master_uuid());
    }
    if (from.has_passive()) {
      set_passive(from.passive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperMasterControlMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperMasterControlMessage::CopyFrom(const SuperMasterControlMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperMasterControlMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->my_slaves())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->my_master())) return false;
  return true;
}

void SuperMasterControlMessage::Swap(SuperMasterControlMessage* other) {
  if (other != this) {
    std::swap(super_master_id_, other->super_master_id_);
    std::swap(super_master_uuid_, other->super_master_uuid_);
    std::swap(passive_, other->passive_);
    my_slaves_.Swap(&other->my_slaves_);
    my_master_.Swap(&other->my_master_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperMasterControlMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperMasterControlMessage_descriptor_;
  metadata.reflection = SuperMasterControlMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AcceptRegisteredMessage_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptRegisteredMessage_Status_descriptor_;
}
bool AcceptRegisteredMessage_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AcceptRegisteredMessage_Status AcceptRegisteredMessage::SUCCESS;
const AcceptRegisteredMessage_Status AcceptRegisteredMessage::FAILURE;
const AcceptRegisteredMessage_Status AcceptRegisteredMessage::Status_MIN;
const AcceptRegisteredMessage_Status AcceptRegisteredMessage::Status_MAX;
const int AcceptRegisteredMessage::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AcceptRegisteredMessage::kMasterIdFieldNumber;
const int AcceptRegisteredMessage::kStatusFieldNumber;
#endif  // !_MSC_VER

AcceptRegisteredMessage::AcceptRegisteredMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AcceptRegisteredMessage)
}

void AcceptRegisteredMessage::InitAsDefaultInstance() {
}

AcceptRegisteredMessage::AcceptRegisteredMessage(const AcceptRegisteredMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AcceptRegisteredMessage)
}

void AcceptRegisteredMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  master_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptRegisteredMessage::~AcceptRegisteredMessage() {
  // @@protoc_insertion_point(destructor:AcceptRegisteredMessage)
  SharedDtor();
}

void AcceptRegisteredMessage::SharedDtor() {
  if (master_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_id_;
  }
  if (this != default_instance_) {
  }
}

void AcceptRegisteredMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptRegisteredMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptRegisteredMessage_descriptor_;
}

const AcceptRegisteredMessage& AcceptRegisteredMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_5fmaster_5frelated_2eproto();
  return *default_instance_;
}

AcceptRegisteredMessage* AcceptRegisteredMessage::default_instance_ = NULL;

AcceptRegisteredMessage* AcceptRegisteredMessage::New() const {
  return new AcceptRegisteredMessage;
}

void AcceptRegisteredMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_master_id()) {
      if (master_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        master_id_->clear();
      }
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptRegisteredMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AcceptRegisteredMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string master_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_id().data(), this->master_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "master_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .AcceptRegisteredMessage.Status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AcceptRegisteredMessage_Status_IsValid(value)) {
            set_status(static_cast< ::AcceptRegisteredMessage_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AcceptRegisteredMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AcceptRegisteredMessage)
  return false;
#undef DO_
}

void AcceptRegisteredMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AcceptRegisteredMessage)
  // required string master_id = 1;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_id().data(), this->master_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->master_id(), output);
  }

  // required .AcceptRegisteredMessage.Status status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AcceptRegisteredMessage)
}

::google::protobuf::uint8* AcceptRegisteredMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcceptRegisteredMessage)
  // required string master_id = 1;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_id().data(), this->master_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->master_id(), target);
  }

  // required .AcceptRegisteredMessage.Status status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcceptRegisteredMessage)
  return target;
}

int AcceptRegisteredMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string master_id = 1;
    if (has_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_id());
    }

    // required .AcceptRegisteredMessage.Status status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptRegisteredMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptRegisteredMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptRegisteredMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptRegisteredMessage::MergeFrom(const AcceptRegisteredMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_id()) {
      set_master_id(from.master_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptRegisteredMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptRegisteredMessage::CopyFrom(const AcceptRegisteredMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptRegisteredMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AcceptRegisteredMessage::Swap(AcceptRegisteredMessage* other) {
  if (other != this) {
    std::swap(master_id_, other->master_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptRegisteredMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptRegisteredMessage_descriptor_;
  metadata.reflection = AcceptRegisteredMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlaveInfo::kHardwareResourcesFieldNumber;
const int SlaveInfo::kRuntimeResourcesFieldNumber;
#endif  // !_MSC_VER

SlaveInfo::SlaveInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SlaveInfo)
}

void SlaveInfo::InitAsDefaultInstance() {
  hardware_resources_ = const_cast< ::HardwareResourcesMessage*>(&::HardwareResourcesMessage::default_instance());
  runtime_resources_ = const_cast< ::RuntimeResourcesMessage*>(&::RuntimeResourcesMessage::default_instance());
}

SlaveInfo::SlaveInfo(const SlaveInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SlaveInfo)
}

void SlaveInfo::SharedCtor() {
  _cached_size_ = 0;
  hardware_resources_ = NULL;
  runtime_resources_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlaveInfo::~SlaveInfo() {
  // @@protoc_insertion_point(destructor:SlaveInfo)
  SharedDtor();
}

void SlaveInfo::SharedDtor() {
  if (this != default_instance_) {
    delete hardware_resources_;
    delete runtime_resources_;
  }
}

void SlaveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlaveInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlaveInfo_descriptor_;
}

const SlaveInfo& SlaveInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_5fmaster_5frelated_2eproto();
  return *default_instance_;
}

SlaveInfo* SlaveInfo::default_instance_ = NULL;

SlaveInfo* SlaveInfo::New() const {
  return new SlaveInfo;
}

void SlaveInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_hardware_resources()) {
      if (hardware_resources_ != NULL) hardware_resources_->::HardwareResourcesMessage::Clear();
    }
    if (has_runtime_resources()) {
      if (runtime_resources_ != NULL) runtime_resources_->::RuntimeResourcesMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlaveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SlaveInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HardwareResourcesMessage hardware_resources = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hardware_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_runtime_resources;
        break;
      }

      // required .RuntimeResourcesMessage runtime_resources = 2;
      case 2: {
        if (tag == 18) {
         parse_runtime_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_runtime_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SlaveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SlaveInfo)
  return false;
#undef DO_
}

void SlaveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SlaveInfo)
  // required .HardwareResourcesMessage hardware_resources = 1;
  if (has_hardware_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hardware_resources(), output);
  }

  // required .RuntimeResourcesMessage runtime_resources = 2;
  if (has_runtime_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->runtime_resources(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SlaveInfo)
}

::google::protobuf::uint8* SlaveInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SlaveInfo)
  // required .HardwareResourcesMessage hardware_resources = 1;
  if (has_hardware_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hardware_resources(), target);
  }

  // required .RuntimeResourcesMessage runtime_resources = 2;
  if (has_runtime_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->runtime_resources(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SlaveInfo)
  return target;
}

int SlaveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HardwareResourcesMessage hardware_resources = 1;
    if (has_hardware_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hardware_resources());
    }

    // required .RuntimeResourcesMessage runtime_resources = 2;
    if (has_runtime_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->runtime_resources());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlaveInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlaveInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlaveInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlaveInfo::MergeFrom(const SlaveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hardware_resources()) {
      mutable_hardware_resources()->::HardwareResourcesMessage::MergeFrom(from.hardware_resources());
    }
    if (from.has_runtime_resources()) {
      mutable_runtime_resources()->::RuntimeResourcesMessage::MergeFrom(from.runtime_resources());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlaveInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaveInfo::CopyFrom(const SlaveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlaveInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_hardware_resources()) {
    if (!this->hardware_resources().IsInitialized()) return false;
  }
  if (has_runtime_resources()) {
    if (!this->runtime_resources().IsInitialized()) return false;
  }
  return true;
}

void SlaveInfo::Swap(SlaveInfo* other) {
  if (other != this) {
    std::swap(hardware_resources_, other->hardware_resources_);
    std::swap(runtime_resources_, other->runtime_resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlaveInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlaveInfo_descriptor_;
  metadata.reflection = SlaveInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OwnedSlavesMessage::kSlaveInfosFieldNumber;
const int OwnedSlavesMessage::kQuantityFieldNumber;
#endif  // !_MSC_VER

OwnedSlavesMessage::OwnedSlavesMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OwnedSlavesMessage)
}

void OwnedSlavesMessage::InitAsDefaultInstance() {
}

OwnedSlavesMessage::OwnedSlavesMessage(const OwnedSlavesMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:OwnedSlavesMessage)
}

void OwnedSlavesMessage::SharedCtor() {
  _cached_size_ = 0;
  quantity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OwnedSlavesMessage::~OwnedSlavesMessage() {
  // @@protoc_insertion_point(destructor:OwnedSlavesMessage)
  SharedDtor();
}

void OwnedSlavesMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OwnedSlavesMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OwnedSlavesMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OwnedSlavesMessage_descriptor_;
}

const OwnedSlavesMessage& OwnedSlavesMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_5fmaster_5frelated_2eproto();
  return *default_instance_;
}

OwnedSlavesMessage* OwnedSlavesMessage::default_instance_ = NULL;

OwnedSlavesMessage* OwnedSlavesMessage::New() const {
  return new OwnedSlavesMessage;
}

void OwnedSlavesMessage::Clear() {
  quantity_ = 0u;
  slave_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OwnedSlavesMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OwnedSlavesMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SlaveInfo slave_infos = 1;
      case 1: {
        if (tag == 10) {
         parse_slave_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slave_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_slave_infos;
        if (input->ExpectTag(16)) goto parse_quantity;
        break;
      }

      // required uint32 quantity = 2;
      case 2: {
        if (tag == 16) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OwnedSlavesMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OwnedSlavesMessage)
  return false;
#undef DO_
}

void OwnedSlavesMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OwnedSlavesMessage)
  // repeated .SlaveInfo slave_infos = 1;
  for (int i = 0; i < this->slave_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slave_infos(i), output);
  }

  // required uint32 quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quantity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OwnedSlavesMessage)
}

::google::protobuf::uint8* OwnedSlavesMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:OwnedSlavesMessage)
  // repeated .SlaveInfo slave_infos = 1;
  for (int i = 0; i < this->slave_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slave_infos(i), target);
  }

  // required uint32 quantity = 2;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quantity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OwnedSlavesMessage)
  return target;
}

int OwnedSlavesMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

  }
  // repeated .SlaveInfo slave_infos = 1;
  total_size += 1 * this->slave_infos_size();
  for (int i = 0; i < this->slave_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slave_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OwnedSlavesMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OwnedSlavesMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OwnedSlavesMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OwnedSlavesMessage::MergeFrom(const OwnedSlavesMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  slave_infos_.MergeFrom(from.slave_infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OwnedSlavesMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnedSlavesMessage::CopyFrom(const OwnedSlavesMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnedSlavesMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->slave_infos())) return false;
  return true;
}

void OwnedSlavesMessage::Swap(OwnedSlavesMessage* other) {
  if (other != this) {
    slave_infos_.Swap(&other->slave_infos_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OwnedSlavesMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OwnedSlavesMessage_descriptor_;
  metadata.reflection = OwnedSlavesMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TerminatingMasterMessage::kMasterIdFieldNumber;
#endif  // !_MSC_VER

TerminatingMasterMessage::TerminatingMasterMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TerminatingMasterMessage)
}

void TerminatingMasterMessage::InitAsDefaultInstance() {
}

TerminatingMasterMessage::TerminatingMasterMessage(const TerminatingMasterMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TerminatingMasterMessage)
}

void TerminatingMasterMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  master_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TerminatingMasterMessage::~TerminatingMasterMessage() {
  // @@protoc_insertion_point(destructor:TerminatingMasterMessage)
  SharedDtor();
}

void TerminatingMasterMessage::SharedDtor() {
  if (master_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_id_;
  }
  if (this != default_instance_) {
  }
}

void TerminatingMasterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TerminatingMasterMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TerminatingMasterMessage_descriptor_;
}

const TerminatingMasterMessage& TerminatingMasterMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_5fmaster_5frelated_2eproto();
  return *default_instance_;
}

TerminatingMasterMessage* TerminatingMasterMessage::default_instance_ = NULL;

TerminatingMasterMessage* TerminatingMasterMessage::New() const {
  return new TerminatingMasterMessage;
}

void TerminatingMasterMessage::Clear() {
  if (has_master_id()) {
    if (master_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      master_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TerminatingMasterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TerminatingMasterMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string master_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_id().data(), this->master_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "master_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TerminatingMasterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TerminatingMasterMessage)
  return false;
#undef DO_
}

void TerminatingMasterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TerminatingMasterMessage)
  // required string master_id = 1;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_id().data(), this->master_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->master_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TerminatingMasterMessage)
}

::google::protobuf::uint8* TerminatingMasterMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TerminatingMasterMessage)
  // required string master_id = 1;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_id().data(), this->master_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->master_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TerminatingMasterMessage)
  return target;
}

int TerminatingMasterMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string master_id = 1;
    if (has_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TerminatingMasterMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TerminatingMasterMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TerminatingMasterMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TerminatingMasterMessage::MergeFrom(const TerminatingMasterMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_id()) {
      set_master_id(from.master_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TerminatingMasterMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerminatingMasterMessage::CopyFrom(const TerminatingMasterMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminatingMasterMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TerminatingMasterMessage::Swap(TerminatingMasterMessage* other) {
  if (other != this) {
    std::swap(master_id_, other->master_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TerminatingMasterMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TerminatingMasterMessage_descriptor_;
  metadata.reflection = TerminatingMasterMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdministeredSlavesMessage::kMasterIdFieldNumber;
const int AdministeredSlavesMessage::kMasterUuidFieldNumber;
const int AdministeredSlavesMessage::kSuperMasterUuidFieldNumber;
const int AdministeredSlavesMessage::kMySlavesFieldNumber;
#endif  // !_MSC_VER

AdministeredSlavesMessage::AdministeredSlavesMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AdministeredSlavesMessage)
}

void AdministeredSlavesMessage::InitAsDefaultInstance() {
}

AdministeredSlavesMessage::AdministeredSlavesMessage(const AdministeredSlavesMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AdministeredSlavesMessage)
}

void AdministeredSlavesMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  master_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  super_master_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdministeredSlavesMessage::~AdministeredSlavesMessage() {
  // @@protoc_insertion_point(destructor:AdministeredSlavesMessage)
  SharedDtor();
}

void AdministeredSlavesMessage::SharedDtor() {
  if (master_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_id_;
  }
  if (master_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_uuid_;
  }
  if (super_master_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete super_master_uuid_;
  }
  if (this != default_instance_) {
  }
}

void AdministeredSlavesMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdministeredSlavesMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdministeredSlavesMessage_descriptor_;
}

const AdministeredSlavesMessage& AdministeredSlavesMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_5fmaster_5frelated_2eproto();
  return *default_instance_;
}

AdministeredSlavesMessage* AdministeredSlavesMessage::default_instance_ = NULL;

AdministeredSlavesMessage* AdministeredSlavesMessage::New() const {
  return new AdministeredSlavesMessage;
}

void AdministeredSlavesMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_master_id()) {
      if (master_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        master_id_->clear();
      }
    }
    if (has_master_uuid()) {
      if (master_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        master_uuid_->clear();
      }
    }
    if (has_super_master_uuid()) {
      if (super_master_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        super_master_uuid_->clear();
      }
    }
  }
  my_slaves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdministeredSlavesMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AdministeredSlavesMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string master_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_id().data(), this->master_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "master_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_master_uuid;
        break;
      }

      // required string master_uuid = 2;
      case 2: {
        if (tag == 18) {
         parse_master_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_uuid().data(), this->master_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "master_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_super_master_uuid;
        break;
      }

      // required string super_master_uuid = 3;
      case 3: {
        if (tag == 26) {
         parse_super_master_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_super_master_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->super_master_uuid().data(), this->super_master_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "super_master_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_my_slaves;
        break;
      }

      // repeated .SlavesInfoControlledByMaster my_slaves = 4;
      case 4: {
        if (tag == 34) {
         parse_my_slaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_my_slaves()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_my_slaves;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AdministeredSlavesMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AdministeredSlavesMessage)
  return false;
#undef DO_
}

void AdministeredSlavesMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AdministeredSlavesMessage)
  // required string master_id = 1;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_id().data(), this->master_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->master_id(), output);
  }

  // required string master_uuid = 2;
  if (has_master_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_uuid().data(), this->master_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->master_uuid(), output);
  }

  // required string super_master_uuid = 3;
  if (has_super_master_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->super_master_uuid().data(), this->super_master_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "super_master_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->super_master_uuid(), output);
  }

  // repeated .SlavesInfoControlledByMaster my_slaves = 4;
  for (int i = 0; i < this->my_slaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->my_slaves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AdministeredSlavesMessage)
}

::google::protobuf::uint8* AdministeredSlavesMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AdministeredSlavesMessage)
  // required string master_id = 1;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_id().data(), this->master_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->master_id(), target);
  }

  // required string master_uuid = 2;
  if (has_master_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_uuid().data(), this->master_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->master_uuid(), target);
  }

  // required string super_master_uuid = 3;
  if (has_super_master_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->super_master_uuid().data(), this->super_master_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "super_master_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->super_master_uuid(), target);
  }

  // repeated .SlavesInfoControlledByMaster my_slaves = 4;
  for (int i = 0; i < this->my_slaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->my_slaves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AdministeredSlavesMessage)
  return target;
}

int AdministeredSlavesMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string master_id = 1;
    if (has_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_id());
    }

    // required string master_uuid = 2;
    if (has_master_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_uuid());
    }

    // required string super_master_uuid = 3;
    if (has_super_master_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->super_master_uuid());
    }

  }
  // repeated .SlavesInfoControlledByMaster my_slaves = 4;
  total_size += 1 * this->my_slaves_size();
  for (int i = 0; i < this->my_slaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->my_slaves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdministeredSlavesMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdministeredSlavesMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdministeredSlavesMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdministeredSlavesMessage::MergeFrom(const AdministeredSlavesMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  my_slaves_.MergeFrom(from.my_slaves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_id()) {
      set_master_id(from.master_id());
    }
    if (from.has_master_uuid()) {
      set_master_uuid(from.master_uuid());
    }
    if (from.has_super_master_uuid()) {
      set_super_master_uuid(from.super_master_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdministeredSlavesMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdministeredSlavesMessage::CopyFrom(const AdministeredSlavesMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdministeredSlavesMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->my_slaves())) return false;
  return true;
}

void AdministeredSlavesMessage::Swap(AdministeredSlavesMessage* other) {
  if (other != this) {
    std::swap(master_id_, other->master_id_);
    std::swap(master_uuid_, other->master_uuid_);
    std::swap(super_master_uuid_, other->super_master_uuid_);
    my_slaves_.Swap(&other->my_slaves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdministeredSlavesMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdministeredSlavesMessage_descriptor_;
  metadata.reflection = AdministeredSlavesMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LaunchMasterMessage::kPortFieldNumber;
const int LaunchMasterMessage::kMasterPathFieldNumber;
const int LaunchMasterMessage::kWebuiPathFieldNumber;
const int LaunchMasterMessage::kIsFaultToleranceFieldNumber;
#endif  // !_MSC_VER

LaunchMasterMessage::LaunchMasterMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LaunchMasterMessage)
}

void LaunchMasterMessage::InitAsDefaultInstance() {
}

LaunchMasterMessage::LaunchMasterMessage(const LaunchMasterMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LaunchMasterMessage)
}

void LaunchMasterMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  webui_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_fault_tolerance_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaunchMasterMessage::~LaunchMasterMessage() {
  // @@protoc_insertion_point(destructor:LaunchMasterMessage)
  SharedDtor();
}

void LaunchMasterMessage::SharedDtor() {
  if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete port_;
  }
  if (master_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_path_;
  }
  if (webui_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webui_path_;
  }
  if (this != default_instance_) {
  }
}

void LaunchMasterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaunchMasterMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaunchMasterMessage_descriptor_;
}

const LaunchMasterMessage& LaunchMasterMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_super_5fmaster_5frelated_2eproto();
  return *default_instance_;
}

LaunchMasterMessage* LaunchMasterMessage::default_instance_ = NULL;

LaunchMasterMessage* LaunchMasterMessage::New() const {
  return new LaunchMasterMessage;
}

void LaunchMasterMessage::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        port_->clear();
      }
    }
    if (has_master_path()) {
      if (master_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        master_path_->clear();
      }
    }
    if (has_webui_path()) {
      if (webui_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        webui_path_->clear();
      }
    }
    is_fault_tolerance_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LaunchMasterMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LaunchMasterMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string port = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "port");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_master_path;
        break;
      }

      // required string master_path = 2;
      case 2: {
        if (tag == 18) {
         parse_master_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_path().data(), this->master_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "master_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_webui_path;
        break;
      }

      // required string webui_path = 3;
      case 3: {
        if (tag == 26) {
         parse_webui_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webui_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->webui_path().data(), this->webui_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "webui_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_fault_tolerance;
        break;
      }

      // required bool is_fault_tolerance = 4;
      case 4: {
        if (tag == 32) {
         parse_is_fault_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fault_tolerance_)));
          set_has_is_fault_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LaunchMasterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LaunchMasterMessage)
  return false;
#undef DO_
}

void LaunchMasterMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LaunchMasterMessage)
  // required string port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->port(), output);
  }

  // required string master_path = 2;
  if (has_master_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_path().data(), this->master_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->master_path(), output);
  }

  // required string webui_path = 3;
  if (has_webui_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webui_path().data(), this->webui_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "webui_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->webui_path(), output);
  }

  // required bool is_fault_tolerance = 4;
  if (has_is_fault_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_fault_tolerance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LaunchMasterMessage)
}

::google::protobuf::uint8* LaunchMasterMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LaunchMasterMessage)
  // required string port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->port(), target);
  }

  // required string master_path = 2;
  if (has_master_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_path().data(), this->master_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->master_path(), target);
  }

  // required string webui_path = 3;
  if (has_webui_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->webui_path().data(), this->webui_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "webui_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->webui_path(), target);
  }

  // required bool is_fault_tolerance = 4;
  if (has_is_fault_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_fault_tolerance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LaunchMasterMessage)
  return target;
}

int LaunchMasterMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

    // required string master_path = 2;
    if (has_master_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_path());
    }

    // required string webui_path = 3;
    if (has_webui_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webui_path());
    }

    // required bool is_fault_tolerance = 4;
    if (has_is_fault_tolerance()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaunchMasterMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LaunchMasterMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaunchMasterMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaunchMasterMessage::MergeFrom(const LaunchMasterMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_master_path()) {
      set_master_path(from.master_path());
    }
    if (from.has_webui_path()) {
      set_webui_path(from.webui_path());
    }
    if (from.has_is_fault_tolerance()) {
      set_is_fault_tolerance(from.is_fault_tolerance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LaunchMasterMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchMasterMessage::CopyFrom(const LaunchMasterMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchMasterMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LaunchMasterMessage::Swap(LaunchMasterMessage* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(master_path_, other->master_path_);
    std::swap(webui_path_, other->webui_path_);
    std::swap(is_fault_tolerance_, other->is_fault_tolerance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LaunchMasterMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaunchMasterMessage_descriptor_;
  metadata.reflection = LaunchMasterMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
