// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v1.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "v1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace docker {
namespace spec {
namespace v1 {

namespace {

const ::google::protobuf::Descriptor* Label_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Label_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageManifest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageManifest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageManifest_Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageManifest_Config_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_v1_2eproto() {
  protobuf_AddDesc_v1_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "v1.proto");
  GOOGLE_CHECK(file != NULL);
  Label_descriptor_ = file->message_type(0);
  static const int Label_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, value_),
  };
  Label_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Label_descriptor_,
      Label::default_instance_,
      Label_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Label));
  ImageManifest_descriptor_ = file->message_type(1);
  static const int ImageManifest_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, container_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, docker_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, architecture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, size_),
  };
  ImageManifest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageManifest_descriptor_,
      ImageManifest::default_instance_,
      ImageManifest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageManifest));
  ImageManifest_Config_descriptor_ = ImageManifest_descriptor_->nested_type(0);
  static const int ImageManifest_Config_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Config, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Config, entrypoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Config, env_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Config, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Config, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Config, workingdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Config, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Config, labels_),
  };
  ImageManifest_Config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageManifest_Config_descriptor_,
      ImageManifest_Config::default_instance_,
      ImageManifest_Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageManifest_Config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageManifest_Config));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_v1_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Label_descriptor_, &Label::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageManifest_descriptor_, &ImageManifest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageManifest_Config_descriptor_, &ImageManifest_Config::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_v1_2eproto() {
  delete Label::default_instance_;
  delete Label_reflection_;
  delete ImageManifest::default_instance_;
  delete ImageManifest_reflection_;
  delete ImageManifest_Config::default_instance_;
  delete ImageManifest_Config_reflection_;
}

void protobuf_AddDesc_v1_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010v1.proto\022\016docker.spec.v1\"#\n\005Label\022\013\n\003k"
    "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\321\003\n\rImageManifes"
    "t\022\n\n\002id\030\001 \001(\t\022\016\n\006parent\030\002 \001(\t\022\017\n\007comment"
    "\030\003 \001(\t\022\017\n\007created\030\004 \001(\t\022\021\n\tcontainer\030\005 \001"
    "(\t\022>\n\020container_config\030\006 \001(\0132$.docker.sp"
    "ec.v1.ImageManifest.Config\022\026\n\016docker_ver"
    "sion\030\007 \001(\t\022\016\n\006author\030\010 \001(\t\0224\n\006config\030\t \001"
    "(\0132$.docker.spec.v1.ImageManifest.Config"
    "\022\024\n\014architecture\030\n \001(\t\022\n\n\002os\030\013 \001(\t\022\014\n\004Si"
    "ze\030\014 \001(\r\032\240\001\n\006Config\022\020\n\010Hostname\030\001 \001(\t\022\022\n"
    "\nEntrypoint\030\002 \003(\t\022\013\n\003Env\030\003 \003(\t\022\014\n\004User\030\004"
    " \001(\t\022\013\n\003Cmd\030\005 \003(\t\022\022\n\nWorkingDir\030\006 \001(\t\022\r\n"
    "\005Image\030\010 \001(\t\022%\n\006labels\030\t \003(\0132\025.docker.sp"
    "ec.v1.Label", 531);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "v1.proto", &protobuf_RegisterTypes);
  Label::default_instance_ = new Label();
  ImageManifest::default_instance_ = new ImageManifest();
  ImageManifest_Config::default_instance_ = new ImageManifest_Config();
  Label::default_instance_->InitAsDefaultInstance();
  ImageManifest::default_instance_->InitAsDefaultInstance();
  ImageManifest_Config::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_v1_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_v1_2eproto {
  StaticDescriptorInitializer_v1_2eproto() {
    protobuf_AddDesc_v1_2eproto();
  }
} static_descriptor_initializer_v1_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Label::kKeyFieldNumber;
const int Label::kValueFieldNumber;
#endif  // !_MSC_VER

Label::Label()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:docker.spec.v1.Label)
}

void Label::InitAsDefaultInstance() {
}

Label::Label(const Label& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:docker.spec.v1.Label)
}

void Label::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:docker.spec.v1.Label)
  SharedDtor();
}

void Label::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Label::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Label_descriptor_;
}

const Label& Label::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_v1_2eproto();
  return *default_instance_;
}

Label* Label::default_instance_ = NULL;

Label* Label::New() const {
  return new Label;
}

void Label::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:docker.spec.v1.Label)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:docker.spec.v1.Label)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:docker.spec.v1.Label)
  return false;
#undef DO_
}

void Label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:docker.spec.v1.Label)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:docker.spec.v1.Label)
}

::google::protobuf::uint8* Label::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:docker.spec.v1.Label)
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:docker.spec.v1.Label)
  return target;
}

int Label::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Label::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Label* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Label*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Label::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {

  return true;
}

void Label::Swap(Label* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Label::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Label_descriptor_;
  metadata.reflection = Label_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageManifest_Config::kHostnameFieldNumber;
const int ImageManifest_Config::kEntrypointFieldNumber;
const int ImageManifest_Config::kEnvFieldNumber;
const int ImageManifest_Config::kUserFieldNumber;
const int ImageManifest_Config::kCmdFieldNumber;
const int ImageManifest_Config::kWorkingDirFieldNumber;
const int ImageManifest_Config::kImageFieldNumber;
const int ImageManifest_Config::kLabelsFieldNumber;
#endif  // !_MSC_VER

ImageManifest_Config::ImageManifest_Config()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:docker.spec.v1.ImageManifest.Config)
}

void ImageManifest_Config::InitAsDefaultInstance() {
}

ImageManifest_Config::ImageManifest_Config(const ImageManifest_Config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:docker.spec.v1.ImageManifest.Config)
}

void ImageManifest_Config::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workingdir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageManifest_Config::~ImageManifest_Config() {
  // @@protoc_insertion_point(destructor:docker.spec.v1.ImageManifest.Config)
  SharedDtor();
}

void ImageManifest_Config::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (workingdir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete workingdir_;
  }
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_;
  }
  if (this != default_instance_) {
  }
}

void ImageManifest_Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageManifest_Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageManifest_Config_descriptor_;
}

const ImageManifest_Config& ImageManifest_Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_v1_2eproto();
  return *default_instance_;
}

ImageManifest_Config* ImageManifest_Config::default_instance_ = NULL;

ImageManifest_Config* ImageManifest_Config::New() const {
  return new ImageManifest_Config;
}

void ImageManifest_Config::Clear() {
  if (_has_bits_[0 / 32] & 105) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostname_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_->clear();
      }
    }
    if (has_workingdir()) {
      if (workingdir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        workingdir_->clear();
      }
    }
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_->clear();
      }
    }
  }
  entrypoint_.Clear();
  env_.Clear();
  cmd_.Clear();
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageManifest_Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:docker.spec.v1.ImageManifest.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Hostname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hostname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Entrypoint;
        break;
      }

      // repeated string Entrypoint = 2;
      case 2: {
        if (tag == 18) {
         parse_Entrypoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_entrypoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->entrypoint(this->entrypoint_size() - 1).data(),
            this->entrypoint(this->entrypoint_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "entrypoint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Entrypoint;
        if (input->ExpectTag(26)) goto parse_Env;
        break;
      }

      // repeated string Env = 3;
      case 3: {
        if (tag == 26) {
         parse_Env:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_env()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->env(this->env_size() - 1).data(),
            this->env(this->env_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "env");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Env;
        if (input->ExpectTag(34)) goto parse_User;
        break;
      }

      // optional string User = 4;
      case 4: {
        if (tag == 34) {
         parse_User:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Cmd;
        break;
      }

      // repeated string Cmd = 5;
      case 5: {
        if (tag == 42) {
         parse_Cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmd(this->cmd_size() - 1).data(),
            this->cmd(this->cmd_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Cmd;
        if (input->ExpectTag(50)) goto parse_WorkingDir;
        break;
      }

      // optional string WorkingDir = 6;
      case 6: {
        if (tag == 50) {
         parse_WorkingDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workingdir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->workingdir().data(), this->workingdir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "workingdir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Image;
        break;
      }

      // optional string Image = 8;
      case 8: {
        if (tag == 66) {
         parse_Image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_labels;
        break;
      }

      // repeated .docker.spec.v1.Label labels = 9;
      case 9: {
        if (tag == 74) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_labels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:docker.spec.v1.ImageManifest.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:docker.spec.v1.ImageManifest.Config)
  return false;
#undef DO_
}

void ImageManifest_Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:docker.spec.v1.ImageManifest.Config)
  // optional string Hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // repeated string Entrypoint = 2;
  for (int i = 0; i < this->entrypoint_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->entrypoint(i).data(), this->entrypoint(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "entrypoint");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->entrypoint(i), output);
  }

  // repeated string Env = 3;
  for (int i = 0; i < this->env_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->env(i).data(), this->env(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "env");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->env(i), output);
  }

  // optional string User = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user(), output);
  }

  // repeated string Cmd = 5;
  for (int i = 0; i < this->cmd_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->cmd(i).data(), this->cmd(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "cmd");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cmd(i), output);
  }

  // optional string WorkingDir = 6;
  if (has_workingdir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workingdir().data(), this->workingdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "workingdir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->workingdir(), output);
  }

  // optional string Image = 8;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->image(), output);
  }

  // repeated .docker.spec.v1.Label labels = 9;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:docker.spec.v1.ImageManifest.Config)
}

::google::protobuf::uint8* ImageManifest_Config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:docker.spec.v1.ImageManifest.Config)
  // optional string Hostname = 1;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }

  // repeated string Entrypoint = 2;
  for (int i = 0; i < this->entrypoint_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->entrypoint(i).data(), this->entrypoint(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "entrypoint");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->entrypoint(i), target);
  }

  // repeated string Env = 3;
  for (int i = 0; i < this->env_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->env(i).data(), this->env(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "env");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->env(i), target);
  }

  // optional string User = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // repeated string Cmd = 5;
  for (int i = 0; i < this->cmd_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd(i).data(), this->cmd(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmd");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->cmd(i), target);
  }

  // optional string WorkingDir = 6;
  if (has_workingdir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workingdir().data(), this->workingdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "workingdir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->workingdir(), target);
  }

  // optional string Image = 8;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->image(), target);
  }

  // repeated .docker.spec.v1.Label labels = 9;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:docker.spec.v1.ImageManifest.Config)
  return target;
}

int ImageManifest_Config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string User = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string WorkingDir = 6;
    if (has_workingdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->workingdir());
    }

    // optional string Image = 8;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

  }
  // repeated string Entrypoint = 2;
  total_size += 1 * this->entrypoint_size();
  for (int i = 0; i < this->entrypoint_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->entrypoint(i));
  }

  // repeated string Env = 3;
  total_size += 1 * this->env_size();
  for (int i = 0; i < this->env_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->env(i));
  }

  // repeated string Cmd = 5;
  total_size += 1 * this->cmd_size();
  for (int i = 0; i < this->cmd_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cmd(i));
  }

  // repeated .docker.spec.v1.Label labels = 9;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageManifest_Config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageManifest_Config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageManifest_Config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageManifest_Config::MergeFrom(const ImageManifest_Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrypoint_.MergeFrom(from.entrypoint_);
  env_.MergeFrom(from.env_);
  cmd_.MergeFrom(from.cmd_);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_workingdir()) {
      set_workingdir(from.workingdir());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageManifest_Config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageManifest_Config::CopyFrom(const ImageManifest_Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageManifest_Config::IsInitialized() const {

  return true;
}

void ImageManifest_Config::Swap(ImageManifest_Config* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    entrypoint_.Swap(&other->entrypoint_);
    env_.Swap(&other->env_);
    std::swap(user_, other->user_);
    cmd_.Swap(&other->cmd_);
    std::swap(workingdir_, other->workingdir_);
    std::swap(image_, other->image_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageManifest_Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageManifest_Config_descriptor_;
  metadata.reflection = ImageManifest_Config_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ImageManifest::kIdFieldNumber;
const int ImageManifest::kParentFieldNumber;
const int ImageManifest::kCommentFieldNumber;
const int ImageManifest::kCreatedFieldNumber;
const int ImageManifest::kContainerFieldNumber;
const int ImageManifest::kContainerConfigFieldNumber;
const int ImageManifest::kDockerVersionFieldNumber;
const int ImageManifest::kAuthorFieldNumber;
const int ImageManifest::kConfigFieldNumber;
const int ImageManifest::kArchitectureFieldNumber;
const int ImageManifest::kOsFieldNumber;
const int ImageManifest::kSizeFieldNumber;
#endif  // !_MSC_VER

ImageManifest::ImageManifest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:docker.spec.v1.ImageManifest)
}

void ImageManifest::InitAsDefaultInstance() {
  container_config_ = const_cast< ::docker::spec::v1::ImageManifest_Config*>(&::docker::spec::v1::ImageManifest_Config::default_instance());
  config_ = const_cast< ::docker::spec::v1::ImageManifest_Config*>(&::docker::spec::v1::ImageManifest_Config::default_instance());
}

ImageManifest::ImageManifest(const ImageManifest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:docker.spec.v1.ImageManifest)
}

void ImageManifest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_config_ = NULL;
  docker_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_ = NULL;
  architecture_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageManifest::~ImageManifest() {
  // @@protoc_insertion_point(destructor:docker.spec.v1.ImageManifest)
  SharedDtor();
}

void ImageManifest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (parent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parent_;
  }
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (created_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete created_;
  }
  if (container_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete container_;
  }
  if (docker_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete docker_version_;
  }
  if (author_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete author_;
  }
  if (architecture_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete architecture_;
  }
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_;
  }
  if (this != default_instance_) {
    delete container_config_;
    delete config_;
  }
}

void ImageManifest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageManifest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageManifest_descriptor_;
}

const ImageManifest& ImageManifest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_v1_2eproto();
  return *default_instance_;
}

ImageManifest* ImageManifest::default_instance_ = NULL;

ImageManifest* ImageManifest::New() const {
  return new ImageManifest;
}

void ImageManifest::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_parent()) {
      if (parent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parent_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
    if (has_created()) {
      if (created_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        created_->clear();
      }
    }
    if (has_container()) {
      if (container_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        container_->clear();
      }
    }
    if (has_container_config()) {
      if (container_config_ != NULL) container_config_->::docker::spec::v1::ImageManifest_Config::Clear();
    }
    if (has_docker_version()) {
      if (docker_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        docker_version_->clear();
      }
    }
    if (has_author()) {
      if (author_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        author_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_config()) {
      if (config_ != NULL) config_->::docker::spec::v1::ImageManifest_Config::Clear();
    }
    if (has_architecture()) {
      if (architecture_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        architecture_->clear();
      }
    }
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_->clear();
      }
    }
    size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageManifest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:docker.spec.v1.ImageManifest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_parent;
        break;
      }

      // optional string parent = 2;
      case 2: {
        if (tag == 18) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_comment;
        break;
      }

      // optional string comment = 3;
      case 3: {
        if (tag == 26) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_created;
        break;
      }

      // optional string created = 4;
      case 4: {
        if (tag == 34) {
         parse_created:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_created()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->created().data(), this->created().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "created");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_container;
        break;
      }

      // optional string container = 5;
      case 5: {
        if (tag == 42) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->container().data(), this->container().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "container");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_container_config;
        break;
      }

      // optional .docker.spec.v1.ImageManifest.Config container_config = 6;
      case 6: {
        if (tag == 50) {
         parse_container_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_docker_version;
        break;
      }

      // optional string docker_version = 7;
      case 7: {
        if (tag == 58) {
         parse_docker_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docker_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->docker_version().data(), this->docker_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "docker_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_author;
        break;
      }

      // optional string author = 8;
      case 8: {
        if (tag == 66) {
         parse_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author().data(), this->author().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "author");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_config;
        break;
      }

      // optional .docker.spec.v1.ImageManifest.Config config = 9;
      case 9: {
        if (tag == 74) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_architecture;
        break;
      }

      // optional string architecture = 10;
      case 10: {
        if (tag == 82) {
         parse_architecture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_architecture()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->architecture().data(), this->architecture().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "architecture");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_os;
        break;
      }

      // optional string os = 11;
      case 11: {
        if (tag == 90) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_Size;
        break;
      }

      // optional uint32 Size = 12;
      case 12: {
        if (tag == 96) {
         parse_Size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:docker.spec.v1.ImageManifest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:docker.spec.v1.ImageManifest)
  return false;
#undef DO_
}

void ImageManifest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:docker.spec.v1.ImageManifest)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string parent = 2;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->parent(), output);
  }

  // optional string comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->comment(), output);
  }

  // optional string created = 4;
  if (has_created()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->created().data(), this->created().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "created");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->created(), output);
  }

  // optional string container = 5;
  if (has_container()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->container().data(), this->container().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "container");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->container(), output);
  }

  // optional .docker.spec.v1.ImageManifest.Config container_config = 6;
  if (has_container_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->container_config(), output);
  }

  // optional string docker_version = 7;
  if (has_docker_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docker_version().data(), this->docker_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "docker_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->docker_version(), output);
  }

  // optional string author = 8;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->author(), output);
  }

  // optional .docker.spec.v1.ImageManifest.Config config = 9;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->config(), output);
  }

  // optional string architecture = 10;
  if (has_architecture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->architecture().data(), this->architecture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "architecture");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->architecture(), output);
  }

  // optional string os = 11;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->os(), output);
  }

  // optional uint32 Size = 12;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:docker.spec.v1.ImageManifest)
}

::google::protobuf::uint8* ImageManifest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:docker.spec.v1.ImageManifest)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string parent = 2;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parent(), target);
  }

  // optional string comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->comment(), target);
  }

  // optional string created = 4;
  if (has_created()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->created().data(), this->created().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "created");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->created(), target);
  }

  // optional string container = 5;
  if (has_container()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->container().data(), this->container().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "container");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->container(), target);
  }

  // optional .docker.spec.v1.ImageManifest.Config container_config = 6;
  if (has_container_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->container_config(), target);
  }

  // optional string docker_version = 7;
  if (has_docker_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->docker_version().data(), this->docker_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "docker_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->docker_version(), target);
  }

  // optional string author = 8;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->author(), target);
  }

  // optional .docker.spec.v1.ImageManifest.Config config = 9;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->config(), target);
  }

  // optional string architecture = 10;
  if (has_architecture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->architecture().data(), this->architecture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "architecture");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->architecture(), target);
  }

  // optional string os = 11;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->os(), target);
  }

  // optional uint32 Size = 12;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:docker.spec.v1.ImageManifest)
  return target;
}

int ImageManifest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string parent = 2;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent());
    }

    // optional string comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string created = 4;
    if (has_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->created());
    }

    // optional string container = 5;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->container());
    }

    // optional .docker.spec.v1.ImageManifest.Config container_config = 6;
    if (has_container_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container_config());
    }

    // optional string docker_version = 7;
    if (has_docker_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->docker_version());
    }

    // optional string author = 8;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .docker.spec.v1.ImageManifest.Config config = 9;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

    // optional string architecture = 10;
    if (has_architecture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->architecture());
    }

    // optional string os = 11;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional uint32 Size = 12;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageManifest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageManifest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageManifest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageManifest::MergeFrom(const ImageManifest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_created()) {
      set_created(from.created());
    }
    if (from.has_container()) {
      set_container(from.container());
    }
    if (from.has_container_config()) {
      mutable_container_config()->::docker::spec::v1::ImageManifest_Config::MergeFrom(from.container_config());
    }
    if (from.has_docker_version()) {
      set_docker_version(from.docker_version());
    }
    if (from.has_author()) {
      set_author(from.author());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_config()) {
      mutable_config()->::docker::spec::v1::ImageManifest_Config::MergeFrom(from.config());
    }
    if (from.has_architecture()) {
      set_architecture(from.architecture());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageManifest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageManifest::CopyFrom(const ImageManifest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageManifest::IsInitialized() const {

  return true;
}

void ImageManifest::Swap(ImageManifest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(parent_, other->parent_);
    std::swap(comment_, other->comment_);
    std::swap(created_, other->created_);
    std::swap(container_, other->container_);
    std::swap(container_config_, other->container_config_);
    std::swap(docker_version_, other->docker_version_);
    std::swap(author_, other->author_);
    std::swap(config_, other->config_);
    std::swap(architecture_, other->architecture_);
    std::swap(os_, other->os_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageManifest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageManifest_descriptor_;
  metadata.reflection = ImageManifest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace spec
}  // namespace docker

// @@protoc_insertion_point(global_scope)
